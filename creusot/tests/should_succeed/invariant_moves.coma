
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
  function any_l (_ : 'b) : 'a
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
  function any_l (_ : 'b) : 'a
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  function any_l (_ : 'b) : 'a
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't))= any
    [ good (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (_marker:Core_Marker_PhantomData_Type.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.UIntSize
  use prelude.Int
  type t_cap  =
    | C_Cap usize
    
  function any_l (_ : 'b) : 'a
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Alloc_RawVec_Cap_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) (Alloc_RawVec_Cap_Type.t_cap) 'a
    
  function any_l (_ : 'b) : 'a
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a))= any
    [ good (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Core_Ptr_Unique_Unique_Type.t_unique 't) (cap:Alloc_RawVec_Cap_Type.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc
      <> input}
      {false}
      any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  function any_l (_ : 'b) : 'a
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
  function any_l (_ : 'b) : 'a
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module InvariantMoves_TestInvariantMove
  let%span sinvariant_moves0 = "../invariant_moves.rs" 6 16 6 22
  let%span sinvariant_moves1 = "../invariant_moves.rs" 7 4 7 45
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  let%span span3 = "" 0 0 0 0
  let%span span4 = "../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  let%span span5 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span span6 = "../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  let%span span7 = "../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  let%span span8 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  let%span span9 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span span10 = "../../../../creusot-contracts/src/std/vec.rs" 51 8 51 85
  let%span span11 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  let%span span12 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  let%span span13 = "" 0 0 0 0
  let%span span14 = "../../../../creusot-contracts/src/std/vec.rs" 86 26 91 17
  let%span span15 = "" 0 0 0 0
  use prelude.UInt32
  use seq.Seq
  predicate invariant'3 (self : Seq.seq uint32) =
    [%#span2] true
  let rec invariant'3 (self:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Seq.seq uint32)
  let rec inv'3 (_x:Seq.seq uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Seq.seq uint32 . inv'3 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.UIntSize
  use prelude.Int
  constant max'0 : usize = [%#span3] (18446744073709551615 : usize)
  use seq.Seq
  predicate inv'2 (_x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
  let rec inv'2 (_x:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  function shallow_model'0 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : Seq.seq uint32
  let rec shallow_model'0 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:Seq.seq uint32))= {[@expl:precondition] [%#span4] inv'2 self}
    any [ return' (result:Seq.seq uint32)-> {result = shallow_model'0 self} (! return' {result}) ] 
  axiom shallow_model'0_spec : forall self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . ([%#span4] inv'2 self)
   -> ([%#span6] inv'3 (shallow_model'0 self))
  && ([%#span5] Seq.length (shallow_model'0 self) <= UIntSize.to_int (max'0 : usize))
  predicate invariant'2 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [%#span7] inv'3 (shallow_model'0 self)
  let rec invariant'2 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  axiom inv'2 : forall x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) . inv'2 x = true
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant'1 (self : Core_Option_Option_Type.t_option uint32) =
    [%#span2] true
  let rec invariant'1 (self:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Core_Option_Option_Type.t_option uint32)
  let rec inv'1 (_x:Core_Option_Option_Type.t_option uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Core_Option_Option_Type.t_option uint32 . inv'1 x = true
  use prelude.Borrow
  predicate invariant'0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) =
    [%#span2] true
  let rec invariant'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)))
  let rec inv'0 (_x:borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) . inv'0 x
  = true
  use prelude.Intrinsic
  predicate resolve'2 (self : uint32) =
    [%#span8] true
  let rec resolve'2 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'2 self} (! return' {result}) ]
    
  use seq.Seq
  function index_logic'0 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix : int) : uint32
    
   =
    [%#span9] Seq.get (shallow_model'0 self) ix
  let rec index_logic'0 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (ix:int) (return'  (ret:uint32))= any
    [ return' (result:uint32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  predicate resolve'1 (self : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) =
    [%#span10] forall i : int . 0 <= i /\ i < Seq.length (shallow_model'0 self)  -> resolve'2 (index_logic'0 self i)
  let rec resolve'1 (self:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  predicate resolve'0 (self : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) =
    [%#span11]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use seq.Seq
  use seq_ext.SeqExt
  function shallow_model'1 (self : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) : Seq.seq uint32
    
   =
    [%#span12] shallow_model'0 ( * self)
  let rec shallow_model'1 (self:borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Seq.seq uint32))= any
    [ return' (result:Seq.seq uint32)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  let rec pop'0 (self:borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) (return'  (ret:Core_Option_Option_Type.t_option uint32))= {[@expl:precondition] [%#span13] inv'0 self}
    any
    [ return' (result:Core_Option_Option_Type.t_option uint32)-> {[%#span15] inv'1 result}
      {[%#span14] match result with
        | Core_Option_Option_Type.C_Some t -> shallow_model'0 ( ^ self)
        = SeqExt.subsequence (shallow_model'1 self) 0 (Seq.length (shallow_model'1 self) - 1)
        /\ shallow_model'1 self = Seq.snoc (shallow_model'0 ( ^ self)) t
        | Core_Option_Option_Type.C_None ->  * self =  ^ self /\ Seq.length (shallow_model'1 self) = 0
        end}
      (! return' {result}) ]
    
  let rec test_invariant_move (x:Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = bb1 ] 
    | bb1 = s0 [ s0 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [%#sinvariant_moves0] x = x}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = Borrow.borrow_mut <Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)> {x}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_6 <- _ret' ] 
                 [ &x <-  ^ _6 ] 
                s1)
          | s1 = Borrow.borrow_final
              <Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)>
              { * _6}
              {Borrow.get_id _6}
              (fun (_ret':borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))) ->
                 [ &_5 <- _ret' ] 
                 [ &_6 <- { _6 with current = ( ^ _5) ; } ] 
                s2)
          | s2 = pop'0 {_5} (fun (_ret':Core_Option_Option_Type.t_option uint32) ->  [ &_4 <- _ret' ] s3)
          | s3 = bb4 ]
          
        | bb4 = s0
          [ s0 = -{resolve'0 _6}- s1
          | s1 = any
            [ br0 -> {_4 = Core_Option_Option_Type.C_None } (! bb7)
            | br1 (a:uint32)-> {_4 = Core_Option_Option_Type.C_Some a} (! bb5) ]
             ]
          
        | bb5 = s0 [ s0 = bb6 ] 
        | bb6 = s0 [ s0 = bb2 ]  ]
         ]
      
    | bb7 = s0 [ s0 = -{resolve'1 x}- s1 | s1 =  [ &_0 <- [%#sinvariant_moves1] () ] s2 | s2 = bb8 ] 
    | bb8 = s0 [ s0 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l () : ()
    | & x : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global) = x
    | & _4 : Core_Option_Option_Type.t_option uint32 = any_l () : Core_Option_Option_Type.t_option uint32
    | & _5 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global))
    | & _6 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) = any_l () : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) ]
     [ return' (result:())-> (! return' {result}) ] 
end
