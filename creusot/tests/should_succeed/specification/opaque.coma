
module Opaque_Test
  let%span sopaque0 = "../opaque.rs" 21 18 21 34
  let%span sopaque1 = "../opaque.rs" 22 18 22 40
  let%span span2 = "../opaque.rs" 16 8 16 12
  let%span span3 = "../opaque.rs" 10 8 10 12
  use prelude.Intrinsic
  predicate transparent_crate'0 [#"../opaque.rs" 15 4 15 38] (_1 : ()) =
    [%#span2] true
  let rec transparent_crate'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = transparent_crate'0 _1} (! return' {result}) ]
    
  predicate transparent'0 [#"../opaque.rs" 9 4 9 32] (_1 : ()) =
    [%#span3] true
  let rec transparent'0 (_1:()) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = transparent'0 _1} (! return' {result}) ]
    
  let rec test (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#sopaque0] transparent'0 ()} s1
      | s1 = {[@expl:assertion] [%#sopaque1] transparent_crate'0 ()} s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
