
module Borrows_NonZeroU32_Type
  use prelude.Int
  use prelude.UInt32
  type t_nonzerou32  =
    | C_NonZeroU32 uint32
    
  let function nonzerou32_0 (self : t_nonzerou32) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_NonZeroU32 a -> a
      end
end
module Borrows_Impl0_Invariant_Stub
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  predicate invariant' [#"../borrows.rs" 11 4 11 30] (self : Borrows_NonZeroU32_Type.t_nonzerou32)
end
module Borrows_Impl0_Invariant_Interface
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  predicate invariant' [#"../borrows.rs" 11 4 11 30] (self : Borrows_NonZeroU32_Type.t_nonzerou32)
  val invariant' [#"../borrows.rs" 11 4 11 30] (self : Borrows_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant' self }
    
end
module Borrows_Impl0_Invariant
  use prelude.UInt32
  use prelude.Int
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  predicate invariant' [#"../borrows.rs" 11 4 11 30] (self : Borrows_NonZeroU32_Type.t_nonzerou32) =
    [#"../borrows.rs" 12 20 12 31] UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 self) > 0
  val invariant' [#"../borrows.rs" 11 4 11 30] (self : Borrows_NonZeroU32_Type.t_nonzerou32) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 40 4 40 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Borrows_NonZeroU32_Type_Inv
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  clone Borrows_Impl0_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  axiom inv_t_nonzerou32 [@rewrite] : forall self : Borrows_NonZeroU32_Type.t_nonzerou32 . Inv0.inv self = Invariant0.invariant' self
end
module Borrows_Impl1_New_Interface
  use prelude.UInt32
  use prelude.Int
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  val new [#"../borrows.rs" 19 4 19 30] (n : uint32) : Borrows_NonZeroU32_Type.t_nonzerou32
    requires {[#"../borrows.rs" 17 15 17 21] UInt32.to_int n > 0}
    ensures { [#"../borrows.rs" 18 14 18 27] Borrows_NonZeroU32_Type.nonzerou32_0 result = n }
    ensures { [#"../borrows.rs" 19 26 19 30] Inv0.inv result }
    
end
module Borrows_Impl1_New
  use prelude.Int
  use prelude.UInt32
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  clone Borrows_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  clone Borrows_NonZeroU32_Type_Inv as Borrows_NonZeroU32_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  let rec cfg new [#"../borrows.rs" 19 4 19 30] [@cfg:stackify] [@cfg:subregion_analysis] (n : uint32) : Borrows_NonZeroU32_Type.t_nonzerou32
    requires {[#"../borrows.rs" 17 15 17 21] UInt32.to_int n > 0}
    ensures { [#"../borrows.rs" 18 14 18 27] Borrows_NonZeroU32_Type.nonzerou32_0 result = n }
    ensures { [#"../borrows.rs" 19 26 19 30] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Borrows_NonZeroU32_Type.t_nonzerou32;
  var n : uint32 = n;
  {
    goto BB0
  }
  BB0 {
    _0 <- Borrows_NonZeroU32_Type.C_NonZeroU32 n;
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = borrowed t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv ( * self))
end
module CreusotContracts_Invariant_Impl0_Invariant_Stub
  type t
  predicate invariant' (self : t)
end
module CreusotContracts_Invariant_Impl0_Invariant_Interface
  type t
  predicate invariant' (self : t)
  val invariant' (self : t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl0_Invariant
  type t
  predicate invariant' (self : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 21 8 21 12] true
  val invariant' (self : t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl0_IsInhabited_Stub
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool
end
module CreusotContracts_Invariant_Impl0_IsInhabited_Interface
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Impl0_IsInhabited
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool =
    [#"../../../../../creusot-contracts/src/invariant.rs" 32 8 32 12] true
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x)
end
module Borrows_Impl1_SubMut_Interface
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Int
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Borrows_NonZeroU32_Type.t_nonzerou32)
  val sub_mut [#"../borrows.rs" 25 4 25 40] (self : borrowed (Borrows_NonZeroU32_Type.t_nonzerou32)) (rhs : Borrows_NonZeroU32_Type.t_nonzerou32) : ()
    requires {[#"../borrows.rs" 23 15 23 31] UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 ( * self)) > UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 rhs)}
    requires {[#"../borrows.rs" 25 24 25 28] Inv0.inv self}
    requires {[#"../borrows.rs" 25 30 25 33] Inv1.inv rhs}
    ensures { [#"../borrows.rs" 24 14 24 47] UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 ( ^ self)) = UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 ( * self)) - UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 rhs) }
    ensures { [#"../borrows.rs" 25 24 25 28] Inv1.inv ( ^ self) }
    
end
module Borrows_Impl1_SubMut
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant0 with
    type t = borrowed (Borrows_NonZeroU32_Type.t_nonzerou32)
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (Borrows_NonZeroU32_Type.t_nonzerou32)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited0 with
    type t = borrowed (Borrows_NonZeroU32_Type.t_nonzerou32),
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Borrows_Impl0_Invariant as Invariant1
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  clone Borrows_NonZeroU32_Type_Inv as Borrows_NonZeroU32_Type_Inv0 with
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  let rec cfg sub_mut [#"../borrows.rs" 25 4 25 40] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (Borrows_NonZeroU32_Type.t_nonzerou32)) (rhs : Borrows_NonZeroU32_Type.t_nonzerou32) : ()
    requires {[#"../borrows.rs" 23 15 23 31] UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 ( * self)) > UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 rhs)}
    requires {[#"../borrows.rs" 25 24 25 28] Inv0.inv self}
    requires {[#"../borrows.rs" 25 30 25 33] Inv1.inv rhs}
    ensures { [#"../borrows.rs" 24 14 24 47] UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 ( ^ self)) = UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 ( * self)) - UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 rhs) }
    ensures { [#"../borrows.rs" 25 24 25 28] Inv1.inv ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (Borrows_NonZeroU32_Type.t_nonzerou32) = self;
  var rhs : Borrows_NonZeroU32_Type.t_nonzerou32 = rhs;
  {
    goto BB0
  }
  BB0 {
    self <- { self with current = (let Borrows_NonZeroU32_Type.C_NonZeroU32 a =  * self in Borrows_NonZeroU32_Type.C_NonZeroU32 ([#"../borrows.rs" 26 8 26 23] Borrows_NonZeroU32_Type.nonzerou32_0 ( * self) - Borrows_NonZeroU32_Type.nonzerou32_0 rhs)) };
    assume { Resolve0.resolve self };
    _0 <- ();
    return _0
  }
  
end
module Borrows_Dec_Interface
  use prelude.UInt32
  use prelude.Int
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  val dec [#"../borrows.rs" 31 0 31 43] (n : Borrows_NonZeroU32_Type.t_nonzerou32) : Borrows_NonZeroU32_Type.t_nonzerou32
    requires {[#"../borrows.rs" 30 11 30 19] UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 n) > 1}
    requires {[#"../borrows.rs" 31 15 31 16] Inv0.inv n}
    ensures { [#"../borrows.rs" 31 33 31 43] Inv0.inv result }
    
end
module Borrows_Dec
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  use Borrows_NonZeroU32_Type as Borrows_NonZeroU32_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant1 with
    type t = borrowed (Borrows_NonZeroU32_Type.t_nonzerou32)
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Borrows_NonZeroU32_Type.t_nonzerou32)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited0 with
    type t = borrowed (Borrows_NonZeroU32_Type.t_nonzerou32),
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone Borrows_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone Borrows_NonZeroU32_Type_Inv as Borrows_NonZeroU32_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Borrows_NonZeroU32_Type.t_nonzerou32
  clone Borrows_Impl1_SubMut_Interface as SubMut0 with
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv0.inv
  clone Borrows_Impl1_New_Interface as New0 with
    predicate Inv0.inv = Inv0.inv
  let rec cfg dec [#"../borrows.rs" 31 0 31 43] [@cfg:stackify] [@cfg:subregion_analysis] (n : Borrows_NonZeroU32_Type.t_nonzerou32) : Borrows_NonZeroU32_Type.t_nonzerou32
    requires {[#"../borrows.rs" 30 11 30 19] UInt32.to_int (Borrows_NonZeroU32_Type.nonzerou32_0 n) > 1}
    requires {[#"../borrows.rs" 31 15 31 16] Inv0.inv n}
    ensures { [#"../borrows.rs" 31 33 31 43] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Borrows_NonZeroU32_Type.t_nonzerou32;
  var n : Borrows_NonZeroU32_Type.t_nonzerou32 = n;
  var borrowed : borrowed (Borrows_NonZeroU32_Type.t_nonzerou32);
  var _4 : ();
  var _5 : borrowed (Borrows_NonZeroU32_Type.t_nonzerou32);
  {
    goto BB0
  }
  BB0 {
    borrowed <- borrow_mut n;
    n <-  ^ borrowed;
    _5 <- borrow_mut ( * borrowed);
    borrowed <- { borrowed with current = ( ^ _5) };
    goto BB1
  }
  BB1 {
    _4 <- ([#"../borrows.rs" 33 4 33 40] SubMut0.sub_mut _5 ([#"../borrows.rs" 33 21 33 39] New0.new ([#"../borrows.rs" 33 37 33 38] (1 : uint32))));
    _5 <- any borrowed (Borrows_NonZeroU32_Type.t_nonzerou32);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve borrowed };
    _0 <- n;
    n <- any Borrows_NonZeroU32_Type.t_nonzerou32;
    return _0
  }
  
end
module Borrows_Impl0
  
end
