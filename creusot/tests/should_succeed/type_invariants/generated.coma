
module Generated_Sum10_Type
  use prelude.Int32
  use prelude.Int
  type t_sum10  =
    | C_Sum10 int32 int32
    
  function any_l (_ : 'b) : 'a
  let rec t_sum10 (input:t_sum10) (ret  (field_0:int32) (field_1:int32))= any
    [ good (field_0:int32) (field_1:int32)-> {C_Sum10 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:int32) (field_1:int32)-> {C_Sum10 field_0 field_1 <> input} {false} any ]
    
  function sum10_0 (self : t_sum10) : int32 =
    match self with
      | C_Sum10 a _ -> a
      end
  function sum10_1 (self : t_sum10) : int32 =
    match self with
      | C_Sum10 _ a -> a
      end
end
module Generated_Foo_Type
  use prelude.UIntSize
  use prelude.Int
  use Generated_Sum10_Type as Sum10'0
  use prelude.Borrow
  type t_foo 't =
    | C_A (borrowed (Sum10'0.t_sum10)) usize
    | C_B 't
    
  function any_l (_ : 'b) : 'a
  let rec a < 't > (input:t_foo 't) (ret  (f1:borrowed (Sum10'0.t_sum10)) (f2:usize))= any
    [ good (f1:borrowed (Sum10'0.t_sum10)) (f2:usize)-> {C_A f1 f2 = input} (! ret {f1} {f2})
    | bad (f1:borrowed (Sum10'0.t_sum10)) (f2:usize)-> {C_A f1 f2 <> input} {false} any ]
    
  let rec b < 't > (input:t_foo 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_B field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_B field_0 <> input} {false} any ]
    
end
module Generated_UseFoo
  let%span sgenerated0 = "../generated.rs" 20 18 20 35
  let%span sgenerated1 = "../generated.rs" 19 62 21 1
  let%span sgenerated2 = "../generated.rs" 19 19 19 20
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  let%span span4 = "../generated.rs" 10 20 10 43
  use prelude.UInt32
  predicate invariant'5 (self : uint32) =
    [%#span3] true
  let rec invariant'5 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : uint32)
  let rec inv'5 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : uint32 . inv'5 x = true
  use Generated_Sum10_Type as Sum10'0
  use prelude.Borrow
  use Generated_Foo_Type as Foo'1
  predicate invariant'4 (self : Foo'1.t_foo uint32) =
    [%#span3] true
  let rec invariant'4 (self:Foo'1.t_foo uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'1 (_x : borrowed (Sum10'0.t_sum10))
  let rec inv'1 (_x:borrowed (Sum10'0.t_sum10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  predicate inv'4 (_x : Foo'1.t_foo uint32)
  let rec inv'4 (_x:Foo'1.t_foo uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : Foo'1.t_foo uint32 . inv'4 x
  = match x with
    | Foo'1.C_A f1 f2 -> inv'1 f1
    | Foo'1.C_B a_0 -> true
    end
  use prelude.Int
  use Generated_Sum10_Type as Generated_Sum10_Type
  use prelude.Int32
  predicate invariant'3 [#"../generated.rs" 9 4 9 30] (self : Sum10'0.t_sum10) =
    [%#span4] Int32.to_int (Generated_Sum10_Type.sum10_0 self) + Int32.to_int (Generated_Sum10_Type.sum10_1 self) = 10
  let rec invariant'3 (self:Sum10'0.t_sum10) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Sum10'0.t_sum10)
  let rec inv'3 (_x:Sum10'0.t_sum10) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Sum10'0.t_sum10 . inv'3 x
  = (invariant'3 x
  /\ match x with
    | Sum10'0.C_Sum10 a_0 a_1 -> true
    end)
  predicate invariant'2 (self : (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10))) =
    [%#span3] true
  let rec invariant'2 (self:(Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10)))
  let rec inv'2 (_x:(Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10)) . inv'2 x
  = (let (a, b) = x in inv'4 a /\ inv'1 b)
  predicate invariant'1 (self : borrowed (Sum10'0.t_sum10)) =
    [%#span3] true
  let rec invariant'1 (self:borrowed (Sum10'0.t_sum10)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  axiom inv'1 : forall x : borrowed (Sum10'0.t_sum10) . inv'1 x = (inv'3 ( * x) /\ inv'3 ( ^ x))
  use Generated_Foo_Type as Foo'0
  predicate invariant'0 (self : Foo'0.t_foo (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10))) =
    [%#span3] true
  let rec invariant'0 (self:Foo'0.t_foo (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Foo'0.t_foo (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10)))
  let rec inv'0 (_x:Foo'0.t_foo (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10))) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Foo'0.t_foo (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10)) . inv'0 x
  = match x with
    | Foo'0.C_A f1 f2 -> inv'1 f1
    | Foo'0.C_B a_0 -> inv'2 a_0
    end
  use prelude.Intrinsic
  let rec use_foo (x:Foo'0.t_foo (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10))) (return'  (ret:()))= {[%#sgenerated2] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#sgenerated0] inv'0 x} s1
      | s1 =  [ &_0 <- [%#sgenerated1] () ] s2
      | s2 = return' {_0} ]
       ]
    ) [ & _0 : () = any_l () : () | & x : Foo'0.t_foo (Foo'1.t_foo uint32, borrowed (Sum10'0.t_sum10)) = x ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module Generated_Impl0
  
end
