
module TypeInvariants_WithInvariant_Type
  type t_withinvariant  =
    | C_WithInvariant
    
end
module TypeInvariants_Impl0_Invariant_Stub
  use TypeInvariants_WithInvariant_Type as TypeInvariants_WithInvariant_Type
  predicate invariant' [#"../type_invariants.rs" 11 4 11 30] (self : TypeInvariants_WithInvariant_Type.t_withinvariant)
end
module TypeInvariants_Impl0_Invariant_Interface
  use TypeInvariants_WithInvariant_Type as TypeInvariants_WithInvariant_Type
  predicate invariant' [#"../type_invariants.rs" 11 4 11 30] (self : TypeInvariants_WithInvariant_Type.t_withinvariant)
  val invariant' [#"../type_invariants.rs" 11 4 11 30] (self : TypeInvariants_WithInvariant_Type.t_withinvariant) : bool
    ensures { result = invariant' self }
    
end
module TypeInvariants_Impl0_Invariant
  use TypeInvariants_WithInvariant_Type as TypeInvariants_WithInvariant_Type
  predicate invariant' [#"../type_invariants.rs" 11 4 11 30] (self : TypeInvariants_WithInvariant_Type.t_withinvariant)
   =
    [#"../type_invariants.rs" 12 8 12 12] true
  val invariant' [#"../type_invariants.rs" 11 4 11 30] (self : TypeInvariants_WithInvariant_Type.t_withinvariant) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 40 4 40 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module TypeInvariants_WithInvariant_Type_Inv
  use TypeInvariants_WithInvariant_Type as TypeInvariants_WithInvariant_Type
  clone TypeInvariants_Impl0_Invariant_Stub as Invariant0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = TypeInvariants_WithInvariant_Type.t_withinvariant
  axiom inv_t_withinvariant [@rewrite] : forall self : TypeInvariants_WithInvariant_Type.t_withinvariant . Inv0.inv self = Invariant0.invariant' self
end
module TypeInvariants_Id_Interface
  use TypeInvariants_WithInvariant_Type as TypeInvariants_WithInvariant_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = TypeInvariants_WithInvariant_Type.t_withinvariant
  val id [#"../type_invariants.rs" 16 0 16 44] (x : TypeInvariants_WithInvariant_Type.t_withinvariant) : TypeInvariants_WithInvariant_Type.t_withinvariant
    requires {[#"../type_invariants.rs" 16 10 16 11] Inv0.inv x}
    ensures { [#"../type_invariants.rs" 16 31 16 44] Inv0.inv result }
    
end
module TypeInvariants_Id
  use TypeInvariants_WithInvariant_Type as TypeInvariants_WithInvariant_Type
  clone TypeInvariants_Impl0_Invariant as Invariant0
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = TypeInvariants_WithInvariant_Type.t_withinvariant
  clone TypeInvariants_WithInvariant_Type_Inv as TypeInvariants_WithInvariant_Type_Inv0 with
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  let rec cfg id [#"../type_invariants.rs" 16 0 16 44] [@cfg:stackify] [@cfg:subregion_analysis] (x : TypeInvariants_WithInvariant_Type.t_withinvariant) : TypeInvariants_WithInvariant_Type.t_withinvariant
    requires {[#"../type_invariants.rs" 16 10 16 11] Inv0.inv x}
    ensures { [#"../type_invariants.rs" 16 31 16 44] Inv0.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : TypeInvariants_WithInvariant_Type.t_withinvariant;
  var x : TypeInvariants_WithInvariant_Type.t_withinvariant = x;
  {
    goto BB0
  }
  BB0 {
    _0 <- x;
    x <- any TypeInvariants_WithInvariant_Type.t_withinvariant;
    return _0
  }
  
end
module TypeInvariants_Impl0
  
end
