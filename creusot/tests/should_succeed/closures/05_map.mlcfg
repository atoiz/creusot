
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 40 4 40 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C05Map_Map_Type
  type t_map 'i 'f =
    | C_Map 'i 'f
    
  let function map_iter (self : t_map 'i 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ -> a
      end
  let function map_func (self : t_map 'i 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C05Map_FakeIterator_Item_Type
  type self
  type item
end
module C05Map_FakeIterator_Next_Interface
  type self
  use prelude.Borrow
  clone C05Map_FakeIterator_Item_Type as Item0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option Item0.item
  val next [#"../05_map.rs" 6 4 6 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    ensures { [#"../05_map.rs" 6 26 6 44] Inv0.inv result }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Stub
  type args
  type f
  predicate precondition (self : f) (_2 : args)
end
module CreusotContracts_Std1_Ops_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2 : args)
  val precondition (self : f) (_2 : args) : bool
    ensures { result = precondition self _2 }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
  val postcondition (self : self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_FnExt_Postcondition
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  predicate postcondition (self : self) (_2 : args) (_3 : Output0.output)
  val postcondition (self : self) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = self,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Ops_FnExt_Postcondition_Stub as Postcondition0 with
    type self = self,
    type args = args,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Stub as Precondition0 with
    type args = args,
    type f = self
  val call (self : self) (args : args) : Output0.output
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 166 27 166 52] Precondition0.precondition self args}
    requires {Inv0.inv self}
    requires {Inv1.inv args}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1] Postcondition0.postcondition self args result }
    ensures { Inv2.inv result }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = borrowed t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv ( * self))
end
module C05Map_Map_Type_Inv
  type i
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = f
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C05Map_Map_Type.t_map i f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C05Map_Map_Type.t_map i f
  axiom inv_t_map [@rewrite] : forall self : C05Map_Map_Type.t_map i f . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (C05Map_Map_Type.map_iter self) /\ Inv2.inv (C05Map_Map_Type.map_func self))
end
module Core_Option_Option_Type_Inv
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  axiom inv_t_option [@rewrite] : forall self : Core_Option_Option_Type.t_option t . Inv0.inv self = (Invariant0.invariant' self /\ match (self) with
    | Core_Option_Option_Type.C_None -> true
    | Core_Option_Option_Type.C_Some a_0 -> Inv1.inv (Core_Option_Option_Type.some_0 self)
    end)
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module TyInv_Tuple1
  type t0
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t0
  axiom inv_tuple1 [@rewrite] : forall self : t0 . Inv0.inv self = (let (a_0) = self in Inv1.inv a_0)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl2_Postcondition
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output)
  val postcondition_mut (self : borrowed f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_mut self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv3.inv ( ^ self) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv3.inv ( ^ self)) && ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res))
end
module CreusotContracts_Std1_Ops_Impl2_FnMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  function fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
  val fn_mut (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res) }
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv3.inv ( ^ self) }
    ensures { result = fn_mut self args res }
    
  axiom fn_mut_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 25 139 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 37 139 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 139 19 139 23] Inv3.inv ( ^ self)) && ([#"../../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100] PostconditionMut0.postcondition_mut self args res = (Resolve0.resolve self /\ Postcondition0.postcondition ( * self) args res))
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  predicate postcondition_once (self : f) (_2 : args) (_3 : Output0.output)
  val postcondition_once (self : f) (_2 : args) (_3 : Output0.output) : bool
    ensures { result = postcondition_once self _2 _3 }
    
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Stub
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res))
end
module CreusotContracts_Std1_Ops_Impl2_FnOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Stub as Postcondition0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res) }
    ensures { result = fn_once self args res }
    
  axiom fn_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 15 145 19] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 21 145 25] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 145 33 145 36] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101] PostconditionOnce0.postcondition_once self args res = (Resolve0.resolve self /\ Postcondition0.postcondition self args res))
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv3.inv ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv3.inv ( ^ self)) && ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  function postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 101 4 101 10] ()
  val postcondition_mut_unnest (self : borrowed f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self) }
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv3.inv ( ^ self) }
    ensures { result = postcondition_mut_unnest self args res }
    
  axiom postcondition_mut_unnest_spec : forall self : borrowed f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48] PostconditionMut0.postcondition_mut self args res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41] Inv3.inv ( ^ self)) && ([#"../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35] Unnest0.unnest ( * self) ( ^ self))
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Stub
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestRefl
  type args
  type f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function unnest_refl (self : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 107 4 107 10] ()
  val unnest_refl (self : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self }
    ensures { result = unnest_refl self }
    
  axiom unnest_refl_spec : forall self : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31] Unnest0.unnest self self)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Stub
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_UnnestTrans
  type args
  type f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Stub as Unnest0 with
    type args = args,
    type f = f
  function unnest_trans (self : f) (b : f) (c : f) : () =
    [#"../../../../../creusot-contracts/src/std/ops.rs" 112 4 112 10] ()
  val unnest_trans (self : f) (b : f) (c : f) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c }
    ensures { result = unnest_trans self b c }
    
  axiom unnest_trans_spec : forall self : f, b : f, c : f . ([#"../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29] Unnest0.unnest self b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26] Unnest0.unnest b c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27] Inv0.inv b) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36] Inv0.inv c) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28] Unnest0.unnest self c)
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Stub
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module CreusotContracts_Std1_Ops_Impl1_FnMutOnce
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with
    type self = f,
    type args = args
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Stub as PostconditionMut0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed f
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Stub as PostconditionOnce0 with
    type args = args,
    type f = f,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = args
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = f
  function fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
  val fn_mut_once (self : f) (args : args) (res : Output0.output) : ()
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args}
    requires {[#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res}
    ensures { [#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)) }
    ensures { result = fn_mut_once self args res }
    
  axiom fn_mut_once_spec : forall self : f, args : args, res : Output0.output . ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23] Inv0.inv self) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29] Inv1.inv args) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40] Inv2.inv res) -> ([#"../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135] PostconditionOnce0.postcondition_once self args res = (exists s : borrowed f . Inv3.inv s /\  * s = self /\ PostconditionMut0.postcondition_mut s args res /\ Resolve0.resolve ( ^ s)))
end
module C05Map_Impl0_Next_Interface
  type a
  type b
  type f
  type i
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Core_Option_Option_Type.t_option b
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C05Map_Map_Type.t_map i f
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C05Map_Map_Type.t_map i f)
  val next [#"../05_map.rs" 17 4 17 44] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 17 17 17 21] Inv0.inv self}
    ensures { [#"../05_map.rs" 17 17 17 21] Inv1.inv ( ^ self) }
    ensures { [#"../05_map.rs" 17 26 17 44] Inv2.inv result }
    
end
module C05Map_Impl0_Next
  type a
  type b
  type f
  type i
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant4 with
    type self = borrowed f
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = borrowed f
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited4 with
    type self = borrowed f,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_Unnest_Interface as Unnest0 with
    type args = a,
    type f = f
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = f
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMut_Interface as PostconditionMut0 with
    type args = a,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with
    type args = a,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl1_FnMutOnce_Interface as FnMutOnce0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv8.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Inv3.inv = Inv12.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve3.resolve,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestTrans_Interface as UnnestTrans0 with
    type args = a,
    type f = f,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_UnnestRefl_Interface as UnnestRefl0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv8.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl1_PostconditionMutUnnest_Interface as PostconditionMutUnnest0 with
    type args = a,
    type f = f,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Inv0.inv = Inv12.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate Unnest0.unnest = Unnest0.unnest,
    predicate Inv3.inv = Inv8.inv,
    type Output0.output = b,
    axiom .
  clone TyInv_Borrow as TyInv_Borrow1 with
    type t = f,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant3 with
    type self = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited3 with
    type self = Core_Option_Option_Type.t_option a,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = Core_Option_Option_Type.t_option b
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option b
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited2 with
    type self = Core_Option_Option_Type.t_option b,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = C05Map_Map_Type.t_map i f
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C05Map_Map_Type.t_map i f
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = C05Map_Map_Type.t_map i f,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = borrowed (C05Map_Map_Type.t_map i f)
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (C05Map_Map_Type.t_map i f)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = borrowed (C05Map_Map_Type.t_map i f),
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = a
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = b
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = i
  clone CreusotContracts_Std1_Ops_Impl2_Postcondition_Interface as Postcondition0 with
    type args = a,
    type f = f,
    type Output0.output = b
  clone CreusotContracts_Std1_Ops_Impl2_FnOnce_Interface as FnOnce0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv8.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    type Output0.output = b,
    axiom .
  clone CreusotContracts_Std1_Ops_Impl2_FnMut_Interface as FnMut0 with
    type args = a,
    type f = f,
    predicate Inv0.inv = Inv12.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv6.inv,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    predicate Inv3.inv = Inv8.inv,
    type Output0.output = b,
    axiom .
  clone TyInv_Tuple1 as TyInv_Tuple10 with
    type t0 = a,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv11.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = f,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone Core_Option_Option_Type_Inv as Core_Option_Option_Type_Inv1 with
    type t = a,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv11.inv,
    axiom .
  clone Core_Option_Option_Type_Inv as Core_Option_Option_Type_Inv0 with
    type t = b,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv9.inv,
    axiom .
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type f = f,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    axiom .
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C05Map_Map_Type.t_map i f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = f
  clone CreusotContracts_Std1_Ops_Impl0_Precondition_Interface as Precondition0 with
    type args = a,
    type f = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option a
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with
    type self = f,
    type args = a,
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv5.inv,
    predicate Postcondition0.postcondition = Postcondition0.postcondition,
    predicate Inv2.inv = Inv6.inv,
    type Output0.output = b
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option a
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C05Map_Map_Type.t_map i f
  clone C05Map_FakeIterator_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv3.inv,
    type Item0.item = a
  let rec cfg next [#"../05_map.rs" 17 4 17 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C05Map_Map_Type.t_map i f)) : Core_Option_Option_Type.t_option b
    requires {[#"../05_map.rs" 17 17 17 21] Inv0.inv self}
    ensures { [#"../05_map.rs" 17 17 17 21] Inv1.inv ( ^ self) }
    ensures { [#"../05_map.rs" 17 26 17 44] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self : borrowed (C05Map_Map_Type.t_map i f) = self;
  var _2 : Core_Option_Option_Type.t_option a;
  var _3 : borrowed i;
  var e : a;
  {
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (C05Map_Map_Type.map_iter ( * self));
    self <- { self with current = (let C05Map_Map_Type.C_Map a b =  * self in C05Map_Map_Type.C_Map ( ^ _3) b) };
    _2 <- ([#"../05_map.rs" 18 14 18 30] Next0.next _3);
    _3 <- any borrowed i;
    goto BB1
  }
  BB1 {
    switch (_2)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    goto BB5
  }
  BB3 {
    e <- Core_Option_Option_Type.some_0 _2;
    _2 <- (let Core_Option_Option_Type.C_Some a = _2 in Core_Option_Option_Type.C_Some (any a));
    assume { Resolve1.resolve _2 };
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve self };
    assume { Resolve1.resolve _2 };
    absurd
  }
  BB5 {
    assume { Resolve0.resolve self };
    assume { Resolve1.resolve _2 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB10
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve self };
    _0 <- Core_Option_Option_Type.C_Some ([#"../05_map.rs" 20 28 20 42] Call0.call (C05Map_Map_Type.map_func ( * self)) (e));
    e <- any a;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module C05Map_Impl0
  type a
  type b
  type f
  type i
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = f
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = i
  use C05Map_Map_Type as C05Map_Map_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = C05Map_Map_Type.t_map i f
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = b
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = Core_Option_Option_Type.t_option b
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = borrowed (C05Map_Map_Type.t_map i f)
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = C05Map_Map_Type.t_map i f
  clone C05Map_Map_Type_Inv as C05Map_Map_Type_Inv0 with
    type i = i,
    type f = f,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv5.inv,
    predicate Inv2.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option b
  clone Core_Option_Option_Type_Inv as Core_Option_Option_Type_Inv0 with
    type t = b,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (C05Map_Map_Type.t_map i f)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C05Map_Map_Type.t_map i f,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option b
  goal next_refn : [#"../05_map.rs" 17 4 17 44] forall self : borrowed (C05Map_Map_Type.t_map i f) . Inv0.inv self /\ (forall result : Core_Option_Option_Type.t_option b . Inv1.inv result /\ Inv2.inv ( ^ self) -> Inv3.inv result)
end
