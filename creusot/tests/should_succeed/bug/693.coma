
module C693_F
  type ifc
  predicate invariant'0 (self : ifc)
  let rec invariant'0 (self:ifc) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : ifc)
  let rec inv'0 (_x:ifc) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : ifc . inv'0 x = true
  use prelude.Intrinsic
  let rec f (_1:ifc) (return'  (ret:()))= {inv'0 _1}
    (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module C693_G
  let%span s6930 = "../693.rs" 6 6 6 7
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  use prelude.Int32
  predicate invariant'0 (self : int32) =
    [%#span1] true
  let rec invariant'0 (self:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : int32)
  let rec inv'0 (_x:int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : int32 . inv'0 x = true
  use prelude.Intrinsic
  let rec f'0 (_1:int32) (return'  (ret:()))= {[@expl:precondition] inv'0 _1}
    any [ return' (result:())-> (! return' {result}) ] 
  use prelude.Int
  let rec g (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = f'0 {[%#s6930] (0 : int32)} (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
