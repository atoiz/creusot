
module EqPanic_Omg
  type t
  let%span seq_panic0 = "../eq_panic.rs" 6 30 6 31
  let%span seq_panic1 = "../eq_panic.rs" 6 37 6 38
  let%span span2 = "../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  let%span span3 = "" 0 0 0 0
  let%span span4 = "" 0 0 0 0
  let%span span5 = "../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  predicate invariant'1 (self : t)
  let rec invariant'1 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : t)
  let rec inv'1 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ] 
  axiom inv'1 : forall x : t . inv'1 x = true
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'0 (self : t)
  let rec resolve'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  type deep_model_ty'0
  function deep_model'2 (self : t) : deep_model_ty'0
  let rec deep_model'2 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'2 self} (! return' {result}) ]
    
  function deep_model'1 (self : t) : deep_model_ty'0 =
    [%#span2] deep_model'2 self
  let rec deep_model'1 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'1 self} (! return' {result}) ]
    
  function deep_model'0 (self : t) : deep_model_ty'0 =
    [%#span2] deep_model'1 self
  let rec deep_model'0 (self:t) (return'  (ret:deep_model_ty'0))= any
    [ return' (result:deep_model_ty'0)-> {result = deep_model'0 self} (! return' {result}) ]
    
  let rec eq'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span4] inv'1 other}
    {[@expl:precondition] [%#span3] inv'1 self}
    any [ return' (result:bool)-> {[%#span5] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ] 
  let rec omg (x:t) (y:t) (return'  (ret:bool))= {[%#seq_panic1] inv'0 y}
    {[%#seq_panic0] inv'0 x}
    (! bb0
    [ bb0 = s0 [ s0 = eq'0 {x} {y} (fun (_ret':bool) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 y} s1
      | s1 = -{resolve'0 y}- s2
      | s2 = {[@expl:type invariant] inv'0 x} s3
      | s3 = -{resolve'0 x}- s4
      | s4 = return' {_0} ]
       ]
    ) [ & _0 : bool = any_l () : bool | & x : t = x | & y : t = y ]  [ return' (result:bool)-> (! return' {result}) ] 
end
