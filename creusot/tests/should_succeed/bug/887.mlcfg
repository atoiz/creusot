
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Stub
  type args
  type f
  predicate unnest (self : f) (_2 : f)
end
module CreusotContracts_Std1_Ops_Impl1_Unnest_Interface
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module CreusotContracts_Std1_Ops_Impl1_Unnest
  type args
  type f
  predicate unnest (self : f) (_2 : f)
  val unnest (self : f) (_2 : f) : bool
    ensures { result = unnest self _2 }
    
end
module C887_Main_Closure1_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  type c887_main_closure1  =
    | Closure (borrowed uint32)
    
end
module C887_Main_Closure1_Interface
  use export C887_Main_Closure1_Type
  use prelude.Borrow
  use prelude.UInt32
  use prelude.Int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = uint32
  use C887_Main_Closure1_Type as C887_Main_Closure1_Type
  let function field_0 [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) : borrowed uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../887.rs" 1 0 1 0] let Closure a = self in a
  predicate resolve [#"../887.rs" 7 4 7 29] (_1 : C887_Main_Closure1_Type.c887_main_closure1) =
    [#"../887.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) (_2 : C887_Main_Closure1_Type.c887_main_closure1)
    
   =
    [#"../887.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) (_ : ()) =
    [#"../887.rs" 6 27 6 36] UInt32.to_int ( * field_0 self) <= 100
  predicate postcondition_once [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 7 14 7 27] UInt32.to_int ( ^ field_0 self) = UInt32.to_int ( * field_0 self) + 1
  predicate postcondition_mut [#"../887.rs" 7 4 7 29] (self : borrowed C887_Main_Closure1_Type.c887_main_closure1) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 1 0 1 0] UInt32.to_int ( * field_0 ( ^ self)) = UInt32.to_int ( * field_0 ( * self)) + 1 /\ unnest ( * self) ( ^ self)
  val closure [#"../887.rs" 7 4 7 29] (_1 : borrowed C887_Main_Closure1_Type.c887_main_closure1) : ()
    requires {[#"../887.rs" 6 27 6 36] UInt32.to_int ( * field_0 ( * _1)) <= 100}
    ensures { [#"../887.rs" 7 14 7 27] UInt32.to_int ( * field_0 ( ^ _1)) = UInt32.to_int ( * field_0 ( * _1)) + 1 }
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C887_Main_Closure1
  use export C887_Main_Closure1_Type
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint32
  use C887_Main_Closure1_Type as C887_Main_Closure1_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C887_Main_Closure1_Type.c887_main_closure1
  let function field_0 [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) : borrowed uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../887.rs" 1 0 1 0] let Closure a = self in a
  predicate resolve [#"../887.rs" 7 4 7 29] (_1 : C887_Main_Closure1_Type.c887_main_closure1) =
    [#"../887.rs" 1 0 1 0] Resolve1.resolve (field_0 _1)
  predicate unnest [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) (_2 : C887_Main_Closure1_Type.c887_main_closure1)
    
   =
    [#"../887.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) (_ : ()) =
    [#"../887.rs" 6 27 6 36] UInt32.to_int ( * field_0 self) <= 100
  predicate postcondition_once [#"../887.rs" 7 4 7 29] (self : C887_Main_Closure1_Type.c887_main_closure1) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 7 14 7 27] UInt32.to_int ( ^ field_0 self) = UInt32.to_int ( * field_0 self) + 1
  predicate postcondition_mut [#"../887.rs" 7 4 7 29] (self : borrowed C887_Main_Closure1_Type.c887_main_closure1) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 1 0 1 0] UInt32.to_int ( * field_0 ( ^ self)) = UInt32.to_int ( * field_0 ( * self)) + 1 /\ unnest ( * self) ( ^ self)
  let rec cfg closure [#"../887.rs" 7 4 7 29] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C887_Main_Closure1_Type.c887_main_closure1) : ()
    requires {[#"../887.rs" 6 27 6 36] UInt32.to_int ( * field_0 ( * _1)) <= 100}
    ensures { [#"../887.rs" 7 14 7 27] UInt32.to_int ( * field_0 ( ^ _1)) = UInt32.to_int ( * field_0 ( * _1)) + 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed C887_Main_Closure1_Type.c887_main_closure1 = _1;
  var res : ();
  var res1 : ();
  {
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let Closure a =  * _1 in Closure ({ (field_0 ( * _1)) with current = ([#"../887.rs" 9 8 9 14]  * field_0 ( * _1) + ([#"../887.rs" 9 13 9 14] (1 : uint32))) })) };
    assume { Resolve0.resolve _1 };
    res1 <- ();
    res <- res1;
    _0 <- res;
    return _0
  }
  
end
module C887_Main_Closure0_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  use C887_Main_Closure1_Type as C887_Main_Closure1_Type
  type c887_main_closure0  =
    | Closure (borrowed C887_Main_Closure1_Type.c887_main_closure1)
    
end
module C887_Main_Closure0_Interface
  use export C887_Main_Closure0_Type
  use prelude.Borrow
  use C887_Main_Closure1_Type as C887_Main_Closure1_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C887_Main_Closure1_Type.c887_main_closure1
  use C887_Main_Closure0_Type as C887_Main_Closure0_Type
  let function field_0 [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) : borrowed C887_Main_Closure1_Type.c887_main_closure1
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../887.rs" 1 0 1 0] let Closure a = self in a
  predicate resolve [#"../887.rs" 11 16 11 18] (_1 : C887_Main_Closure0_Type.c887_main_closure0) =
    [#"../887.rs" 1 0 1 0] Resolve0.resolve (field_0 _1)
  predicate unnest [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) (_2 : C887_Main_Closure0_Type.c887_main_closure0)
    
   =
    [#"../887.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) (_ : ()) =
    [#"../887.rs" 1 0 1 0] true
  predicate postcondition_once [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 1 0 1 0] true
  predicate postcondition_mut [#"../887.rs" 11 16 11 18] (self : borrowed C887_Main_Closure0_Type.c887_main_closure0) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  val closure [#"../887.rs" 11 16 11 18] (_1 : borrowed C887_Main_Closure0_Type.c887_main_closure0) : ()
    ensures { unnest ( * _1) ( ^ _1) }
    
end
module C887_Main_Closure0
  use export C887_Main_Closure0_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = uint32
  use C887_Main_Closure1_Type as C887_Main_Closure1_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = C887_Main_Closure1_Type.c887_main_closure1
  use C887_Main_Closure0_Type as C887_Main_Closure0_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C887_Main_Closure0_Type.c887_main_closure0
  clone C887_Main_Closure1_Interface as Closure10 with
    predicate Resolve0.resolve = Resolve2.resolve
  let function field_0 [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) : borrowed C887_Main_Closure1_Type.c887_main_closure1
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../887.rs" 1 0 1 0] let Closure a = self in a
  predicate resolve [#"../887.rs" 11 16 11 18] (_1 : C887_Main_Closure0_Type.c887_main_closure0) =
    [#"../887.rs" 1 0 1 0] Resolve1.resolve (field_0 _1)
  predicate unnest [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) (_2 : C887_Main_Closure0_Type.c887_main_closure0)
    
   =
    [#"../887.rs" 1 0 1 0]  ^ field_0 _2 =  ^ field_0 self
  predicate precondition [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) (_ : ()) =
    [#"../887.rs" 1 0 1 0] true
  predicate postcondition_once [#"../887.rs" 11 16 11 18] (self : C887_Main_Closure0_Type.c887_main_closure0) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 1 0 1 0] true
  predicate postcondition_mut [#"../887.rs" 11 16 11 18] (self : borrowed C887_Main_Closure0_Type.c887_main_closure0) (_ : ()) (result : ())
    
   =
    [#"../887.rs" 1 0 1 0] unnest ( * self) ( ^ self)
  let rec cfg closure [#"../887.rs" 11 16 11 18] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : borrowed C887_Main_Closure0_Type.c887_main_closure0) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : borrowed C887_Main_Closure0_Type.c887_main_closure0 = _1;
  var _2 : ();
  var _3 : borrowed C887_Main_Closure1_Type.c887_main_closure1;
  {
    goto BB0
  }
  BB0 {
    _3 <- Borrow.borrow_mut ( * field_0 ( * _1));
    _1 <- { _1 with current = (let Closure a =  * _1 in Closure ({ (field_0 ( * _1)) with current = ( ^ _3) })) };
    _2 <- ([#"../887.rs" 12 8 12 11] let () = () in Closure10.closure _3);
    _3 <- any borrowed C887_Main_Closure1_Type.c887_main_closure1;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _1 };
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 36 8 36 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module C887_Main_Interface
  val main [#"../887.rs" 4 0 4 13] (_1 : ()) : ()
end
module C887_Main
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  use C887_Main_Closure1_Type as C887_Main_Closure1_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = C887_Main_Closure1_Type.c887_main_closure1
  use C887_Main_Closure0_Type as C887_Main_Closure0_Type
  clone C887_Main_Closure0_Interface as Closure00 with
    predicate Resolve0.resolve = Resolve1.resolve
  clone C887_Main_Closure1_Interface as Closure10 with
    predicate Resolve0.resolve = Resolve0.resolve
  let rec cfg main [#"../887.rs" 4 0 4 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : uint32;
  var f : C887_Main_Closure1_Type.c887_main_closure1;
  var _3 : borrowed uint32;
  var g : C887_Main_Closure0_Type.c887_main_closure0;
  var _5 : borrowed C887_Main_Closure1_Type.c887_main_closure1;
  var _6 : ();
  var _7 : borrowed C887_Main_Closure0_Type.c887_main_closure0;
  {
    goto BB0
  }
  BB0 {
    x <- ([#"../887.rs" 5 16 5 20] (0 : uint32));
    _3 <- Borrow.borrow_mut x;
    x <-  ^ _3;
    f <- Closure10.Closure _3;
    _3 <- any borrowed uint32;
    _5 <- Borrow.borrow_mut f;
    f <-  ^ _5;
    g <- Closure00.Closure _5;
    _5 <- any borrowed C887_Main_Closure1_Type.c887_main_closure1;
    _7 <- Borrow.borrow_mut g;
    g <-  ^ _7;
    _6 <- ([#"../887.rs" 14 4 14 7] let () = () in Closure00.closure _7);
    _7 <- any borrowed C887_Main_Closure0_Type.c887_main_closure0;
    goto BB1
  }
  BB1 {
    assume { Closure00.resolve g };
    assume { Closure10.resolve f };
    _0 <- ();
    return _0
  }
  
end
