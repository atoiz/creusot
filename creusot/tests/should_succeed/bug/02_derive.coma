
module C02Derive_Lit_Type
  type t_lit  =
    | C_Lit
    
  function any_l (_ : 'b) : 'a
  let rec t_lit (input:t_lit) (ret  )= any [ good -> {C_Lit  = input} (! ret) | bad -> {C_Lit  <> input} {false} any ] 
end
module C02Derive_Impl0_Clone
  use prelude.Borrow
  use prelude.Intrinsic
  use C02Derive_Lit_Type as Lit'0
  let rec clone' (self:Lit'0.t_lit) (return'  (ret:Lit'0.t_lit))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- Lit'0.C_Lit ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : Lit'0.t_lit = any_l () : Lit'0.t_lit ]  [ return' (result:Lit'0.t_lit)-> (! return' {result}) ] 
end
module C02Derive_Impl0
  let%span s02_derive0 = "../02_derive.rs" 3 9 3 14
  let%span span1 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  use C02Derive_Lit_Type as Lit'0
  predicate invariant'1 (self : Lit'0.t_lit) =
    [%#span1] true
  let rec invariant'1 (self:Lit'0.t_lit) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : Lit'0.t_lit)
  let rec inv'1 (_x:Lit'0.t_lit) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : Lit'0.t_lit . inv'1 x = true
  predicate invariant'0 (self : Lit'0.t_lit) =
    [%#span1] true
  let rec invariant'0 (self:Lit'0.t_lit) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : Lit'0.t_lit)
  let rec inv'0 (_x:Lit'0.t_lit) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : Lit'0.t_lit . inv'0 x = true
  use prelude.Borrow
  goal clone'_refn : [%#s02_derive0] forall self : Lit'0.t_lit . inv'0 self
   -> (forall result : Lit'0.t_lit . inv'1 result /\ result = self)
end
