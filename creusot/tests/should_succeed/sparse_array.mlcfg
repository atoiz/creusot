
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 40 4 40 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
  let function unique_pointer (self : t_unique 't) : Core_Ptr_NonNull_NonNull_Type.t_nonnull 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Unique a _ -> a
      end
  let function unique__marker (self : t_unique 't) : Core_Marker_PhantomData_Type.t_phantomdata 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Unique _ a -> a
      end
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
  let function rawvec_ptr (self : t_rawvec 't 'a) : Core_Ptr_Unique_Unique_Type.t_unique 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_RawVec a _ _ -> a
      end
  let function rawvec_alloc (self : t_rawvec 't 'a) : 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_RawVec _ _ a -> a
      end
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
  let function vec_buf (self : t_vec 't 'a) : Alloc_RawVec_RawVec_Type.t_rawvec 't 'a = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Vec a _ -> a
      end
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module SparseArray_Sparse_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_sparse 't =
    | C_Sparse usize usize (Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let function sparse_size (self : t_sparse 't) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse a _ _ _ _ -> a
      end
  let function sparse_idx (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ _ _ a _ -> a
      end
  let function sparse_n (self : t_sparse 't) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ a _ _ _ -> a
      end
  let function sparse_back (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ _ _ _ a -> a
      end
  let function sparse_values (self : t_sparse 't) : Alloc_Vec_Vec_Type.t_vec 't (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Sparse _ _ a _ _ -> a
      end
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 17 8 17 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module SparseArray_Impl1_IsElt_Stub
  type t
  use prelude.Borrow
  use prelude.Int
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  predicate is_elt [#"../sparse_array.rs" 56 4 56 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int)
end
module SparseArray_Impl1_IsElt_Interface
  type t
  use prelude.Borrow
  use prelude.Int
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  predicate is_elt [#"../sparse_array.rs" 56 4 56 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int)
  val is_elt [#"../sparse_array.rs" 56 4 56 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : bool
    ensures { result = is_elt self i }
    
end
module SparseArray_Impl1_IsElt
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  predicate is_elt [#"../sparse_array.rs" 56 4 56 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) =
    [#"../sparse_array.rs" 57 20 59 52] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) /\ UIntSize.to_int (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_idx self) i) < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self) /\ UIntSize.to_int (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_back self) (UIntSize.to_int (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_idx self) i))) = i
  val is_elt [#"../sparse_array.rs" 56 4 56 36] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : bool
    ensures { result = is_elt self i }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module SparseArray_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  function shallow_model [#"../sparse_array.rs" 42 4 42 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
end
module SparseArray_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  function shallow_model [#"../sparse_array.rs" 42 4 42 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
  val shallow_model [#"../sparse_array.rs" 42 4 42 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    requires {[#"../sparse_array.rs" 42 21 42 25] Inv0.inv self}
    ensures { [#"../sparse_array.rs" 38 14 38 40] Seq.length result = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) }
    ensures { [#"../sparse_array.rs" 39 4 41 6] forall i : int . Seq.get result i = (if IsElt0.is_elt self i then
      Core_Option_Option_Type.C_Some (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Core_Option_Option_Type.C_None
    ) }
    ensures { [#"../sparse_array.rs" 42 30 42 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : SparseArray_Sparse_Type.t_sparse t . ([#"../sparse_array.rs" 42 21 42 25] Inv0.inv self) -> ([#"../sparse_array.rs" 42 30 42 50] Inv1.inv (shallow_model self)) && ([#"../sparse_array.rs" 39 4 41 6] forall i : int . Seq.get (shallow_model self) i = (if IsElt0.is_elt self i then
    Core_Option_Option_Type.C_Some (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_values self) i)
  else
    Core_Option_Option_Type.C_None
  )) && ([#"../sparse_array.rs" 38 14 38 40] Seq.length (shallow_model self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self))
end
module SparseArray_Impl0_ShallowModel
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  function shallow_model [#"../sparse_array.rs" 42 4 42 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    
  val shallow_model [#"../sparse_array.rs" 42 4 42 50] (self : SparseArray_Sparse_Type.t_sparse t) : Seq.seq (Core_Option_Option_Type.t_option t)
    requires {[#"../sparse_array.rs" 42 21 42 25] Inv0.inv self}
    ensures { [#"../sparse_array.rs" 38 14 38 40] Seq.length result = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) }
    ensures { [#"../sparse_array.rs" 39 4 41 6] forall i : int . Seq.get result i = (if IsElt0.is_elt self i then
      Core_Option_Option_Type.C_Some (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_values self) i)
    else
      Core_Option_Option_Type.C_None
    ) }
    ensures { [#"../sparse_array.rs" 42 30 42 50] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : SparseArray_Sparse_Type.t_sparse t . ([#"../sparse_array.rs" 42 21 42 25] Inv0.inv self) -> ([#"../sparse_array.rs" 42 30 42 50] Inv1.inv (shallow_model self)) && ([#"../sparse_array.rs" 39 4 41 6] forall i : int . Seq.get (shallow_model self) i = (if IsElt0.is_elt self i then
    Core_Option_Option_Type.C_Some (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_values self) i)
  else
    Core_Option_Option_Type.C_None
  )) && ([#"../sparse_array.rs" 38 14 38 40] Seq.length (shallow_model self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self))
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 40 8 40 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length result <= UIntSize.to_int Max0.mAX' }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv result }
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . ([#"../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] Inv0.inv self) -> ([#"../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36] Inv1.inv (shallow_model self)) && ([#"../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX')
end
module SparseArray_Impl1_SparseInv_Stub
  type t
  use prelude.Borrow
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  predicate sparse_inv [#"../sparse_array.rs" 66 4 66 32] (self : SparseArray_Sparse_Type.t_sparse t)
end
module SparseArray_Impl1_SparseInv_Interface
  type t
  use prelude.Borrow
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  predicate sparse_inv [#"../sparse_array.rs" 66 4 66 32] (self : SparseArray_Sparse_Type.t_sparse t)
  val sparse_inv [#"../sparse_array.rs" 66 4 66 32] (self : SparseArray_Sparse_Type.t_sparse t) : bool
    ensures { result = sparse_inv self }
    
end
module SparseArray_Impl1_SparseInv
  type t
  use prelude.Borrow
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv0.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t)
  predicate sparse_inv [#"../sparse_array.rs" 66 4 66 32] (self : SparseArray_Sparse_Type.t_sparse t) =
    [#"../sparse_array.rs" 67 8 78 9] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self) <= UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) /\ Seq.length (ShallowModel0.shallow_model self) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) /\ Seq.length (ShallowModel1.shallow_model (SparseArray_Sparse_Type.sparse_values self)) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) /\ Seq.length (ShallowModel2.shallow_model (SparseArray_Sparse_Type.sparse_idx self)) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) /\ Seq.length (ShallowModel2.shallow_model (SparseArray_Sparse_Type.sparse_back self)) = UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_n self) -> match (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_back self) i) with
      | j -> 0 <= UIntSize.to_int j /\ UIntSize.to_int j < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self) /\ UIntSize.to_int (IndexLogic0.index_logic (SparseArray_Sparse_Type.sparse_idx self) (UIntSize.to_int j)) = i
      end)
  val sparse_inv [#"../sparse_array.rs" 66 4 66 32] (self : SparseArray_Sparse_Type.t_sparse t) : bool
    ensures { result = sparse_inv self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl13_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 131 27 131 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    requires {Inv1.inv index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 132 26 132 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    ensures { Inv2.inv result }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module SparseArray_Sparse_Type_Inv
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  axiom inv_t_sparse [@rewrite] : forall self : SparseArray_Sparse_Type.t_sparse t . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (SparseArray_Sparse_Type.sparse_values self))
end
module Core_Option_Option_Type_Inv
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  axiom inv_t_option [@rewrite] : forall self : Core_Option_Option_Type.t_option t . Inv0.inv self = (Invariant0.invariant' self /\ match (self) with
    | Core_Option_Option_Type.C_None -> true
    | Core_Option_Option_Type.C_Some a_0 -> Inv1.inv (Core_Option_Option_Type.some_0 self)
    end)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 109 20 109 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module Alloc_Vec_Vec_Type_Inv
  type t
  type a
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec t a
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  axiom inv_t_vec [@rewrite] : forall self : Alloc_Vec_Vec_Type.t_vec t a . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (Alloc_Vec_Vec_Type.vec_buf self))
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 116 20 116 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Logic_Seq_Seq_Type_Inv
  type t
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  axiom inv_t_seq [@rewrite] : forall self : Seq.seq t . Inv0.inv self = Invariant0.invariant' self
end
module CreusotContracts_Invariant_Impl0_Invariant_Stub
  type t
  predicate invariant' (self : t)
end
module CreusotContracts_Invariant_Impl0_Invariant_Interface
  type t
  predicate invariant' (self : t)
  val invariant' (self : t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl0_Invariant
  type t
  predicate invariant' (self : t) =
    [#"../../../../creusot-contracts/src/invariant.rs" 21 8 21 12] true
  val invariant' (self : t) : bool
    ensures { result = invariant' self }
    
end
module Alloc_RawVec_RawVec_Type_Inv
  type t
  type a
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = a
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t a
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec t a
  axiom inv_t_rawvec [@rewrite] : forall self : Alloc_RawVec_RawVec_Type.t_rawvec t a . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (Alloc_RawVec_RawVec_Type.rawvec_ptr self) /\ Inv2.inv (Alloc_RawVec_RawVec_Type.rawvec_alloc self))
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] is_inhabited _1) && ([#"../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] is_inhabited _1) && ([#"../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Impl0_IsInhabited_Stub
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool
end
module CreusotContracts_Invariant_Impl0_IsInhabited_Interface
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] is_inhabited _1) && ([#"../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Impl0_IsInhabited
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool =
    [#"../../../../creusot-contracts/src/invariant.rs" 32 8 32 12] true
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] is_inhabited _1) && ([#"../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x)
end
module Core_Ptr_Unique_Unique_Type_Inv
  type t
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata t
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique t
  axiom inv_t_unique [@rewrite] : forall self : Core_Ptr_Unique_Unique_Type.t_unique t . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (Core_Ptr_Unique_Unique_Type.unique_pointer self) /\ Inv2.inv (Core_Ptr_Unique_Unique_Type.unique__marker self))
end
module Alloc_Alloc_Global_Type_Inv
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Alloc_Alloc_Global_Type.t_global
  axiom inv_t_global : forall self : Alloc_Alloc_Global_Type.t_global . Inv0.inv self = true
end
module Core_Ptr_NonNull_NonNull_Type_Inv
  type t
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  axiom inv_t_nonnull [@rewrite] : forall self : Core_Ptr_NonNull_NonNull_Type.t_nonnull t . Inv0.inv self = Invariant0.invariant' self
end
module Core_Marker_PhantomData_Type_Inv
  type t
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata t
  axiom inv_t_phantomdata [@rewrite] : forall self : Core_Marker_PhantomData_Type.t_phantomdata t . Inv0.inv self = Invariant0.invariant' self
end
module SparseArray_Impl1_Get_Interface
  type t
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Core_Option_Option_Type.t_option t,
    type s = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t)
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with
    type t = t
  val get [#"../sparse_array.rs" 93 4 93 45] (self : SparseArray_Sparse_Type.t_sparse t) (i : usize) : Core_Option_Option_Type.t_option t
    requires {[#"../sparse_array.rs" 83 15 83 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 84 15 84 31] UIntSize.to_int i < Seq.length (ShallowModel0.shallow_model self)}
    requires {[#"../sparse_array.rs" 93 16 93 20] Inv0.inv self}
    ensures { [#"../sparse_array.rs" 85 14 88 5] match (result) with
      | Core_Option_Option_Type.C_None -> IndexLogic0.index_logic self (UIntSize.to_int i) = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some x -> IndexLogic0.index_logic self (UIntSize.to_int i) = Core_Option_Option_Type.C_Some x
      end }
    ensures { [#"../sparse_array.rs" 89 14 92 5] match (IndexLogic0.index_logic self (UIntSize.to_int i)) with
      | Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some _ -> true
      end }
    ensures { [#"../sparse_array.rs" 93 35 93 45] Inv1.inv result }
    
end
module SparseArray_Impl1_Get
  type t
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant14 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Inv_Interface as Inv23 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited14 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t,
    predicate Inv0.inv = Inv23.inv,
    predicate Invariant0.invariant' = Invariant14.invariant',
    axiom .
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant13 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Inv_Interface as Inv22 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited13 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t,
    predicate Inv0.inv = Inv22.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant12 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv21 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited12 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize,
    predicate Inv0.inv = Inv21.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant11 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv20 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited11 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize,
    predicate Inv0.inv = Inv20.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv1 with
    type t = t,
    predicate Inv0.inv = Inv23.inv,
    predicate Invariant0.invariant' = Invariant14.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv1 with
    type t = t,
    predicate Inv0.inv = Inv22.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant10 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Inv_Interface as Inv19 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited10 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t,
    predicate Inv0.inv = Inv19.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv0 with
    type t = usize,
    predicate Inv0.inv = Inv21.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv0 with
    type t = usize,
    predicate Inv0.inv = Inv20.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant9 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv17 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited9 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize,
    predicate Inv0.inv = Inv17.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv1 with
    type t = t,
    predicate Inv0.inv = Inv19.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    predicate Inv1.inv = Inv22.inv,
    predicate Inv2.inv = Inv23.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant8 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv15 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited8 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv18 with
    type t = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Alloc_Global_Type_Inv as Alloc_Alloc_Global_Type_Inv0 with
    predicate Inv0.inv = Inv18.inv,
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv0 with
    type t = usize,
    predicate Inv0.inv = Inv17.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    predicate Inv1.inv = Inv20.inv,
    predicate Inv2.inv = Inv21.inv,
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant7 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited7 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant6 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited6 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t),
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant5 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited5 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant4 with
    type self = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited4 with
    type self = Seq.seq t,
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    predicate Inv1.inv = Inv19.inv,
    predicate Inv2.inv = Inv18.inv,
    axiom .
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant3 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited3 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    predicate Inv1.inv = Inv17.inv,
    predicate Inv2.inv = Inv18.inv,
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = SparseArray_Sparse_Type.t_sparse t,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv2 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    axiom .
  clone SparseArray_Sparse_Type_Inv as SparseArray_Sparse_Type_Inv1 with
    type t = t,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv16 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = t
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel4 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv10.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone SparseArray_Impl1_IsElt as IsElt0 with
    type t = t,
    function IndexLogic0.index_logic = IndexLogic1.index_logic
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv3 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv2 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv15.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial2 with
    type t = t,
    predicate Inv0.inv = Inv16.inv,
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv15.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv14.inv,
    axiom .
  clone Core_Option_Option_Type_Inv as Core_Option_Option_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv13.inv,
    axiom .
  clone SparseArray_Sparse_Type_Inv as SparseArray_Sparse_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone SparseArray_Impl0_ShallowModel as ShallowModel5 with
    type t = t,
    predicate Inv0.inv = Inv11.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv1.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = t
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = usize
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Core_Option_Option_Type.t_option t,
    type s = SparseArray_Sparse_Type.t_sparse t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone SparseArray_Impl1_SparseInv as SparseInv0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel4.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv0.inv = Inv7.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv9.inv,
    predicate Inv3.inv = Inv10.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = t
  clone Alloc_Vec_Impl13_Index_Interface as Index1 with
    type t = t,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate HasValue0.has_value = HasValue1.has_value,
    predicate Inv2.inv = Inv6.inv,
    type Output0.output = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = SparseArray_Sparse_Type.t_sparse t
  clone Alloc_Vec_Impl13_Index_Interface as Index0 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    predicate Inv2.inv = Inv4.inv,
    type Output0.output = usize
  let rec cfg get [#"../sparse_array.rs" 93 4 93 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : SparseArray_Sparse_Type.t_sparse t) (i : usize) : Core_Option_Option_Type.t_option t
    requires {[#"../sparse_array.rs" 83 15 83 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 84 15 84 31] UIntSize.to_int i < Seq.length (ShallowModel0.shallow_model self)}
    requires {[#"../sparse_array.rs" 93 16 93 20] Inv0.inv self}
    ensures { [#"../sparse_array.rs" 85 14 88 5] match (result) with
      | Core_Option_Option_Type.C_None -> IndexLogic0.index_logic self (UIntSize.to_int i) = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some x -> IndexLogic0.index_logic self (UIntSize.to_int i) = Core_Option_Option_Type.C_Some x
      end }
    ensures { [#"../sparse_array.rs" 89 14 92 5] match (IndexLogic0.index_logic self (UIntSize.to_int i)) with
      | Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None
      | Core_Option_Option_Type.C_Some _ -> true
      end }
    ensures { [#"../sparse_array.rs" 93 35 93 45] Inv1.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self : SparseArray_Sparse_Type.t_sparse t = self;
  var i : usize = i;
  var index : usize;
  var _8 : usize;
  var _11 : bool;
  var _17 : usize;
  var _22 : t;
  var _23 : t;
  {
    goto BB0
  }
  BB0 {
    _8 <- ([#"../sparse_array.rs" 94 20 94 31] Index0.index (SparseArray_Sparse_Type.sparse_idx self) i);
    goto BB1
  }
  BB1 {
    index <- _8;
    switch ([#"../sparse_array.rs" 95 11 95 25] index < SparseArray_Sparse_Type.sparse_n self)
      | False -> goto BB2
      | True -> goto BB3
      end
  }
  BB2 {
    _11 <- ([#"../sparse_array.rs" 95 11 95 50] false);
    goto BB4
  }
  BB3 {
    _17 <- ([#"../sparse_array.rs" 95 29 95 45] Index0.index (SparseArray_Sparse_Type.sparse_back self) index);
    goto BB5
  }
  BB4 {
    switch (_11)
      | False -> goto BB8
      | True -> goto BB6
      end
  }
  BB5 {
    _11 <- ([#"../sparse_array.rs" 95 29 95 50] _17 = i);
    goto BB4
  }
  BB6 {
    assume { Resolve0.resolve self };
    _23 <- ([#"../sparse_array.rs" 96 18 96 32] Index1.index (SparseArray_Sparse_Type.sparse_values self) i);
    goto BB7
  }
  BB7 {
    _22 <- _23;
    assume { Resolve1.resolve _23 };
    assume { Resolve1.resolve _22 };
    _0 <- Core_Option_Option_Type.C_Some _22;
    goto BB9
  }
  BB8 {
    assume { Resolve0.resolve self };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module SparseArray_Impl1_LemmaPermutation_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with
    type t = t
  function lemma_permutation [#"../sparse_array.rs" 109 4 109 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    
end
module SparseArray_Impl1_LemmaPermutation_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with
    type t = t
  function lemma_permutation [#"../sparse_array.rs" 109 4 109 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    
  val lemma_permutation [#"../sparse_array.rs" 109 4 109 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    requires {[#"../sparse_array.rs" 105 15 105 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 106 15 106 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self}
    requires {[#"../sparse_array.rs" 107 15 107 39] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)}
    requires {[#"../sparse_array.rs" 109 25 109 29] Inv0.inv self}
    ensures { [#"../sparse_array.rs" 108 14 108 28] IsElt0.is_elt self i }
    ensures { result = lemma_permutation self i }
    
  axiom lemma_permutation_spec : forall self : SparseArray_Sparse_Type.t_sparse t, i : int . ([#"../sparse_array.rs" 105 15 105 32] SparseInv0.sparse_inv self) -> ([#"../sparse_array.rs" 106 15 106 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self) -> ([#"../sparse_array.rs" 107 15 107 39] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) -> ([#"../sparse_array.rs" 109 25 109 29] Inv0.inv self) -> ([#"../sparse_array.rs" 108 14 108 28] IsElt0.is_elt self i)
end
module SparseArray_Impl1_LemmaPermutation
  type t
  use prelude.Int
  use prelude.UIntSize
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with
    type t = t
  function lemma_permutation [#"../sparse_array.rs" 109 4 109 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    
   =
    [#"../sparse_array.rs" 104 4 104 12] ()
  val lemma_permutation [#"../sparse_array.rs" 109 4 109 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    requires {[#"../sparse_array.rs" 105 15 105 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 106 15 106 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self}
    requires {[#"../sparse_array.rs" 107 15 107 39] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)}
    requires {[#"../sparse_array.rs" 109 25 109 29] Inv0.inv self}
    ensures { [#"../sparse_array.rs" 108 14 108 28] IsElt0.is_elt self i }
    ensures { result = lemma_permutation self i }
    
  axiom lemma_permutation_spec : forall self : SparseArray_Sparse_Type.t_sparse t, i : int . ([#"../sparse_array.rs" 105 15 105 32] SparseInv0.sparse_inv self) -> ([#"../sparse_array.rs" 106 15 106 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self) -> ([#"../sparse_array.rs" 107 15 107 39] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)) -> ([#"../sparse_array.rs" 109 25 109 29] Inv0.inv self) -> ([#"../sparse_array.rs" 108 14 108 28] IsElt0.is_elt self i)
end
module SparseArray_Impl1_LemmaPermutation_Impl
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant13 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited13 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize,
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant12 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited12 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant11 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited11 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant10 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited10 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant9 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited9 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant8 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited8 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t,
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    predicate Inv1.inv = Inv13.inv,
    predicate Inv2.inv = Inv14.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant7 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited7 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Alloc_Global_Type_Inv as Alloc_Alloc_Global_Type_Inv0 with
    predicate Inv0.inv = Inv9.inv,
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    predicate Inv1.inv = Inv11.inv,
    predicate Inv2.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant6 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited6 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant5 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited5 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t),
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant4 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited4 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv4.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    predicate Inv1.inv = Inv10.inv,
    predicate Inv2.inv = Inv9.inv,
    axiom .
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited2 with
    type self = Seq.seq t,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    predicate Inv1.inv = Inv8.inv,
    predicate Inv2.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv2 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = SparseArray_Sparse_Type.t_sparse t,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv4.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv3.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone SparseArray_Impl1_IsElt as IsElt0 with
    type t = t,
    function IndexLogic0.index_logic = IndexLogic0.index_logic
  clone SparseArray_Impl0_ShallowModel as ShallowModel3 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone SparseArray_Sparse_Type_Inv as SparseArray_Sparse_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    predicate Inv3.inv = Inv4.inv
  let rec ghost function lemma_permutation [#"../sparse_array.rs" 109 4 109 38] (self : SparseArray_Sparse_Type.t_sparse t) (i : int) : ()
    requires {[#"../sparse_array.rs" 105 15 105 32] SparseInv0.sparse_inv self}
    requires {[#"../sparse_array.rs" 106 15 106 34] SparseArray_Sparse_Type.sparse_n self = SparseArray_Sparse_Type.sparse_size self}
    requires {[#"../sparse_array.rs" 107 15 107 39] 0 <= i /\ i < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size self)}
    requires {[#"../sparse_array.rs" 109 25 109 29] Inv0.inv self}
    ensures { [#"../sparse_array.rs" 108 14 108 28] IsElt0.is_elt self i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../sparse_array.rs" 104 4 104 12] ()
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 58 8 58 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl14_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv4 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = borrowed Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec t a
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t a)
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 122 27 122 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    requires {Inv0.inv self}
    requires {Inv1.inv index}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 123 26 123 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 124 26 124 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 125 26 125 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 126 26 126 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    ensures { Inv2.inv ( ^ self) }
    ensures { Inv3.inv result }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = borrowed t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv ( * self))
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 123 8 123 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module SparseArray_Impl1_Set_Interface
  type t
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv3 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic2 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone SparseArray_Impl1_IsElt_Stub as IsElt0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic1 with
    type t = Core_Option_Option_Type.t_option t,
    type s = borrowed (SparseArray_Sparse_Type.t_sparse t)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Core_Option_Option_Type.t_option t,
    type s = SparseArray_Sparse_Type.t_sparse t
  clone SparseArray_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (SparseArray_Sparse_Type.t_sparse t)
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t)
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with
    type t = t
  val set [#"../sparse_array.rs" 119 4 119 41] (self : borrowed (SparseArray_Sparse_Type.t_sparse t)) (i : usize) (v : t) : ()
    requires {[#"../sparse_array.rs" 113 15 113 35] SparseInv0.sparse_inv ( * self)}
    requires {[#"../sparse_array.rs" 114 15 114 31] UIntSize.to_int i < Seq.length (ShallowModel0.shallow_model self)}
    requires {[#"../sparse_array.rs" 119 20 119 24] Inv0.inv self}
    requires {[#"../sparse_array.rs" 119 36 119 37] Inv1.inv v}
    ensures { [#"../sparse_array.rs" 115 14 115 34] SparseInv0.sparse_inv ( ^ self) }
    ensures { [#"../sparse_array.rs" 116 14 116 43] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../sparse_array.rs" 117 4 117 64] forall j : int . j <> UIntSize.to_int i -> IndexLogic0.index_logic ( ^ self) j = IndexLogic1.index_logic self j }
    ensures { [#"../sparse_array.rs" 118 14 118 36] IndexLogic0.index_logic ( ^ self) (UIntSize.to_int i) = Core_Option_Option_Type.C_Some v }
    ensures { [#"../sparse_array.rs" 119 20 119 24] Inv2.inv ( ^ self) }
    
end
module SparseArray_Impl1_Set
  type t
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant18 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv25 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited18 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize,
    predicate Inv0.inv = Inv25.inv,
    predicate Invariant0.invariant' = Invariant18.invariant',
    axiom .
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant17 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv24 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited17 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize,
    predicate Inv0.inv = Inv24.inv,
    predicate Invariant0.invariant' = Invariant17.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant16 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Inv_Interface as Inv23 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited16 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t,
    predicate Inv0.inv = Inv23.inv,
    predicate Invariant0.invariant' = Invariant16.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant15 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Inv_Interface as Inv22 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited15 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t,
    predicate Inv0.inv = Inv22.inv,
    predicate Invariant0.invariant' = Invariant15.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv25.inv,
    predicate Invariant0.invariant' = Invariant18.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv24.inv,
    predicate Invariant0.invariant' = Invariant17.invariant',
    axiom .
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant14 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv21 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited14 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize,
    predicate Inv0.inv = Inv21.inv,
    predicate Invariant0.invariant' = Invariant14.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv23.inv,
    predicate Invariant0.invariant' = Invariant16.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv22.inv,
    predicate Invariant0.invariant' = Invariant15.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant13 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Inv_Interface as Inv19 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited13 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t,
    predicate Inv0.inv = Inv19.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv21.inv,
    predicate Invariant0.invariant' = Invariant14.invariant',
    predicate Inv1.inv = Inv24.inv,
    predicate Inv2.inv = Inv25.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant12 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv17 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited12 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv17.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv20 with
    type t = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Alloc_Global_Type_Inv as Alloc_Alloc_Global_Type_Inv0 with
    predicate Inv0.inv = Inv20.inv,
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv19.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    predicate Inv1.inv = Inv22.inv,
    predicate Inv2.inv = Inv23.inv,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant11 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv15 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited11 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant10 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited10 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t),
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant9 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited9 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant8 with
    type t = borrowed usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv18 with
    type t = borrowed usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited8 with
    type t = borrowed usize,
    predicate Inv0.inv = Inv18.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    axiom .
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant7 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited7 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv17.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    predicate Inv1.inv = Inv21.inv,
    predicate Inv2.inv = Inv20.inv,
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant5 with
    type self = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited5 with
    type self = Seq.seq t,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant4 with
    type self = borrowed t
  clone CreusotContracts_Invariant_Inv_Interface as Inv16 with
    type t = borrowed t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited4 with
    type self = borrowed t,
    predicate Inv0.inv = Inv16.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    predicate Inv1.inv = Inv19.inv,
    predicate Inv2.inv = Inv20.inv,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant3 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited3 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited2 with
    type self = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = SparseArray_Sparse_Type.t_sparse t,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = borrowed (SparseArray_Sparse_Type.t_sparse t)
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (SparseArray_Sparse_Type.t_sparse t)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = borrowed (SparseArray_Sparse_Type.t_sparse t),
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv2 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = usize
  clone TyInv_Borrow as TyInv_Borrow4 with
    type t = usize,
    predicate Inv0.inv = Inv18.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    predicate Inv1.inv = Inv17.inv,
    axiom .
  clone TyInv_Borrow as TyInv_Borrow3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    predicate Inv1.inv = Inv11.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = usize,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    predicate Inv1.inv = Inv17.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = t
  clone TyInv_Borrow as TyInv_Borrow2 with
    type t = t,
    predicate Inv0.inv = Inv16.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv15.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = usize,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Borrow as TyInv_Borrow1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone SparseArray_Sparse_Type_Inv as SparseArray_Sparse_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic3 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel6 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv11.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv13.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone SparseArray_Impl1_IsElt as IsElt0 with
    type t = t,
    function IndexLogic0.index_logic = IndexLogic2.index_logic
  clone SparseArray_Impl0_ShallowModel as ShallowModel1 with
    type t = t,
    predicate Inv0.inv = Inv2.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    function IndexLogic0.index_logic = IndexLogic3.index_logic,
    predicate Inv1.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel7 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = borrowed usize
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere1 with
    type t = usize
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = usize
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed t
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = t
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = t
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Core_Option_Option_Type.t_option t,
    type s = borrowed (SparseArray_Sparse_Type.t_sparse t),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Core_Option_Option_Type.t_option t,
    type s = SparseArray_Sparse_Type.t_sparse t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel6.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv11.inv,
    predicate Inv3.inv = Inv13.inv
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = usize
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut1 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate Inv0.inv = Inv10.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate HasValue0.has_value = HasValue1.has_value,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
    predicate Inv2.inv = Inv11.inv,
    predicate Inv3.inv = Inv12.inv,
    type Output0.output = usize,
    val Max0.mAX' = Max0.mAX',
    predicate Inv4.inv = Inv13.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty ()
  clone SparseArray_Impl1_LemmaPermutation as LemmaPermutation0 with
    type t = t,
    predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv,
    predicate Inv0.inv = Inv2.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    axiom .
  clone Alloc_Vec_Impl13_Index_Interface as Index0 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate Inv0.inv = Inv8.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate HasValue0.has_value = HasValue1.has_value,
    predicate Inv2.inv = Inv9.inv,
    type Output0.output = usize
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut0 with
    type t = t,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv4.inv,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv6.inv,
    type Output0.output = t,
    val Max0.mAX' = Max0.mAX',
    predicate Inv4.inv = Inv7.inv
  let rec cfg set [#"../sparse_array.rs" 119 4 119 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (SparseArray_Sparse_Type.t_sparse t)) (i : usize) (v : t) : ()
    requires {[#"../sparse_array.rs" 113 15 113 35] SparseInv0.sparse_inv ( * self)}
    requires {[#"../sparse_array.rs" 114 15 114 31] UIntSize.to_int i < Seq.length (ShallowModel0.shallow_model self)}
    requires {[#"../sparse_array.rs" 119 20 119 24] Inv0.inv self}
    requires {[#"../sparse_array.rs" 119 36 119 37] Inv1.inv v}
    ensures { [#"../sparse_array.rs" 115 14 115 34] SparseInv0.sparse_inv ( ^ self) }
    ensures { [#"../sparse_array.rs" 116 14 116 43] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    ensures { [#"../sparse_array.rs" 117 4 117 64] forall j : int . j <> UIntSize.to_int i -> IndexLogic0.index_logic ( ^ self) j = IndexLogic1.index_logic self j }
    ensures { [#"../sparse_array.rs" 118 14 118 36] IndexLogic0.index_logic ( ^ self) (UIntSize.to_int i) = Core_Option_Option_Type.C_Some v }
    ensures { [#"../sparse_array.rs" 119 20 119 24] Inv2.inv ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self : borrowed (SparseArray_Sparse_Type.t_sparse t) = self;
  var i : usize = i;
  var v : t = v;
  var _11 : borrowed t;
  var _12 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var index : usize;
  var _15 : usize;
  var _19 : bool;
  var _25 : usize;
  var _29 : Ghost.ghost_ty ();
  var _34 : borrowed usize;
  var _35 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _38 : borrowed usize;
  var _39 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _12 <- borrow_mut (SparseArray_Sparse_Type.sparse_values ( * self));
    self <- { self with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self in SparseArray_Sparse_Type.C_Sparse a b ( ^ _12) d e) };
    _11 <- ([#"../sparse_array.rs" 120 8 120 22] IndexMut0.index_mut _12 i);
    _12 <- any borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _11 <- { _11 with current = v };
    v <- any t;
    assume { Resolve0.resolve ( * _11) };
    assume { Resolve1.resolve _11 };
    goto BB5
  }
  BB5 {
    _15 <- ([#"../sparse_array.rs" 121 20 121 31] Index0.index (SparseArray_Sparse_Type.sparse_idx ( * self)) i);
    goto BB6
  }
  BB6 {
    index <- _15;
    switch ([#"../sparse_array.rs" 122 13 122 27] index < SparseArray_Sparse_Type.sparse_n ( * self))
      | False -> goto BB7
      | True -> goto BB8
      end
  }
  BB7 {
    _19 <- ([#"../sparse_array.rs" 122 12 122 53] false);
    goto BB9
  }
  BB8 {
    _25 <- ([#"../sparse_array.rs" 122 31 122 47] Index0.index (SparseArray_Sparse_Type.sparse_back ( * self)) index);
    goto BB10
  }
  BB9 {
    switch (not _19)
      | False -> goto BB15
      | True -> goto BB11
      end
  }
  BB10 {
    _19 <- ([#"../sparse_array.rs" 122 31 122 52] _25 = i);
    goto BB9
  }
  BB11 {
    _29 <- ([#"../sparse_array.rs" 124 12 124 43] Ghost.new ());
    goto BB12
  }
  BB12 {
    assume { Resolve2.resolve _29 };
    assert { [@expl:assertion] [#"../sparse_array.rs" 125 26 125 46] UIntSize.to_int (SparseArray_Sparse_Type.sparse_n ( * self)) < UIntSize.to_int (SparseArray_Sparse_Type.sparse_size ( * self)) };
    _35 <- borrow_mut (SparseArray_Sparse_Type.sparse_idx ( * self));
    self <- { self with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self in SparseArray_Sparse_Type.C_Sparse a b c ( ^ _35) e) };
    _34 <- ([#"../sparse_array.rs" 127 12 127 23] IndexMut1.index_mut _35 i);
    _35 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB13
  }
  BB13 {
    _34 <- { _34 with current = SparseArray_Sparse_Type.sparse_n ( * self) };
    assume { Resolve3.resolve _34 };
    _39 <- borrow_mut (SparseArray_Sparse_Type.sparse_back ( * self));
    self <- { self with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self in SparseArray_Sparse_Type.C_Sparse a b c d ( ^ _39)) };
    _38 <- ([#"../sparse_array.rs" 128 12 128 29] IndexMut1.index_mut _39 (SparseArray_Sparse_Type.sparse_n ( * self)));
    _39 <- any borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
    goto BB14
  }
  BB14 {
    _38 <- { _38 with current = i };
    assume { Resolve3.resolve _38 };
    self <- { self with current = (let SparseArray_Sparse_Type.C_Sparse a b c d e =  * self in SparseArray_Sparse_Type.C_Sparse a ([#"../sparse_array.rs" 129 12 129 23] SparseArray_Sparse_Type.sparse_n ( * self) + ([#"../sparse_array.rs" 129 22 129 23] (1 : usize))) c d e) };
    assume { Resolve4.resolve self };
    _0 <- ();
    goto BB16
  }
  BB15 {
    assume { Resolve4.resolve self };
    _0 <- ();
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Seq.seq t
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv1.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val from_elem (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    requires {Inv0.inv elem}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 147 22 147 41] Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 148 12 148 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n -> IndexLogic0.index_logic result i = elem }
    ensures { Inv1.inv result }
    
end
module SparseArray_Create_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = SparseArray_Sparse_Type.t_sparse t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = Core_Option_Option_Type.t_option t,
    type s = SparseArray_Sparse_Type.t_sparse t
  clone SparseArray_Impl1_SparseInv_Stub as SparseInv0 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  val create [#"../sparse_array.rs" 142 0 142 64] (sz : usize) (dummy : t) : SparseArray_Sparse_Type.t_sparse t
    requires {[#"../sparse_array.rs" 142 42 142 47] Inv0.inv dummy}
    ensures { [#"../sparse_array.rs" 139 10 139 29] SparseInv0.sparse_inv result }
    ensures { [#"../sparse_array.rs" 140 10 140 27] SparseArray_Sparse_Type.sparse_size result = sz }
    ensures { [#"../sparse_array.rs" 141 0 141 44] forall i : int . IndexLogic0.index_logic result i = Core_Option_Option_Type.C_None }
    ensures { [#"../sparse_array.rs" 142 55 142 64] Inv1.inv result }
    
end
module SparseArray_Create
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant13 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv16 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited13 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize,
    predicate Inv0.inv = Inv16.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant12 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv15 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited12 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize,
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant11 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited11 with
    type self = Core_Marker_PhantomData_Type.t_phantomdata t,
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant10 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited10 with
    type self = Core_Ptr_NonNull_NonNull_Type.t_nonnull t,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv16.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant9 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited9 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv14.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant8 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited8 with
    type self = Core_Ptr_Unique_Unique_Type.t_unique t,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    predicate Inv1.inv = Inv15.inv,
    predicate Inv2.inv = Inv16.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant7 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited7 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Alloc_Global_Type_Inv as Alloc_Alloc_Global_Type_Inv0 with
    predicate Inv0.inv = Inv11.inv,
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv10.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    predicate Inv1.inv = Inv13.inv,
    predicate Inv2.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant6 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited6 with
    type self = Alloc_RawVec_RawVec_Type.t_rawvec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant5 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq (Core_Option_Option_Type.t_option t)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited5 with
    type self = Seq.seq (Core_Option_Option_Type.t_option t),
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant4 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited4 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    predicate Inv1.inv = Inv12.inv,
    predicate Inv2.inv = Inv11.inv,
    axiom .
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited3 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Seq.seq t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited2 with
    type self = Seq.seq t,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    predicate Inv1.inv = Inv10.inv,
    predicate Inv2.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = SparseArray_Sparse_Type.t_sparse t
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = SparseArray_Sparse_Type.t_sparse t,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv2 with
    type t = Core_Option_Option_Type.t_option t,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone SparseArray_Impl1_IsElt as IsElt0 with
    type t = t,
    function IndexLogic0.index_logic = IndexLogic2.index_logic
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = usize,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone SparseArray_Sparse_Type_Inv as SparseArray_Sparse_Type_Inv0 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone SparseArray_Impl0_ShallowModel as ShallowModel3 with
    type t = t,
    predicate Inv0.inv = Inv1.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel2 with
    type t = SparseArray_Sparse_Type.t_sparse t,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option t),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Core_Option_Option_Type.t_option t,
    type s = SparseArray_Sparse_Type.t_sparse t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with
    type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv0.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv5.inv,
    predicate Inv3.inv = Inv6.inv
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = t
  clone Alloc_Vec_FromElem_Interface as FromElem1 with
    type t = usize,
    predicate Inv0.inv = Inv4.inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function IndexLogic0.index_logic = IndexLogic2.index_logic,
    predicate Inv1.inv = Inv5.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv6.inv
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = t,
    predicate Inv0.inv = Inv0.inv,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv1.inv = Inv2.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv2.inv = Inv3.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  let rec cfg create [#"../sparse_array.rs" 142 0 142 64] [@cfg:stackify] [@cfg:subregion_analysis] (sz : usize) (dummy : t) : SparseArray_Sparse_Type.t_sparse t
    requires {[#"../sparse_array.rs" 142 42 142 47] Inv0.inv dummy}
    ensures { [#"../sparse_array.rs" 139 10 139 29] SparseInv0.sparse_inv result }
    ensures { [#"../sparse_array.rs" 140 10 140 27] SparseArray_Sparse_Type.sparse_size result = sz }
    ensures { [#"../sparse_array.rs" 141 0 141 44] forall i : int . IndexLogic0.index_logic result i = Core_Option_Option_Type.C_None }
    ensures { [#"../sparse_array.rs" 142 55 142 64] Inv1.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : SparseArray_Sparse_Type.t_sparse t;
  var sz : usize = sz;
  var dummy : t = dummy;
  {
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve dummy };
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _0 <- SparseArray_Sparse_Type.C_Sparse sz ([#"../sparse_array.rs" 143 26 143 27] (0 : usize)) ([#"../sparse_array.rs" 143 37 143 52] FromElem0.from_elem dummy sz) ([#"../sparse_array.rs" 143 59 143 70] FromElem1.from_elem ([#"../sparse_array.rs" 143 64 143 65] (0 : usize)) sz) ([#"../sparse_array.rs" 143 78 143 89] FromElem1.from_elem ([#"../sparse_array.rs" 143 83 143 84] (0 : usize)) sz);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Std1_Num_Impl24_ShallowModel_Stub
  use prelude.Int
  use prelude.Int32
  function shallow_model (self : int32) : int
end
module CreusotContracts_Std1_Num_Impl24_ShallowModel_Interface
  use prelude.Int
  use prelude.Int32
  function shallow_model (self : int32) : int
  val shallow_model (self : int32) : int
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Num_Impl24_ShallowModel
  use prelude.Int
  use prelude.Int32
  function shallow_model (self : int32) : int =
    Int32.to_int self
  val shallow_model (self : int32) : int
    ensures { result = shallow_model self }
    
end
module SparseArray_F_Interface
  val f [#"../sparse_array.rs" 148 0 148 10] (_1 : ()) : ()
end
module SparseArray_F
  use prelude.Int
  use prelude.Int32
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant15 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv19 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited15 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata usize,
    predicate Inv0.inv = Inv19.inv,
    predicate Invariant0.invariant' = Invariant15.invariant',
    axiom .
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant14 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv18 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited14 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull usize,
    predicate Inv0.inv = Inv18.inv,
    predicate Invariant0.invariant' = Invariant14.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant13 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv17 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata int32
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited13 with
    type t = Core_Marker_PhantomData_Type.t_phantomdata int32,
    predicate Inv0.inv = Inv17.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant12 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv16 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull int32
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited12 with
    type t = Core_Ptr_NonNull_NonNull_Type.t_nonnull int32,
    predicate Inv0.inv = Inv16.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv19.inv,
    predicate Invariant0.invariant' = Invariant15.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv18.inv,
    predicate Invariant0.invariant' = Invariant14.invariant',
    axiom .
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant11 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv15 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited11 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique usize,
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    axiom .
  clone Core_Marker_PhantomData_Type_Inv as Core_Marker_PhantomData_Type_Inv0 with
    type t = int32,
    predicate Inv0.inv = Inv17.inv,
    predicate Invariant0.invariant' = Invariant13.invariant',
    axiom .
  clone Core_Ptr_NonNull_NonNull_Type_Inv as Core_Ptr_NonNull_NonNull_Type_Inv0 with
    type t = int32,
    predicate Inv0.inv = Inv16.inv,
    predicate Invariant0.invariant' = Invariant12.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant10 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv13 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique int32
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited10 with
    type t = Core_Ptr_Unique_Unique_Type.t_unique int32,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv1 with
    type t = usize,
    predicate Inv0.inv = Inv15.inv,
    predicate Invariant0.invariant' = Invariant11.invariant',
    predicate Inv1.inv = Inv18.inv,
    predicate Inv2.inv = Inv19.inv,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant9 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv12 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited9 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv14 with
    type t = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Alloc_Global_Type_Inv as Alloc_Alloc_Global_Type_Inv0 with
    predicate Inv0.inv = Inv14.inv,
    axiom .
  clone Core_Ptr_Unique_Unique_Type_Inv as Core_Ptr_Unique_Unique_Type_Inv0 with
    type t = int32,
    predicate Inv0.inv = Inv13.inv,
    predicate Invariant0.invariant' = Invariant10.invariant',
    predicate Inv1.inv = Inv16.inv,
    predicate Inv2.inv = Inv17.inv,
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant8 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec int32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv11 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec int32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited8 with
    type t = Alloc_RawVec_RawVec_Type.t_rawvec int32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    axiom .
  use seq.Seq
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant7 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv9 with
    type t = Seq.seq usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited7 with
    type t = Seq.seq usize,
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv12.inv,
    predicate Invariant0.invariant' = Invariant9.invariant',
    predicate Inv1.inv = Inv15.inv,
    predicate Inv2.inv = Inv14.inv,
    axiom .
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant5 with
    type t = Seq.seq int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = Seq.seq int32
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited5 with
    type t = Seq.seq int32,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone Alloc_RawVec_RawVec_Type_Inv as Alloc_RawVec_RawVec_Type_Inv0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv11.inv,
    predicate Invariant0.invariant' = Invariant8.invariant',
    predicate Inv1.inv = Inv13.inv,
    predicate Inv2.inv = Inv14.inv,
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant4 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited4 with
    type t = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant3 with
    type t = Seq.seq (Core_Option_Option_Type.t_option int32)
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Seq.seq (Core_Option_Option_Type.t_option int32)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited3 with
    type t = Seq.seq (Core_Option_Option_Type.t_option int32),
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  use SparseArray_Sparse_Type as SparseArray_Sparse_Type
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant2 with
    type t = borrowed (SparseArray_Sparse_Type.t_sparse int32)
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed (SparseArray_Sparse_Type.t_sparse int32)
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited2 with
    type t = borrowed (SparseArray_Sparse_Type.t_sparse int32),
    predicate Inv0.inv = Inv4.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = int32
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = int32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant1 with
    type t = Core_Option_Option_Type.t_option int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Core_Option_Option_Type.t_option int32
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited1 with
    type t = Core_Option_Option_Type.t_option int32,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant0 with
    type t = SparseArray_Sparse_Type.t_sparse int32
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = SparseArray_Sparse_Type.t_sparse int32
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited0 with
    type t = SparseArray_Sparse_Type.t_sparse int32,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv10 with
    type t = int32
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv2 with
    type t = usize,
    predicate Inv0.inv = Inv9.inv,
    predicate Invariant0.invariant' = Invariant7.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv8.inv,
    predicate Invariant0.invariant' = Invariant6.invariant',
    predicate Inv1.inv = Inv12.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv1 with
    type t = int32,
    predicate Inv0.inv = Inv7.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone Alloc_Vec_Vec_Type_Inv as Alloc_Vec_Vec_Type_Inv0 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Inv1.inv = Inv11.inv,
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = Core_Option_Option_Type.t_option int32,
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = SparseArray_Sparse_Type.t_sparse int32,
    predicate Inv0.inv = Inv4.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone Core_Option_Option_Type_Inv as Core_Option_Option_Type_Inv0 with
    type t = int32,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv10.inv,
    axiom .
  clone SparseArray_Sparse_Type_Inv as SparseArray_Sparse_Type_Inv1 with
    type t = int32,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone SparseArray_Sparse_Type_Inv as SparseArray_Sparse_Type_Inv0 with
    type t = int32,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone Core_Num_Impl11_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel6 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv8.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv9.inv,
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic4 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel5 with
    type t = int32,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = int32,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Std1_Num_Impl24_ShallowModel as ShallowModel4
  use prelude.Int
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic3 with
    type t = int32,
    type s = Alloc_Vec_Vec_Type.t_vec int32 (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone SparseArray_Impl1_IsElt as IsElt0 with
    type t = int32,
    function IndexLogic0.index_logic = IndexLogic4.index_logic
  clone SparseArray_Impl0_ShallowModel as ShallowModel3 with
    type t = int32,
    predicate Inv0.inv = Inv1.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    function IndexLogic0.index_logic = IndexLogic3.index_logic,
    predicate Inv1.inv = Inv5.inv,
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel2 with
    type t = SparseArray_Sparse_Type.t_sparse int32,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option int32),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = Core_Option_Option_Type.t_option int32,
    type s = borrowed (SparseArray_Sparse_Type.t_sparse int32),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel1 with
    type t = SparseArray_Sparse_Type.t_sparse int32,
    type ShallowModelTy0.shallowModelTy = Seq.seq (Core_Option_Option_Type.t_option int32),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Core_Option_Option_Type.t_option int32,
    type s = SparseArray_Sparse_Type.t_sparse int32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = SparseArray_Sparse_Type.t_sparse int32
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = Core_Option_Option_Type.t_option int32,
    type s = SparseArray_Sparse_Type.t_sparse int32,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with
    type t = int32,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel5.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel6.shallow_model,
    function IndexLogic0.index_logic = IndexLogic4.index_logic,
    predicate Inv0.inv = Inv6.inv,
    val Max0.mAX' = Max0.mAX',
    predicate Inv1.inv = Inv7.inv,
    predicate Inv2.inv = Inv8.inv,
    predicate Inv3.inv = Inv9.inv
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = int32,
    type ShallowModelTy0.shallowModelTy = int,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone SparseArray_Impl1_Set_Interface as Set0 with
    type t = int32,
    predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv0.inv,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    function IndexLogic1.index_logic = IndexLogic2.index_logic,
    predicate Inv2.inv = Inv1.inv,
    predicate IsElt0.is_elt = IsElt0.is_elt,
    function IndexLogic2.index_logic = IndexLogic3.index_logic,
    predicate Inv3.inv = Inv5.inv
  clone SparseArray_Impl1_Get_Interface as Get0 with
    type t = int32,
    predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate Inv0.inv = Inv2.inv,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Inv1.inv = Inv3.inv
  clone SparseArray_Create_Interface as Create0 with
    type t = int32,
    predicate Inv0.inv = Inv0.inv,
    predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv,
    function IndexLogic0.index_logic = IndexLogic0.index_logic,
    predicate Inv1.inv = Inv1.inv
  let rec cfg f [#"../sparse_array.rs" 148 0 148 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var default : int32;
  var a : SparseArray_Sparse_Type.t_sparse int32;
  var b : SparseArray_Sparse_Type.t_sparse int32;
  var x : Core_Option_Option_Type.t_option int32;
  var y : Core_Option_Option_Type.t_option int32;
  var _12 : ();
  var _13 : borrowed (SparseArray_Sparse_Type.t_sparse int32);
  var _14 : ();
  var _15 : borrowed (SparseArray_Sparse_Type.t_sparse int32);
  {
    goto BB0
  }
  BB0 {
    default <- ([#"../sparse_array.rs" 149 18 149 19] (0 : int32));
    a <- ([#"../sparse_array.rs" 150 16 150 35] Create0.create ([#"../sparse_array.rs" 150 23 150 25] (10 : usize)) default);
    goto BB1
  }
  BB1 {
    b <- ([#"../sparse_array.rs" 151 16 151 35] Create0.create ([#"../sparse_array.rs" 151 23 151 25] (20 : usize)) default);
    goto BB2
  }
  BB2 {
    x <- ([#"../sparse_array.rs" 152 16 152 24] Get0.get a ([#"../sparse_array.rs" 152 22 152 23] (5 : usize)));
    goto BB3
  }
  BB3 {
    y <- ([#"../sparse_array.rs" 153 16 153 24] Get0.get b ([#"../sparse_array.rs" 153 22 153 23] (7 : usize)));
    goto BB4
  }
  BB4 {
    assert { [@expl:assertion] [#"../sparse_array.rs" 154 18 154 40] x = Core_Option_Option_Type.C_None /\ y = Core_Option_Option_Type.C_None };
    _13 <- borrow_mut a;
    a <-  ^ _13;
    _12 <- ([#"../sparse_array.rs" 156 4 156 15] Set0.set _13 ([#"../sparse_array.rs" 156 10 156 11] (5 : usize)) ([#"../sparse_array.rs" 156 13 156 14] (1 : int32)));
    _13 <- any borrowed (SparseArray_Sparse_Type.t_sparse int32);
    goto BB5
  }
  BB5 {
    _15 <- borrow_mut b;
    b <-  ^ _15;
    _14 <- ([#"../sparse_array.rs" 157 4 157 15] Set0.set _15 ([#"../sparse_array.rs" 157 10 157 11] (7 : usize)) ([#"../sparse_array.rs" 157 13 157 14] (2 : int32)));
    _15 <- any borrowed (SparseArray_Sparse_Type.t_sparse int32);
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    x <- ([#"../sparse_array.rs" 158 8 158 16] Get0.get a ([#"../sparse_array.rs" 158 14 158 15] (5 : usize)));
    goto BB8
  }
  BB8 {
    y <- ([#"../sparse_array.rs" 159 8 159 16] Get0.get b ([#"../sparse_array.rs" 159 14 159 15] (7 : usize)));
    assert { [@expl:assertion] [#"../sparse_array.rs" 160 18 163 5] match (x) with
      | Core_Option_Option_Type.C_None -> false
      | Core_Option_Option_Type.C_Some z -> ShallowModel0.shallow_model z = 1
      end };
    assert { [@expl:assertion] [#"../sparse_array.rs" 164 18 167 5] match (y) with
      | Core_Option_Option_Type.C_None -> false
      | Core_Option_Option_Type.C_Some z -> ShallowModel0.shallow_model z = 2
      end };
    goto BB9
  }
  BB9 {
    x <- ([#"../sparse_array.rs" 169 8 169 16] Get0.get a ([#"../sparse_array.rs" 169 14 169 15] (7 : usize)));
    goto BB10
  }
  BB10 {
    y <- ([#"../sparse_array.rs" 170 8 170 16] Get0.get b ([#"../sparse_array.rs" 170 14 170 15] (5 : usize)));
    assert { [@expl:assertion] [#"../sparse_array.rs" 171 18 171 40] x = Core_Option_Option_Type.C_None /\ y = Core_Option_Option_Type.C_None };
    goto BB11
  }
  BB11 {
    x <- ([#"../sparse_array.rs" 173 8 173 16] Get0.get a ([#"../sparse_array.rs" 173 14 173 15] (0 : usize)));
    goto BB12
  }
  BB12 {
    y <- ([#"../sparse_array.rs" 174 8 174 16] Get0.get b ([#"../sparse_array.rs" 174 14 174 15] (0 : usize)));
    assert { [@expl:assertion] [#"../sparse_array.rs" 175 18 175 40] x = Core_Option_Option_Type.C_None /\ y = Core_Option_Option_Type.C_None };
    goto BB13
  }
  BB13 {
    x <- ([#"../sparse_array.rs" 177 8 177 16] Get0.get a ([#"../sparse_array.rs" 177 14 177 15] (9 : usize)));
    goto BB14
  }
  BB14 {
    y <- ([#"../sparse_array.rs" 178 8 178 16] Get0.get b ([#"../sparse_array.rs" 178 14 178 15] (9 : usize)));
    assert { [@expl:assertion] [#"../sparse_array.rs" 179 18 179 40] x = Core_Option_Option_Type.C_None /\ y = Core_Option_Option_Type.C_None };
    _0 <- ();
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module SparseArray_Impl0
  type t
end
