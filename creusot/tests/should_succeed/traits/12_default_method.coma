
module C12DefaultMethod_T_Default
  type self
  let%span s12_default_method0 = "../12_default_method.rs" 7 8 7 9
  let%span s12_default_method1 = "../12_default_method.rs" 6 16 6 20
  predicate invariant'0 (self : self)
  let rec invariant'0 (self:self) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : self)
  let rec inv'0 (_x:self) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : self . inv'0 x = true
  use prelude.Borrow
  use prelude.Intrinsic
  predicate resolve'0 (self : self)
  let rec resolve'0 (self:self) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  use prelude.UInt32
  use prelude.Int
  let rec default (self:self) (return'  (ret:uint32))= {[%#s12_default_method1] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_0 <- [%#s12_default_method0] (0 : uint32) ] s1
      | s1 = {[@expl:type invariant] inv'0 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 = return' {_0} ]
       ]
    ) [ & _0 : uint32 = any_l () : uint32 | & self : self = self ]  [ return' (result:uint32)-> (! return' {result}) ] 
end
module C12DefaultMethod_ShouldUseImpl
  let%span s12_default_method0 = "../12_default_method.rs" 20 31 22 1
  let%span s12_default_method1 = "../12_default_method.rs" 19 10 19 27
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  let%span span3 = "../12_default_method.rs" 13 8 13 12
  let%span span4 = "../12_default_method.rs" 6 16 6 20
  use prelude.UInt32
  predicate invariant'0 (self : uint32) =
    [%#span2] true
  let rec invariant'0 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : uint32)
  let rec inv'0 (_x:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : uint32 . inv'0 x = true
  function logic_default'0 [#"../12_default_method.rs" 12 4 12 34] (self : uint32) : bool =
    [%#span3] true
  let rec logic_default'0 (self:uint32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = logic_default'0 self} (! return' {result}) ]
    
  use prelude.Intrinsic
  use prelude.Int
  use prelude.Borrow
  let rec default'0 (self:uint32) (return'  (ret:uint32))= {[@expl:precondition] [%#span4] inv'0 self}
    any [ return' (result:uint32)-> (! return' {result}) ] 
  let rec should_use_impl (x:uint32) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = default'0 {x} (fun (_ret':uint32) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_0 <- [%#s12_default_method0] () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = any_l () : () | & x : uint32 = x | & _3 : uint32 = any_l () : uint32 ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s12_default_method1] logic_default'0 x} (! return' {result}) ]
    
end
module C12DefaultMethod_Impl0
  
end
