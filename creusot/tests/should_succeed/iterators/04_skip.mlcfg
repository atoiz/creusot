
module C04Skip_Skip_Type
  use prelude.Int
  use prelude.UIntSize
  type t_skip 'i =
    | C_Skip 'i usize
    
  let function skip_n (self : t_skip 'i) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Skip _ a -> a
      end
  let function skip_iter (self : t_skip 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Skip a _ -> a
      end
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 40 4 40 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C04Skip_Common_Iterator_Item_Type
  type self
  type item
end
module C04Skip_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C04Skip_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C04Skip_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C04Skip_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C04Skip_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C04Skip_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C04Skip_Impl0_Completed_Stub
  type i
  use prelude.Borrow
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate completed [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i))
end
module C04Skip_Impl0_Completed_Interface
  type i
  use prelude.Borrow
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate completed [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i))
  val completed [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = completed self }
    
end
module C04Skip_Impl0_Completed
  type i
  use prelude.Borrow
  use prelude.UIntSize
  use seq.Seq
  use prelude.Int
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone C04Skip_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = Item0.item
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate completed [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) =
    [#"../04_skip.rs" 23 8 31 9] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( ^ self)) = 0 /\ (exists i : borrowed i . Inv0.inv i /\ (exists s : Seq.seq Item0.item . Inv1.inv s /\ Seq.length s <= UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self)) /\ Produces0.produces (C04Skip_Skip_Type.skip_iter ( * self)) s ( * i) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Resolve0.resolve (Seq.get s i)) /\ Completed0.completed i /\  ^ i = C04Skip_Skip_Type.skip_iter ( ^ self)))
  val completed [#"../04_skip.rs" 22 4 22 35] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : bool
    ensures { result = completed self }
    
end
module C04Skip_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C04Skip_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a
end
module C04Skip_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a
end
module C04Skip_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C04Skip_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 31 21 33] Inv0.inv ab}
    requires {[#"../common.rs" 21 61 21 63] Inv0.inv bc}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 31 21 33] Inv0.inv ab) -> ([#"../common.rs" 21 61 21 63] Inv0.inv bc) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C04Skip_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use seq.Seq
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 31 21 33] Inv0.inv ab}
    requires {[#"../common.rs" 21 61 21 63] Inv0.inv bc}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 31 21 33] Inv0.inv ab) -> ([#"../common.rs" 21 61 21 63] Inv0.inv bc) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Logic_Seq_Seq_Type_Inv
  type t
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Seq.seq t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq t
  axiom inv_t_seq [@rewrite] : forall self : Seq.seq t . Inv0.inv self = Invariant0.invariant' self
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 10 14 10 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 9 4 9 45] exists x : self . Inv0.inv x /\ Invariant0.invariant' x)
end
module C04Skip_Impl0_Produces_Stub
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate produces [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i)
    
end
module C04Skip_Impl0_Produces_Interface
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate produces [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i)
    
  val produces [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces self visited o }
    
end
module C04Skip_Impl0_Produces
  type i
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = Item0.item
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Seq.seq Item0.item
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  predicate produces [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i)
    
   =
    [#"../04_skip.rs" 37 8 44 9] visited = Seq.empty  /\ self = o \/ UIntSize.to_int (C04Skip_Skip_Type.skip_n o) = 0 /\ Seq.length visited > 0 /\ (exists s : Seq.seq Item0.item . Inv0.inv s /\ Seq.length s = UIntSize.to_int (C04Skip_Skip_Type.skip_n self) /\ Produces0.produces (C04Skip_Skip_Type.skip_iter self) (Seq.(++) s visited) (C04Skip_Skip_Type.skip_iter o) /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Resolve0.resolve (Seq.get s i)))
  val produces [#"../04_skip.rs" 36 4 36 64] (self : C04Skip_Skip_Type.t_skip i) (visited : Seq.seq Item0.item) (o : C04Skip_Skip_Type.t_skip i) : bool
    ensures { result = produces self visited o }
    
end
module C04Skip_Skip_Type_Inv
  type i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  axiom inv_t_skip [@rewrite] : forall self : C04Skip_Skip_Type.t_skip i . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv (C04Skip_Skip_Type.skip_iter self))
end
module C04Skip_Impl0_ProducesRefl_Stub
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  function produces_refl [#"../04_skip.rs" 50 4 50 29] (a : C04Skip_Skip_Type.t_skip i) : ()
end
module C04Skip_Impl0_ProducesRefl_Interface
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  function produces_refl [#"../04_skip.rs" 50 4 50 29] (a : C04Skip_Skip_Type.t_skip i) : ()
  val produces_refl [#"../04_skip.rs" 50 4 50 29] (a : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 50 21 50 22] Inv0.inv a}
    ensures { [#"../04_skip.rs" 49 14 49 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C04Skip_Skip_Type.t_skip i . ([#"../04_skip.rs" 50 21 50 22] Inv0.inv a) -> ([#"../04_skip.rs" 49 14 49 39] Produces0.produces a (Seq.empty ) a)
end
module C04Skip_Impl0_ProducesRefl
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  function produces_refl [#"../04_skip.rs" 50 4 50 29] (a : C04Skip_Skip_Type.t_skip i) : () =
    [#"../04_skip.rs" 47 4 47 10] ()
  val produces_refl [#"../04_skip.rs" 50 4 50 29] (a : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 50 21 50 22] Inv0.inv a}
    ensures { [#"../04_skip.rs" 49 14 49 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C04Skip_Skip_Type.t_skip i . ([#"../04_skip.rs" 50 21 50 22] Inv0.inv a) -> ([#"../04_skip.rs" 49 14 49 39] Produces0.produces a (Seq.empty ) a)
end
module C04Skip_Impl0_ProducesRefl_Impl
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = Seq.seq Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = C04Skip_Skip_Type.t_skip i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C04Skip_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C04Skip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Item0.item
  clone C04Skip_Skip_Type_Inv as C04Skip_Skip_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone C04Skip_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve0.resolve
  let rec ghost function produces_refl [#"../04_skip.rs" 50 4 50 29] (a : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 50 21 50 22] Inv0.inv a}
    ensures { [#"../04_skip.rs" 49 14 49 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 47 4 47 10] ()
end
module C04Skip_Impl0_ProducesTrans_Stub
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  clone C04Skip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    
end
module C04Skip_Impl0_ProducesTrans_Interface
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  clone C04Skip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    
  val produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 54 15 54 32] Produces0.produces a ab b}
    requires {[#"../04_skip.rs" 55 15 55 32] Produces0.produces b bc c}
    requires {[#"../04_skip.rs" 57 22 57 23] Inv0.inv a}
    requires {[#"../04_skip.rs" 57 31 57 33] Inv1.inv ab}
    requires {[#"../04_skip.rs" 57 52 57 53] Inv0.inv b}
    requires {[#"../04_skip.rs" 57 61 57 63] Inv1.inv bc}
    requires {[#"../04_skip.rs" 57 82 57 83] Inv0.inv c}
    ensures { [#"../04_skip.rs" 56 14 56 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C04Skip_Skip_Type.t_skip i, ab : Seq.seq Item0.item, b : C04Skip_Skip_Type.t_skip i, bc : Seq.seq Item0.item, c : C04Skip_Skip_Type.t_skip i . ([#"../04_skip.rs" 54 15 54 32] Produces0.produces a ab b) -> ([#"../04_skip.rs" 55 15 55 32] Produces0.produces b bc c) -> ([#"../04_skip.rs" 57 22 57 23] Inv0.inv a) -> ([#"../04_skip.rs" 57 31 57 33] Inv1.inv ab) -> ([#"../04_skip.rs" 57 52 57 53] Inv0.inv b) -> ([#"../04_skip.rs" 57 61 57 63] Inv1.inv bc) -> ([#"../04_skip.rs" 57 82 57 83] Inv0.inv c) -> ([#"../04_skip.rs" 56 14 56 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C04Skip_Impl0_ProducesTrans
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  clone C04Skip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    
   =
    [#"../04_skip.rs" 52 4 52 10] ()
  val produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 54 15 54 32] Produces0.produces a ab b}
    requires {[#"../04_skip.rs" 55 15 55 32] Produces0.produces b bc c}
    requires {[#"../04_skip.rs" 57 22 57 23] Inv0.inv a}
    requires {[#"../04_skip.rs" 57 31 57 33] Inv1.inv ab}
    requires {[#"../04_skip.rs" 57 52 57 53] Inv0.inv b}
    requires {[#"../04_skip.rs" 57 61 57 63] Inv1.inv bc}
    requires {[#"../04_skip.rs" 57 82 57 83] Inv0.inv c}
    ensures { [#"../04_skip.rs" 56 14 56 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C04Skip_Skip_Type.t_skip i, ab : Seq.seq Item0.item, b : C04Skip_Skip_Type.t_skip i, bc : Seq.seq Item0.item, c : C04Skip_Skip_Type.t_skip i . ([#"../04_skip.rs" 54 15 54 32] Produces0.produces a ab b) -> ([#"../04_skip.rs" 55 15 55 32] Produces0.produces b bc c) -> ([#"../04_skip.rs" 57 22 57 23] Inv0.inv a) -> ([#"../04_skip.rs" 57 31 57 33] Inv1.inv ab) -> ([#"../04_skip.rs" 57 52 57 53] Inv0.inv b) -> ([#"../04_skip.rs" 57 61 57 63] Inv1.inv bc) -> ([#"../04_skip.rs" 57 82 57 83] Inv0.inv c) -> ([#"../04_skip.rs" 56 14 56 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C04Skip_Impl0_ProducesTrans_Impl
  type i
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = Seq.seq Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = C04Skip_Skip_Type.t_skip i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone C04Skip_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C04Skip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C04Skip_Skip_Type_Inv as C04Skip_Skip_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Item0.item
  clone C04Skip_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve0.resolve
  let rec ghost function produces_trans [#"../04_skip.rs" 57 4 57 90] (a : C04Skip_Skip_Type.t_skip i) (ab : Seq.seq Item0.item) (b : C04Skip_Skip_Type.t_skip i) (bc : Seq.seq Item0.item) (c : C04Skip_Skip_Type.t_skip i) : ()
    requires {[#"../04_skip.rs" 54 15 54 32] Produces0.produces a ab b}
    requires {[#"../04_skip.rs" 55 15 55 32] Produces0.produces b bc c}
    requires {[#"../04_skip.rs" 57 22 57 23] Inv0.inv a}
    requires {[#"../04_skip.rs" 57 31 57 33] Inv1.inv ab}
    requires {[#"../04_skip.rs" 57 52 57 53] Inv0.inv b}
    requires {[#"../04_skip.rs" 57 61 57 63] Inv1.inv bc}
    requires {[#"../04_skip.rs" 57 82 57 83] Inv0.inv c}
    ensures { [#"../04_skip.rs" 56 14 56 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../04_skip.rs" 52 4 52 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  val take (dest : borrowed t) : t
    requires {Inv0.inv dest}
    ensures { [#"../../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] IsDefault0.is_default ( ^ dest) }
    ensures { Inv1.inv ( ^ dest) }
    ensures { Inv1.inv result }
    
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = borrowed t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Invariant0.invariant' self /\ Inv1.inv ( * self))
end
module C04Skip_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone C04Skip_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../common.rs" 27 26 27 44] Inv0.inv result }
    
end
module Core_Option_Option_Type_Inv
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Option_Option_Type.t_option t
  axiom inv_t_option [@rewrite] : forall self : Core_Option_Option_Type.t_option t . Inv0.inv self = (Invariant0.invariant' self /\ match (self) with
    | Core_Option_Option_Type.C_None -> true
    | Core_Option_Option_Type.C_Some a_0 -> Inv1.inv (Core_Option_Option_Type.some_0 self)
    end)
end
module CreusotContracts_Std1_Num_Impl17_IsDefault_Stub
  use prelude.Int
  use prelude.UIntSize
  predicate is_default (self : usize)
end
module CreusotContracts_Std1_Num_Impl17_IsDefault_Interface
  use prelude.Int
  use prelude.UIntSize
  predicate is_default (self : usize)
  val is_default (self : usize) : bool
    ensures { result = is_default self }
    
end
module CreusotContracts_Std1_Num_Impl17_IsDefault
  use prelude.Int
  use prelude.UIntSize
  predicate is_default (self : usize) =
    [#"../../../../../creusot-contracts/src/std/num.rs" 30 28 30 32] self = (0 : usize)
  val is_default (self : usize) : bool
    ensures { result = is_default self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module CreusotContracts_Invariant_Impl0_Invariant_Stub
  type t
  predicate invariant' (self : t)
end
module CreusotContracts_Invariant_Impl0_Invariant_Interface
  type t
  predicate invariant' (self : t)
  val invariant' (self : t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl0_Invariant
  type t
  predicate invariant' (self : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 21 8 21 12] true
  val invariant' (self : t) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Impl0_IsInhabited_Stub
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool
end
module CreusotContracts_Invariant_Impl0_IsInhabited_Interface
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Impl0_IsInhabited
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  function is_inhabited (_1 : ()) : bool =
    [#"../../../../../creusot-contracts/src/invariant.rs" 32 8 32 12] true
  val is_inhabited (_1 : ()) : bool
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x }
    ensures { [#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] result }
    ensures { result = is_inhabited _1 }
    
  axiom is_inhabited_spec : forall _1 : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 27 14 27 20] is_inhabited _1) && ([#"../../../../../creusot-contracts/src/invariant.rs" 26 4 26 45] exists x : t . Inv0.inv x /\ Invariant0.invariant' x)
end
module C04Skip_Impl0_Next_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C04Skip_Skip_Type.t_skip i
  clone C04Skip_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C04Skip_Impl0_Completed_Stub as Completed0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C04Skip_Skip_Type.t_skip i)
  val next [#"../04_skip.rs" 63 4 63 41] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../04_skip.rs" 63 17 63 21] Inv0.inv self}
    ensures { [#"../04_skip.rs" 59 14 62 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../04_skip.rs" 63 17 63 21] Inv1.inv ( ^ self) }
    ensures { [#"../04_skip.rs" 63 26 63 41] Inv2.inv result }
    
end
module C04Skip_Impl0_Next
  type i
  use prelude.Ghost
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant5 with
    type self = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited5 with
    type self = Seq.seq Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant4 with
    type self = borrowed i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = borrowed i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited4 with
    type self = borrowed i,
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    axiom .
  clone CreusotContracts_Invariant_Impl0_Invariant as Invariant3 with
    type t = borrowed usize
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed usize
  clone CreusotContracts_Invariant_Impl0_IsInhabited as IsInhabited3 with
    type t = borrowed usize,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial1 with
    type t = Item0.item,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited2 with
    type self = Core_Option_Option_Type.t_option Item0.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    axiom .
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited1 with
    type self = C04Skip_Skip_Type.t_skip i,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = borrowed (C04Skip_Skip_Type.t_skip i)
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (C04Skip_Skip_Type.t_skip i)
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = borrowed (C04Skip_Skip_Type.t_skip i),
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = i
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant5.invariant',
    axiom .
  clone TyInv_Borrow as TyInv_Borrow2 with
    type t = i,
    predicate Inv0.inv = Inv5.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = usize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = usize,
    predicate Inv0.inv = Inv4.inv,
    axiom .
  clone TyInv_Borrow as TyInv_Borrow1 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv4.inv,
    axiom .
  clone Core_Option_Option_Type_Inv as Core_Option_Option_Type_Inv0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone C04Skip_Skip_Type_Inv as C04Skip_Skip_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone C04Skip_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C04Skip_Skip_Type.t_skip i,
    predicate Inv0.inv = Inv0.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C04Skip_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C04Skip_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv6.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C04Skip_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Std1_Num_Impl17_IsDefault as IsDefault0
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Item0.item
  clone C04Skip_Impl0_Produces as Produces1 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv6.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Resolve0.resolve = Resolve3.resolve
  clone C04Skip_Impl0_Completed as Completed0 with
    type i = i,
    predicate Inv0.inv = Inv5.inv,
    type Item0.item = Item0.item,
    predicate Inv1.inv = Inv6.inv,
    predicate Produces0.produces = Produces0.produces,
    predicate Resolve0.resolve = Resolve3.resolve,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = C04Skip_Skip_Type.t_skip i
  clone C04Skip_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv2.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty (Seq.seq Item0.item)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone Core_Mem_Take_Interface as Take0 with
    type t = usize,
    predicate Inv0.inv = Inv3.inv,
    predicate IsDefault0.is_default = IsDefault0.is_default,
    predicate Inv1.inv = Inv4.inv
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i))
  let rec cfg next [#"../04_skip.rs" 63 4 63 41] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C04Skip_Skip_Type.t_skip i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../04_skip.rs" 63 17 63 21] Inv0.inv self}
    ensures { [#"../04_skip.rs" 59 14 62 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces1.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../04_skip.rs" 63 17 63 21] Inv1.inv ( ^ self) }
    ensures { [#"../04_skip.rs" 63 26 63 41] Inv2.inv result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option Item0.item;
  var self : borrowed (C04Skip_Skip_Type.t_skip i) = self;
  var old_self : Ghost.ghost_ty (borrowed (C04Skip_Skip_Type.t_skip i));
  var n : usize;
  var _6 : borrowed usize;
  var _7 : borrowed usize;
  var skipped : Ghost.ghost_ty (Seq.seq Item0.item);
  var r : Core_Option_Option_Type.t_option Item0.item;
  var _18 : borrowed i;
  var x : Item0.item;
  var _25 : Ghost.ghost_ty (Seq.seq Item0.item);
  {
    goto BB0
  }
  BB0 {
    old_self <- ([#"../04_skip.rs" 64 23 64 38] Ghost.new self);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self };
    _7 <- borrow_mut (C04Skip_Skip_Type.skip_n ( * self));
    self <- { self with current = (let C04Skip_Skip_Type.C_Skip a b =  * self in C04Skip_Skip_Type.C_Skip a ( ^ _7)) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    n <- ([#"../04_skip.rs" 65 20 65 47] Take0.take _6);
    _6 <- any borrowed usize;
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    skipped <- ([#"../04_skip.rs" 66 26 66 47] Ghost.new (Seq.empty ));
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve skipped };
    goto BB4
  }
  BB4 {
    invariant { [#"../04_skip.rs" 67 20 67 53] Seq.length (Ghost.inner skipped) + UIntSize.to_int n = UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * Ghost.inner old_self)) };
    invariant { [#"../04_skip.rs" 67 8 67 55] Produces0.produces (C04Skip_Skip_Type.skip_iter ( * Ghost.inner old_self)) (Ghost.inner skipped) (C04Skip_Skip_Type.skip_iter ( * self)) };
    invariant { [#"../04_skip.rs" 67 8 67 55] forall i : int . 0 <= i /\ i < Seq.length (Ghost.inner skipped) -> Resolve3.resolve (Seq.get skipped i) };
    invariant { [#"../04_skip.rs" 70 20 70 35] UIntSize.to_int (C04Skip_Skip_Type.skip_n ( * self)) = 0 };
    invariant { [#"../04_skip.rs" 71 20 71 29] Inv0.inv self };
    goto BB5
  }
  BB5 {
    _18 <- borrow_mut (C04Skip_Skip_Type.skip_iter ( * self));
    self <- { self with current = (let C04Skip_Skip_Type.C_Skip a b =  * self in C04Skip_Skip_Type.C_Skip ( ^ _18) b) };
    r <- ([#"../04_skip.rs" 73 20 73 36] Next0.next _18);
    _18 <- any borrowed i;
    goto BB6
  }
  BB6 {
    switch ([#"../04_skip.rs" 74 15 74 21] n = ([#"../04_skip.rs" 74 20 74 21] (0 : usize)))
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    assume { Resolve4.resolve self };
    _0 <- r;
    r <- any Core_Option_Option_Type.t_option Item0.item;
    goto BB15
  }
  BB8 {
    switch (r)
      | Core_Option_Option_Type.C_Some _ -> goto BB10
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve4.resolve self };
    _0 <- r;
    r <- any Core_Option_Option_Type.t_option Item0.item;
    goto BB15
  }
  BB10 {
    goto BB11
  }
  BB11 {
    x <- Core_Option_Option_Type.some_0 r;
    r <- (let Core_Option_Option_Type.C_Some a = r in Core_Option_Option_Type.C_Some (any Item0.item));
    assume { Resolve3.resolve x };
    assume { Resolve5.resolve r };
    _25 <- ([#"../04_skip.rs" 78 26 78 70] Ghost.new (Seq.(++) (Ghost.inner skipped) (Seq.singleton x)));
    goto BB12
  }
  BB12 {
    skipped <- _25;
    _25 <- any Ghost.ghost_ty (Seq.seq Item0.item);
    assume { Resolve2.resolve skipped };
    n <- ([#"../04_skip.rs" 79 16 79 22] n - ([#"../04_skip.rs" 79 21 79 22] (1 : usize)));
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB4
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module C04Skip_Impl0
  type i
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant4 with
    type self = borrowed i
  clone C04Skip_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv8 with
    type t = Item0.item
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv7 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = borrowed i
  clone TyInv_Borrow as TyInv_Borrow1 with
    type t = i,
    predicate Inv0.inv = Inv6.inv,
    predicate Invariant0.invariant' = Invariant4.invariant',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant3 with
    type self = Core_Option_Option_Type.t_option Item0.item
  use C04Skip_Skip_Type as C04Skip_Skip_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = borrowed (C04Skip_Skip_Type.t_skip i)
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = C04Skip_Skip_Type.t_skip i
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant0 with
    type self = Seq.seq Item0.item
  clone C04Skip_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone Core_Option_Option_Type_Inv as Core_Option_Option_Type_Inv0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv4.inv,
    predicate Invariant0.invariant' = Invariant3.invariant',
    predicate Inv1.inv = Inv8.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = borrowed (C04Skip_Skip_Type.t_skip i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C04Skip_Skip_Type.t_skip i,
    predicate Inv0.inv = Inv3.inv,
    predicate Invariant0.invariant' = Invariant2.invariant',
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C04Skip_Skip_Type_Inv as C04Skip_Skip_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Inv1.inv = Inv7.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Item0.item
  clone C04Skip_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Seq.seq Item0.item
  clone CreusotContracts_Logic_Seq_Seq_Type_Inv as CreusotContracts_Logic_Seq_Seq_Type_Inv0 with
    type t = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone C04Skip_Common_Iterator_Item_Type as Item1 with
    type self = C04Skip_Skip_Type.t_skip i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Core_Option_Option_Type.t_option Item0.item
  clone C04Skip_Impl0_Completed as Completed0 with
    type i = i,
    predicate Inv0.inv = Inv6.inv,
    type Item0.item = Item0.item,
    predicate Inv1.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Completed0.completed = Completed1.completed
  clone C04Skip_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    predicate Resolve0.resolve = Resolve0.resolve
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Seq.seq Item0.item
  goal produces_trans_refn : [#"../04_skip.rs" 57 4 57 90] forall a : C04Skip_Skip_Type.t_skip i . forall ab : Seq.seq Item0.item . forall b : C04Skip_Skip_Type.t_skip i . forall bc : Seq.seq Item0.item . forall c : C04Skip_Skip_Type.t_skip i . Inv0.inv bc /\ Inv0.inv ab /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv1.inv c /\ Inv2.inv bc /\ Inv1.inv b /\ Inv2.inv ab /\ Inv1.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal next_refn : [#"../04_skip.rs" 63 4 63 41] forall self : borrowed (C04Skip_Skip_Type.t_skip i) . Inv3.inv self /\ (forall result : Core_Option_Option_Type.t_option Item0.item . Inv4.inv result /\ Inv1.inv ( ^ self) /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> Inv5.inv result /\ match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_refl_refn : [#"../04_skip.rs" 50 4 50 29] forall a : C04Skip_Skip_Type.t_skip i . Inv1.inv a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
end
