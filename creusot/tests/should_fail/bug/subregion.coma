
module Subregion_ListReversalH
  let%span ssubregion0 = "../subregion.rs" 4 16 4 17
  let%span ssubregion1 = "../subregion.rs" 5 16 5 20
  let%span ssubregion2 = "../subregion.rs" 6 15 6 16
  let%span ssubregion3 = "../subregion.rs" 7 22 7 27
  use prelude.Intrinsic
  use prelude.UIntSize
  use prelude.Int
  let rec list_reversal_h (l:usize) (return'  (ret:usize))= (! bb0
    [ bb0 = s0 [ s0 =  [ &r <- [%#ssubregion0] (0 : usize) ] s1 | s1 = bb1 ] 
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [%#ssubregion1] true}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 = UIntSize.ne {l} {[%#ssubregion2] (0 : usize)} (fun (_ret':bool) ->  [ &_7 <- _ret' ] s1)
          | s1 = any [ br0 -> {_7 = false} (! bb4) | br1 -> {_7} (! bb3) ]  ]
          
        | bb3 = s0
          [ s0 = {[@expl:assertion] [%#ssubregion3] false} s1
          | s1 =  [ &x <- r ] s2
          | s2 =  [ &tmp <- l ] s3
          | s3 =  [ &r <- tmp ] s4
          | s4 = bb1 ]
           ]
         ]
      
    | bb4 = s0 [ s0 =  [ &_0 <- r ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : usize = any_l () : usize
    | & l : usize = l
    | & r : usize = any_l () : usize
    | & _7 : bool = any_l () : bool
    | & x : usize = any_l () : usize
    | & tmp : usize = any_l () : usize ]
     [ return' (result:usize)-> (! return' {result}) ] 
end
