
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
  let function ok_0 (self : t_result 't 'e) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok a -> a
      | C_Err _ -> any 't
      end
  let function err_0 (self : t_result 't 'e) : 'e = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ok _ -> any 'e
      | C_Err a -> a
      end
end
module C07Fuse_Fuse_Type
  use prelude.Ghost
  use prelude.Ghost
  use Core_Result_Result_Type as Core_Result_Result_Type
  type t_fuse 'i =
    | C_Fuse (Core_Result_Result_Type.t_result 'i (Ghost.ghost_ty 'i))
    
  let function fuse_iter (self : t_fuse 'i) : Core_Result_Result_Type.t_result 'i (Ghost.ghost_ty 'i)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Fuse a -> a
      end
end
module C07Fuse_Impl0_Inner_Stub
  type i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  function inner [#"../07_fuse.rs" 15 4 15 23] (self : C07Fuse_Fuse_Type.t_fuse i) : i
end
module C07Fuse_Impl0_Inner_Interface
  type i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  function inner [#"../07_fuse.rs" 15 4 15 23] (self : C07Fuse_Fuse_Type.t_fuse i) : i
  val inner [#"../07_fuse.rs" 15 4 15 23] (self : C07Fuse_Fuse_Type.t_fuse i) : i
    ensures { result = inner self }
    
end
module C07Fuse_Impl0_Inner
  type i
  use prelude.Ghost
  use prelude.Ghost
  use Core_Result_Result_Type as Core_Result_Result_Type
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  function inner [#"../07_fuse.rs" 15 4 15 23] (self : C07Fuse_Fuse_Type.t_fuse i) : i =
    [#"../07_fuse.rs" 16 8 19 9] match (C07Fuse_Fuse_Type.fuse_iter self) with
      | Core_Result_Result_Type.C_Ok i -> i
      | Core_Result_Result_Type.C_Err gi -> Ghost.inner gi
      end
  val inner [#"../07_fuse.rs" 15 4 15 23] (self : C07Fuse_Fuse_Type.t_fuse i) : i
    ensures { result = inner self }
    
end
module C07Fuse_Impl1_Completed_Stub
  type i
  use prelude.Borrow
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate completed [#"../07_fuse.rs" 28 4 28 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
end
module C07Fuse_Impl1_Completed_Interface
  type i
  use prelude.Borrow
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate completed [#"../07_fuse.rs" 28 4 28 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i))
  val completed [#"../07_fuse.rs" 28 4 28 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = completed self }
    
end
module C07Fuse_Impl1_Completed
  type i
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Ghost
  use Core_Result_Result_Type as Core_Result_Result_Type
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate completed [#"../07_fuse.rs" 28 4 28 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) =
    [#"../07_fuse.rs" 29 8 29 57] exists x : Ghost.ghost_ty i . C07Fuse_Fuse_Type.fuse_iter ( ^ self) = Core_Result_Result_Type.C_Err x
  val completed [#"../07_fuse.rs" 28 4 28 35] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : bool
    ensures { result = completed self }
    
end
module C07Fuse_Common_Iterator_Item_Type
  type self
  type item
end
module C07Fuse_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C07Fuse_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C07Fuse_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 27 4 27 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module C07Fuse_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C07Fuse_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C07Fuse_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Inv0.inv a}
    ensures { [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Inv0.inv a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C07Fuse_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C07Fuse_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C07Fuse_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = self
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Inv0.inv a}
    requires {[#"../common.rs" 21 52 21 53] Inv0.inv b}
    requires {[#"../common.rs" 21 82 21 83] Inv0.inv c}
    ensures { [#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Inv0.inv a) -> ([#"../common.rs" 21 52 21 53] Inv0.inv b) -> ([#"../common.rs" 21 82 21 83] Inv0.inv c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C07Fuse_Impl1_Produces_Stub
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate produces [#"../07_fuse.rs" 34 4 34 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq Item0.item) (other : C07Fuse_Fuse_Type.t_fuse i)
    
end
module C07Fuse_Impl1_Produces_Interface
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  predicate produces [#"../07_fuse.rs" 34 4 34 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq Item0.item) (other : C07Fuse_Fuse_Type.t_fuse i)
    
  val produces [#"../07_fuse.rs" 34 4 34 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq Item0.item) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces self prod other }
    
end
module C07Fuse_Impl1_Produces
  type i
  use seq.Seq
  use prelude.Ghost
  use prelude.Ghost
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone C07Fuse_Impl0_Inner_Stub as Inner0 with
    type i = i
  use Core_Result_Result_Type as Core_Result_Result_Type
  predicate produces [#"../07_fuse.rs" 34 4 34 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq Item0.item) (other : C07Fuse_Fuse_Type.t_fuse i)
    
   =
    [#"../07_fuse.rs" 35 8 38 9] match (C07Fuse_Fuse_Type.fuse_iter self) with
      | Core_Result_Result_Type.C_Err _ -> prod = Seq.empty  /\ C07Fuse_Fuse_Type.fuse_iter other = C07Fuse_Fuse_Type.fuse_iter self
      | Core_Result_Result_Type.C_Ok i -> Produces0.produces i prod (Inner0.inner other)
      end
  val produces [#"../07_fuse.rs" 34 4 34 65] (self : C07Fuse_Fuse_Type.t_fuse i) (prod : Seq.seq Item0.item) (other : C07Fuse_Fuse_Type.t_fuse i) : bool
    ensures { result = produces self prod other }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module Core_Result_Result_Type_Inv
  type t
  type e
  clone CreusotContracts_Invariant_Inv_Stub as Inv2 with
    type t = e
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Core_Result_Result_Type.t_result t e
  axiom inv_t_result [@rewrite] : forall self : Core_Result_Result_Type.t_result t e . Inv0.inv self = match (self) with
    | Core_Result_Result_Type.C_Ok a_0 -> Inv1.inv (Core_Result_Result_Type.ok_0 self)
    | Core_Result_Result_Type.C_Err a_0 -> Inv2.inv (Core_Result_Result_Type.err_0 self)
    end
end
module TyInv_Borrow
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed t
  axiom inv_borrow [@rewrite] : forall self : borrowed t . Inv0.inv self = (Inv1.inv ( * self) /\ Inv1.inv ( ^ self))
end
module C07Fuse_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C07Fuse_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C07Fuse_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C07Fuse_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C07Fuse_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C07Fuse_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Inv0.inv self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Ghost_Ghost_Type_Inv
  type t
  use prelude.Ghost
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = Ghost.ghost_ty t
  axiom inv_t_ghost [@rewrite] : forall self : Ghost.ghost_ty t . Inv0.inv self = Inv1.inv (Ghost.inner self)
end
module C07Fuse_Fuse_Type_Inv
  type i
  use prelude.Ghost
  use prelude.Ghost
  use Core_Result_Result_Type as Core_Result_Result_Type
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  axiom inv_t_fuse [@rewrite] : forall self : C07Fuse_Fuse_Type.t_fuse i . Inv0.inv self = Inv1.inv (C07Fuse_Fuse_Type.fuse_iter self)
end
module C07Fuse_Impl1_Next_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C07Fuse_Impl1_Completed_Stub as Completed0 with
    type i = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  val next [#"../07_fuse.rs" 45 4 45 44] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../07_fuse.rs" 45 17 45 21] Inv0.inv self}
    ensures { [#"../07_fuse.rs" 41 14 44 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C07Fuse_Impl1_Next
  type i
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.Ghost
  use Core_Result_Result_Type as Core_Result_Result_Type
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  clone CreusotContracts_Invariant_Inv_Interface as Inv6 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone C07Fuse_Fuse_Type_Inv as C07Fuse_Fuse_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv6.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv5 with
    type t = Ghost.ghost_ty i
  clone CreusotContracts_Ghost_Ghost_Type_Inv as CreusotContracts_Ghost_Ghost_Type_Inv0 with
    type t = i,
    predicate Inv0.inv = Inv5.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone C07Fuse_Impl0_Inner as Inner0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = borrowed i
  clone TyInv_Borrow as TyInv_Borrow2 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C07Fuse_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C07Fuse_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C07Fuse_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  clone TyInv_Borrow as TyInv_Borrow1 with
    type t = C07Fuse_Fuse_Type.t_fuse i,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv6.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (Core_Result_Result_Type.t_result i (Ghost.ghost_ty i))
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i),
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone Core_Result_Result_Type_Inv as Core_Result_Result_Type_Inv0 with
    type t = i,
    type e = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv5.inv,
    axiom .
  clone C07Fuse_Impl1_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    function Inner0.inner = Inner0.inner,
    predicate Produces0.produces = Produces1.produces
  clone C07Fuse_Impl1_Completed as Completed0 with
    type i = i
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = i
  clone C07Fuse_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Inv0.inv = Inv4.inv,
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  let rec cfg next [#"../07_fuse.rs" 45 4 45 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../07_fuse.rs" 45 17 45 21] Inv2.inv self}
    ensures { [#"../07_fuse.rs" 41 14 44 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option Item0.item;
  var self : borrowed (C07Fuse_Fuse_Type.t_fuse i) = self;
  var _3 : borrowed (Core_Result_Result_Type.t_result i (Ghost.ghost_ty i));
  var iter : borrowed i;
  var _6 : Core_Option_Option_Type.t_option Item0.item;
  var _7 : borrowed i;
  var _10 : Ghost.ghost_ty i;
  var x : Core_Option_Option_Type.t_option Item0.item;
  {
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (C07Fuse_Fuse_Type.fuse_iter ( * self));
    self <- { self with current = (let C07Fuse_Fuse_Type.C_Fuse a =  * self in C07Fuse_Fuse_Type.C_Fuse ( ^ _3)) };
    assume { Inv0.inv ( ^ _3) };
    switch ( * _3)
      | Core_Result_Result_Type.C_Ok _ -> goto BB1
      | Core_Result_Result_Type.C_Err _ -> goto BB2
      end
  }
  BB1 {
    iter <- borrow_mut (Core_Result_Result_Type.ok_0 ( * _3));
    _3 <- { _3 with current = (let Core_Result_Result_Type.C_Ok a =  * _3 in Core_Result_Result_Type.C_Ok ( ^ iter)) };
    assume { Inv3.inv ( ^ iter) };
    _7 <- borrow_mut ( * iter);
    iter <- { iter with current = ( ^ _7) };
    assume { Inv3.inv ( ^ _7) };
    _6 <- ([#"../07_fuse.rs" 48 30 48 41] Next0.next _7);
    _7 <- any borrowed i;
    goto BB5
  }
  BB2 {
    goto BB4
  }
  BB3 {
    assert { Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    assert { Inv2.inv self };
    assume { Resolve1.resolve self };
    absurd
  }
  BB4 {
    assert { Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    _0 <- Core_Option_Option_Type.C_None;
    assert { Inv2.inv self };
    assume { Resolve1.resolve self };
    goto BB16
  }
  BB5 {
    assert { Inv4.inv iter };
    assume { Resolve2.resolve iter };
    assert { Inv1.inv _3 };
    assume { Resolve0.resolve _3 };
    switch (_6)
      | Core_Option_Option_Type.C_None -> goto BB6
      | _ -> goto BB7
      end
  }
  BB6 {
    goto BB8
  }
  BB7 {
    assert { Inv2.inv self };
    assume { Resolve1.resolve self };
    x <- _6;
    _6 <- any Core_Option_Option_Type.t_option Item0.item;
    _0 <- x;
    x <- any Core_Option_Option_Type.t_option Item0.item;
    goto BB13
  }
  BB8 {
    assume { Resolve3.resolve _6 };
    _10 <- ([#"../07_fuse.rs" 50 36 50 52] Ghost.new ( * iter));
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    self <- { self with current = (let C07Fuse_Fuse_Type.C_Fuse a =  * self in C07Fuse_Fuse_Type.C_Fuse (Core_Result_Result_Type.C_Err _10)) };
    _10 <- any Ghost.ghost_ty i;
    assert { Inv0.inv (C07Fuse_Fuse_Type.fuse_iter ( * self)) };
    assume { Resolve4.resolve (C07Fuse_Fuse_Type.fuse_iter ( * self)) };
    assert { Inv2.inv self };
    assume { Resolve1.resolve self };
    goto BB12
  }
  BB12 {
    _0 <- Core_Option_Option_Type.C_None;
    goto BB14
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
module C07Fuse_Impl1_ProducesRefl_Stub
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  function produces_refl [#"../07_fuse.rs" 61 4 61 29] (a : C07Fuse_Fuse_Type.t_fuse i) : ()
end
module C07Fuse_Impl1_ProducesRefl_Interface
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  function produces_refl [#"../07_fuse.rs" 61 4 61 29] (a : C07Fuse_Fuse_Type.t_fuse i) : ()
  val produces_refl [#"../07_fuse.rs" 61 4 61 29] (a : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 61 21 61 22] Inv0.inv a}
    ensures { [#"../07_fuse.rs" 60 14 60 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 61 21 61 22] Inv0.inv a) -> ([#"../07_fuse.rs" 60 14 60 39] Produces0.produces a (Seq.empty ) a)
end
module C07Fuse_Impl1_ProducesRefl
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  function produces_refl [#"../07_fuse.rs" 61 4 61 29] (a : C07Fuse_Fuse_Type.t_fuse i) : () =
    [#"../07_fuse.rs" 58 4 58 10] ()
  val produces_refl [#"../07_fuse.rs" 61 4 61 29] (a : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 61 21 61 22] Inv0.inv a}
    ensures { [#"../07_fuse.rs" 60 14 60 39] Produces0.produces a (Seq.empty ) a }
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 61 21 61 22] Inv0.inv a) -> ([#"../07_fuse.rs" 60 14 60 39] Produces0.produces a (Seq.empty ) a)
end
module C07Fuse_Impl1_ProducesRefl_Impl
  type i
  use seq.Seq
  use prelude.Ghost
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Ghost.ghost_ty i
  clone CreusotContracts_Ghost_Ghost_Type_Inv as CreusotContracts_Ghost_Ghost_Type_Inv0 with
    type t = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  clone Core_Result_Result_Type_Inv as Core_Result_Result_Type_Inv0 with
    type t = i,
    type e = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    axiom .
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C07Fuse_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv2.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C07Fuse_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone C07Fuse_Impl0_Inner as Inner0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone C07Fuse_Fuse_Type_Inv as C07Fuse_Fuse_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C07Fuse_Impl1_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    function Inner0.inner = Inner0.inner,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_refl [#"../07_fuse.rs" 61 4 61 29] (a : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 61 21 61 22] Inv0.inv a}
    ensures { [#"../07_fuse.rs" 60 14 60 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_fuse.rs" 58 4 58 10] ()
end
module C07Fuse_Impl1_ProducesTrans_Stub
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../07_fuse.rs" 68 4 68 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq Item0.item) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq Item0.item) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    
end
module C07Fuse_Impl1_ProducesTrans_Interface
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../07_fuse.rs" 68 4 68 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq Item0.item) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq Item0.item) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    
  val produces_trans [#"../07_fuse.rs" 68 4 68 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq Item0.item) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq Item0.item) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 65 15 65 32] Produces0.produces a ab b}
    requires {[#"../07_fuse.rs" 66 15 66 32] Produces0.produces b bc c}
    requires {[#"../07_fuse.rs" 68 22 68 23] Inv0.inv a}
    requires {[#"../07_fuse.rs" 68 52 68 53] Inv0.inv b}
    requires {[#"../07_fuse.rs" 68 82 68 83] Inv0.inv c}
    ensures { [#"../07_fuse.rs" 67 14 67 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C07Fuse_Fuse_Type.t_fuse i, ab : Seq.seq Item0.item, b : C07Fuse_Fuse_Type.t_fuse i, bc : Seq.seq Item0.item, c : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 65 15 65 32] Produces0.produces a ab b) -> ([#"../07_fuse.rs" 66 15 66 32] Produces0.produces b bc c) -> ([#"../07_fuse.rs" 68 22 68 23] Inv0.inv a) -> ([#"../07_fuse.rs" 68 52 68 53] Inv0.inv b) -> ([#"../07_fuse.rs" 68 82 68 83] Inv0.inv c) -> ([#"../07_fuse.rs" 67 14 67 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C07Fuse_Impl1_ProducesTrans
  type i
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../07_fuse.rs" 68 4 68 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq Item0.item) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq Item0.item) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    
   =
    [#"../07_fuse.rs" 63 4 63 10] ()
  val produces_trans [#"../07_fuse.rs" 68 4 68 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq Item0.item) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq Item0.item) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 65 15 65 32] Produces0.produces a ab b}
    requires {[#"../07_fuse.rs" 66 15 66 32] Produces0.produces b bc c}
    requires {[#"../07_fuse.rs" 68 22 68 23] Inv0.inv a}
    requires {[#"../07_fuse.rs" 68 52 68 53] Inv0.inv b}
    requires {[#"../07_fuse.rs" 68 82 68 83] Inv0.inv c}
    ensures { [#"../07_fuse.rs" 67 14 67 42] Produces0.produces a (Seq.(++) ab bc) c }
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C07Fuse_Fuse_Type.t_fuse i, ab : Seq.seq Item0.item, b : C07Fuse_Fuse_Type.t_fuse i, bc : Seq.seq Item0.item, c : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 65 15 65 32] Produces0.produces a ab b) -> ([#"../07_fuse.rs" 66 15 66 32] Produces0.produces b bc c) -> ([#"../07_fuse.rs" 68 22 68 23] Inv0.inv a) -> ([#"../07_fuse.rs" 68 52 68 53] Inv0.inv b) -> ([#"../07_fuse.rs" 68 82 68 83] Inv0.inv c) -> ([#"../07_fuse.rs" 67 14 67 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C07Fuse_Impl1_ProducesTrans_Impl
  type i
  use seq.Seq
  use prelude.Ghost
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = Ghost.ghost_ty i
  clone CreusotContracts_Ghost_Ghost_Type_Inv as CreusotContracts_Ghost_Ghost_Type_Inv0 with
    type t = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  clone Core_Result_Result_Type_Inv as Core_Result_Result_Type_Inv0 with
    type t = i,
    type e = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    predicate Inv2.inv = Inv3.inv,
    axiom .
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C07Fuse_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv2.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C07Fuse_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Inv0.inv = Inv2.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone C07Fuse_Fuse_Type_Inv as C07Fuse_Fuse_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C07Fuse_Impl0_Inner as Inner0 with
    type i = i
  clone C07Fuse_Impl1_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    function Inner0.inner = Inner0.inner,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_trans [#"../07_fuse.rs" 68 4 68 90] (a : C07Fuse_Fuse_Type.t_fuse i) (ab : Seq.seq Item0.item) (b : C07Fuse_Fuse_Type.t_fuse i) (bc : Seq.seq Item0.item) (c : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 65 15 65 32] Produces0.produces a ab b}
    requires {[#"../07_fuse.rs" 66 15 66 32] Produces0.produces b bc c}
    requires {[#"../07_fuse.rs" 68 22 68 23] Inv0.inv a}
    requires {[#"../07_fuse.rs" 68 52 68 53] Inv0.inv b}
    requires {[#"../07_fuse.rs" 68 82 68 83] Inv0.inv c}
    ensures { [#"../07_fuse.rs" 67 14 67 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_fuse.rs" 63 4 63 10] ()
end
module C07Fuse_Impl3_IsFused_Stub
  type i
  use prelude.Borrow
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C07Fuse_Impl1_Completed_Stub as Completed0 with
    type i = i
  function is_fused [#"../07_fuse.rs" 89 4 89 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq Item0.item) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    
end
module C07Fuse_Impl3_IsFused_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C07Fuse_Impl1_Completed_Stub as Completed0 with
    type i = i
  function is_fused [#"../07_fuse.rs" 89 4 89 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq Item0.item) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    
  val is_fused [#"../07_fuse.rs" 89 4 89 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq Item0.item) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 86 15 86 31] Completed0.completed self}
    requires {[#"../07_fuse.rs" 87 15 87 44] Produces0.produces ( ^ self) steps next}
    requires {[#"../07_fuse.rs" 89 21 89 25] Inv0.inv self}
    requires {[#"../07_fuse.rs" 89 51 89 55] Inv1.inv next}
    ensures { [#"../07_fuse.rs" 88 14 88 50] steps = Seq.empty  /\  ^ self = next }
    ensures { result = is_fused self steps next }
    
  axiom is_fused_spec : forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i), steps : Seq.seq Item0.item, next : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 86 15 86 31] Completed0.completed self) -> ([#"../07_fuse.rs" 87 15 87 44] Produces0.produces ( ^ self) steps next) -> ([#"../07_fuse.rs" 89 21 89 25] Inv0.inv self) -> ([#"../07_fuse.rs" 89 51 89 55] Inv1.inv next) -> ([#"../07_fuse.rs" 88 14 88 50] steps = Seq.empty  /\  ^ self = next)
end
module C07Fuse_Impl3_IsFused
  type i
  use prelude.Borrow
  use seq.Seq
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv1 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  clone C07Fuse_Impl1_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C07Fuse_Impl1_Completed_Stub as Completed0 with
    type i = i
  function is_fused [#"../07_fuse.rs" 89 4 89 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq Item0.item) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    
   =
    [#"../07_fuse.rs" 84 4 84 10] ()
  val is_fused [#"../07_fuse.rs" 89 4 89 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq Item0.item) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 86 15 86 31] Completed0.completed self}
    requires {[#"../07_fuse.rs" 87 15 87 44] Produces0.produces ( ^ self) steps next}
    requires {[#"../07_fuse.rs" 89 21 89 25] Inv0.inv self}
    requires {[#"../07_fuse.rs" 89 51 89 55] Inv1.inv next}
    ensures { [#"../07_fuse.rs" 88 14 88 50] steps = Seq.empty  /\  ^ self = next }
    ensures { result = is_fused self steps next }
    
  axiom is_fused_spec : forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i), steps : Seq.seq Item0.item, next : C07Fuse_Fuse_Type.t_fuse i . ([#"../07_fuse.rs" 86 15 86 31] Completed0.completed self) -> ([#"../07_fuse.rs" 87 15 87 44] Produces0.produces ( ^ self) steps next) -> ([#"../07_fuse.rs" 89 21 89 25] Inv0.inv self) -> ([#"../07_fuse.rs" 89 51 89 55] Inv1.inv next) -> ([#"../07_fuse.rs" 88 14 88 50] steps = Seq.empty  /\  ^ self = next)
end
module C07Fuse_Impl3_IsFused_Impl
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Ghost.ghost_ty i
  clone CreusotContracts_Ghost_Ghost_Type_Inv as CreusotContracts_Ghost_Ghost_Type_Inv0 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  clone Core_Result_Result_Type_Inv as Core_Result_Result_Type_Inv0 with
    type t = i,
    type e = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    axiom .
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C07Fuse_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Inv0.inv = Inv3.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C07Fuse_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with
    type self = i,
    predicate Inv0.inv = Inv3.inv,
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone C07Fuse_Fuse_Type_Inv as C07Fuse_Fuse_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C07Fuse_Fuse_Type.t_fuse i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv1.inv,
    axiom .
  clone C07Fuse_Impl0_Inner as Inner0 with
    type i = i
  clone C07Fuse_Impl1_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    function Inner0.inner = Inner0.inner,
    predicate Produces0.produces = Produces1.produces
  clone C07Fuse_Impl1_ProducesTrans as ProducesTrans0 with
    type i = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Inv0.inv = Inv1.inv,
    type Item0.item = Item0.item,
    axiom .
  clone C07Fuse_Impl1_ProducesRefl as ProducesRefl0 with
    type i = i,
    predicate Inv0.inv = Inv1.inv,
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C07Fuse_Impl1_Completed as Completed0 with
    type i = i
  let rec ghost function is_fused [#"../07_fuse.rs" 89 4 89 62] (self : borrowed (C07Fuse_Fuse_Type.t_fuse i)) (steps : Seq.seq Item0.item) (next : C07Fuse_Fuse_Type.t_fuse i) : ()
    requires {[#"../07_fuse.rs" 86 15 86 31] Completed0.completed self}
    requires {[#"../07_fuse.rs" 87 15 87 44] Produces0.produces ( ^ self) steps next}
    requires {[#"../07_fuse.rs" 89 21 89 25] Inv0.inv self}
    requires {[#"../07_fuse.rs" 89 51 89 55] Inv1.inv next}
    ensures { [#"../07_fuse.rs" 88 14 88 50] steps = Seq.empty  /\  ^ self = next }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../07_fuse.rs" 84 4 84 10] ()
end
module C07Fuse_Impl1
  type i
  use seq.Seq
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Ghost.ghost_ty i
  clone CreusotContracts_Ghost_Ghost_Type_Inv as CreusotContracts_Ghost_Ghost_Type_Inv0 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  clone Core_Result_Result_Type_Inv as Core_Result_Result_Type_Inv0 with
    type t = i,
    type e = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    axiom .
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C07Fuse_Fuse_Type.t_fuse i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C07Fuse_Impl0_Inner as Inner0 with
    type i = i
  clone C07Fuse_Fuse_Type_Inv as C07Fuse_Fuse_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone C07Fuse_Common_Iterator_Item_Type as Item1 with
    type self = C07Fuse_Fuse_Type.t_fuse i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C07Fuse_Impl1_Completed as Completed0 with
    type i = i
  clone C07Fuse_Impl1_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    function Inner0.inner = Inner0.inner,
    predicate Produces0.produces = Produces1.produces
  goal produces_refl_refn : [#"../07_fuse.rs" 61 4 61 29] forall a : C07Fuse_Fuse_Type.t_fuse i . Inv0.inv a -> Inv0.inv a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal next_refn : [#"../07_fuse.rs" 45 4 45 44] forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i) . Inv1.inv self -> Inv1.inv self /\ (forall result : Core_Option_Option_Type.t_option Item0.item . match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
  goal produces_trans_refn : [#"../07_fuse.rs" 68 4 68 90] forall a : C07Fuse_Fuse_Type.t_fuse i . forall ab : Seq.seq Item0.item . forall b : C07Fuse_Fuse_Type.t_fuse i . forall bc : Seq.seq Item0.item . forall c : C07Fuse_Fuse_Type.t_fuse i . Inv0.inv c /\ Inv0.inv b /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Inv0.inv c /\ Inv0.inv b /\ Inv0.inv a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
end
module C07Fuse_Impl2
  type i
end
module C07Fuse_Impl3
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.Ghost
  use prelude.Ghost
  clone CreusotContracts_Invariant_Inv_Interface as Inv3 with
    type t = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv4 with
    type t = Ghost.ghost_ty i
  clone CreusotContracts_Ghost_Ghost_Type_Inv as CreusotContracts_Ghost_Ghost_Type_Inv0 with
    type t = i,
    predicate Inv0.inv = Inv4.inv,
    predicate Inv1.inv = Inv3.inv,
    axiom .
  use Core_Result_Result_Type as Core_Result_Result_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv2 with
    type t = Core_Result_Result_Type.t_result i (Ghost.ghost_ty i)
  clone Core_Result_Result_Type_Inv as Core_Result_Result_Type_Inv0 with
    type t = i,
    type e = Ghost.ghost_ty i,
    predicate Inv0.inv = Inv2.inv,
    predicate Inv1.inv = Inv3.inv,
    predicate Inv2.inv = Inv4.inv,
    axiom .
  clone C07Fuse_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C07Fuse_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  use C07Fuse_Fuse_Type as C07Fuse_Fuse_Type
  clone C07Fuse_Impl0_Inner as Inner0 with
    type i = i
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = C07Fuse_Fuse_Type.t_fuse i
  clone CreusotContracts_Invariant_Inv_Interface as Inv1 with
    type t = borrowed (C07Fuse_Fuse_Type.t_fuse i)
  clone TyInv_Borrow as TyInv_Borrow0 with
    type t = C07Fuse_Fuse_Type.t_fuse i,
    predicate Inv0.inv = Inv1.inv,
    predicate Inv1.inv = Inv0.inv,
    axiom .
  clone C07Fuse_Fuse_Type_Inv as C07Fuse_Fuse_Type_Inv0 with
    type i = i,
    predicate Inv0.inv = Inv0.inv,
    predicate Inv1.inv = Inv2.inv,
    axiom .
  clone C07Fuse_Impl1_Completed as Completed0 with
    type i = i
  clone C07Fuse_Impl1_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    function Inner0.inner = Inner0.inner,
    predicate Produces0.produces = Produces1.produces
  goal is_fused_refn : [#"../07_fuse.rs" 89 4 89 62] forall self : borrowed (C07Fuse_Fuse_Type.t_fuse i) . forall steps : Seq.seq Item0.item . forall next : C07Fuse_Fuse_Type.t_fuse i . Inv0.inv next /\ Inv1.inv self /\ Produces0.produces ( ^ self) steps next /\ Completed0.completed self -> Inv0.inv next /\ Inv1.inv self /\ Produces0.produces ( ^ self) steps next /\ Completed0.completed self /\ (forall result : () . steps = Seq.empty  /\  ^ self = next -> steps = Seq.empty  /\  ^ self = next)
end
