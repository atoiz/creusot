
module C11_Test
  type t
  predicate invariant'0 (self : t)
  let rec invariant'0 (self:t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : t)
  let rec inv'0 (_x:t) (return'  (ret:bool))= any [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ] 
  axiom inv'0 : forall x : t . inv'0 x = true
  use prelude.Intrinsic
  let rec test (_1:t) (return'  (ret:()))= {inv'0 _1}
    (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
