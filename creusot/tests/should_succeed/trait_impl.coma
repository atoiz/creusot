
module TraitImpl_Impl0_X
  type b
  type t2
  type t1
  let%span strait_impl0 = "../trait_impl.rs" 25 9 25 13
  predicate invariant'0 (self : (t1, t2))
  let rec invariant'0 (self:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (t1, t2))
  let rec inv'0 (_x:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (t1, t2) . inv'0 x = true
  use prelude.Intrinsic
  let rec x (self:(t1, t2)) (return'  (ret:()))= {[%#strait_impl0] inv'0 self}
    (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module TraitImpl_Impl1_X
  type b
  use prelude.UInt32
  use prelude.Int
  use prelude.Intrinsic
  let rec x (self:uint32) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module TraitImpl_Impl0
  type b
  type t2
  type t1
  let%span strait_impl0 = "../trait_impl.rs" 25 4 25 14
  predicate invariant'0 (self : (t1, t2))
  let rec invariant'0 (self:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  predicate inv'0 (_x : (t1, t2))
  let rec inv'0 (_x:(t1, t2)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  axiom inv'0 : forall x : (t1, t2) . inv'0 x = true
  goal x_refn : [%#strait_impl0] forall self : (t1, t2) . inv'0 self  -> inv'0 self
end
module TraitImpl_Impl1
  type b
  let%span strait_impl0 = "../trait_impl.rs" 29 4 29 14
  goal x_refn : [%#strait_impl0] true
end
