
module C15Enumerate_Enumerate_Type
  use prelude.Int
  use prelude.UIntSize
  type t_enumerate 'i =
    | C_Enumerate 'i usize
    
  let function enumerate_iter (self : t_enumerate 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Enumerate a _ -> a
      end
  let function enumerate_count (self : t_enumerate 'i) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Enumerate _ a -> a
      end
end
module C15Enumerate_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C15Enumerate_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C15Enumerate_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C15Enumerate_Impl0_Completed_Stub
  type i
  use prelude.Borrow
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate completed [#"../15_enumerate.rs" 21 4 21 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
end
module C15Enumerate_Impl0_Completed_Interface
  type i
  use prelude.Borrow
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate completed [#"../15_enumerate.rs" 21 4 21 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i))
end
module C15Enumerate_Impl0_Completed
  type i
  use prelude.Borrow
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate completed [#"../15_enumerate.rs" 21 4 21 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) =
    [#"../15_enumerate.rs" 22 8 22 43] Completed0.completed {current = C15Enumerate_Enumerate_Type.enumerate_iter ( * self); final = C15Enumerate_Enumerate_Type.enumerate_iter ( ^ self)}
  val completed [#"../15_enumerate.rs" 21 4 21 35] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) : bool
    ensures { result = completed self }
    
end
module C15Enumerate_Common_Iterator_Item_Type
  type self
  type item
end
module C15Enumerate_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C15Enumerate_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C15Enumerate_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module C15Enumerate_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C15Enumerate_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Invariant0.invariant' a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Invariant0.invariant' a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C15Enumerate_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Invariant0.invariant' a) -> ([#"../common.rs" 21 52 21 53] Invariant0.invariant' b) -> ([#"../common.rs" 21 82 21 83] Invariant0.invariant' c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C15Enumerate_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Invariant0.invariant' a}
    requires {[#"../common.rs" 21 52 21 53] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 82 21 83] Invariant0.invariant' c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Invariant0.invariant' a) -> ([#"../common.rs" 21 52 21 53] Invariant0.invariant' b) -> ([#"../common.rs" 21 82 21 83] Invariant0.invariant' c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"../../../../../creusot-contracts/src/invariant.rs" 18 8 18 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module C15Enumerate_Impl0_Produces_Stub
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate produces [#"../15_enumerate.rs" 26 4 26 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
end
module C15Enumerate_Impl0_Produces_Interface
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate produces [#"../15_enumerate.rs" 26 4 26 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
end
module C15Enumerate_Impl0_Produces
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate produces [#"../15_enumerate.rs" 26 4 26 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i)
    
   =
    [#"../15_enumerate.rs" 27 8 32 9] Seq.length visited = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count o) - UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) /\ (exists s : Seq.seq Item0.item . Produces0.produces (C15Enumerate_Enumerate_Type.enumerate_iter self) s (C15Enumerate_Enumerate_Type.enumerate_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> UIntSize.to_int (let (a, _) = Seq.get visited i in a) = UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + i /\ (let (_, a) = Seq.get visited i in a) = Seq.get s i))
  val produces [#"../15_enumerate.rs" 26 4 26 64] (self : C15Enumerate_Enumerate_Type.t_enumerate i) (visited : Seq.seq (usize, Item0.item)) (o : C15Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Invariant_Impl1_Invariant_Stub
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant_Interface
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  predicate invariant' (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 34 20 34 62] Invariant0.invariant' ( * self) /\ Invariant0.invariant' ( ^ self)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module Core_Usize_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Usize_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module C15Enumerate_Impl1_Invariant_Stub
  type i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant' [#"../15_enumerate.rs" 66 4 66 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i)
end
module C15Enumerate_Impl1_Invariant_Interface
  type i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant' [#"../15_enumerate.rs" 66 4 66 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i)
end
module C15Enumerate_Impl1_Invariant
  type i
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use prelude.Borrow
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant1 with
    type t = i
  clone Core_Usize_Max_Stub as Max0
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  predicate invariant' [#"../15_enumerate.rs" 66 4 66 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) =
    [#"../15_enumerate.rs" 67 8 71 9] Invariant0.invariant' (C15Enumerate_Enumerate_Type.enumerate_iter self) /\ (forall i : i . Invariant0.invariant' i -> (forall s : Seq.seq Item0.item . Produces0.produces (C15Enumerate_Enumerate_Type.enumerate_iter self) s i -> UIntSize.to_int (C15Enumerate_Enumerate_Type.enumerate_count self) + Seq.length s < UIntSize.to_int Max0.mAX')) /\ (forall i : borrowed i . Invariant1.invariant' i -> Completed0.completed i -> Produces0.produces ( * i) (Seq.empty ) ( ^ i))
  val invariant' [#"../15_enumerate.rs" 66 4 66 30] (self : C15Enumerate_Enumerate_Type.t_enumerate i) : bool
    ensures { result = invariant' self }
    
end
module C15Enumerate_Impl0_ProducesRefl_Stub
  type i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl [#"../15_enumerate.rs" 37 4 37 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
end
module C15Enumerate_Impl0_ProducesRefl_Interface
  type i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl [#"../15_enumerate.rs" 37 4 37 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
  axiom produces_refl_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 37 21 37 22] Invariant0.invariant' a) -> ([#"../15_enumerate.rs" 36 14 36 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Impl0_ProducesRefl
  type i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  function produces_refl [#"../15_enumerate.rs" 37 4 37 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : () =
    [#"../15_enumerate.rs" 35 4 35 10] ()
  val produces_refl [#"../15_enumerate.rs" 37 4 37 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 37 21 37 22] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 37 21 37 22] Invariant0.invariant' a) -> ([#"../15_enumerate.rs" 36 14 36 39] Produces0.produces a (Seq.empty ) a)
end
module C15Enumerate_Impl0_ProducesRefl_Impl
  type i
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant2 with
    type t = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Core_Usize_Max as Max0
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate Completed0.completed = Completed0.completed
  let rec ghost function produces_refl [#"../15_enumerate.rs" 37 4 37 29] (a : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 37 21 37 22] Invariant0.invariant' a}
    ensures { [#"../15_enumerate.rs" 36 14 36 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../15_enumerate.rs" 35 4 35 10] ()
end
module C15Enumerate_Impl0_ProducesTrans_Stub
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../15_enumerate.rs" 43 4 43 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    
end
module C15Enumerate_Impl0_ProducesTrans_Interface
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../15_enumerate.rs" 43 4 43 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    
  axiom produces_trans_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i, ab : Seq.seq (usize, Item0.item), b : C15Enumerate_Enumerate_Type.t_enumerate i, bc : Seq.seq (usize, Item0.item), c : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 40 15 40 32] Produces0.produces a ab b) -> ([#"../15_enumerate.rs" 41 15 41 32] Produces0.produces b bc c) -> ([#"../15_enumerate.rs" 43 22 43 23] Invariant0.invariant' a) -> ([#"../15_enumerate.rs" 43 52 43 53] Invariant0.invariant' b) -> ([#"../15_enumerate.rs" 43 82 43 83] Invariant0.invariant' c) -> ([#"../15_enumerate.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C15Enumerate_Impl0_ProducesTrans
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant0 with
    type i = i
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  function produces_trans [#"../15_enumerate.rs" 43 4 43 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    
   =
    [#"../15_enumerate.rs" 39 4 39 10] ()
  val produces_trans [#"../15_enumerate.rs" 43 4 43 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../15_enumerate.rs" 41 15 41 32] Produces0.produces b bc c}
    requires {[#"../15_enumerate.rs" 43 22 43 23] Invariant0.invariant' a}
    requires {[#"../15_enumerate.rs" 43 52 43 53] Invariant0.invariant' b}
    requires {[#"../15_enumerate.rs" 43 82 43 83] Invariant0.invariant' c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C15Enumerate_Enumerate_Type.t_enumerate i, ab : Seq.seq (usize, Item0.item), b : C15Enumerate_Enumerate_Type.t_enumerate i, bc : Seq.seq (usize, Item0.item), c : C15Enumerate_Enumerate_Type.t_enumerate i . ([#"../15_enumerate.rs" 40 15 40 32] Produces0.produces a ab b) -> ([#"../15_enumerate.rs" 41 15 41 32] Produces0.produces b bc c) -> ([#"../15_enumerate.rs" 43 22 43 23] Invariant0.invariant' a) -> ([#"../15_enumerate.rs" 43 52 43 53] Invariant0.invariant' b) -> ([#"../15_enumerate.rs" 43 82 43 83] Invariant0.invariant' c) -> ([#"../15_enumerate.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C15Enumerate_Impl0_ProducesTrans_Impl
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant2 with
    type t = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Core_Usize_Max as Max0
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant1.invariant' = Invariant2.invariant',
    predicate Completed0.completed = Completed0.completed
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_trans [#"../15_enumerate.rs" 43 4 43 90] (a : C15Enumerate_Enumerate_Type.t_enumerate i) (ab : Seq.seq (usize, Item0.item)) (b : C15Enumerate_Enumerate_Type.t_enumerate i) (bc : Seq.seq (usize, Item0.item)) (c : C15Enumerate_Enumerate_Type.t_enumerate i) : ()
    requires {[#"../15_enumerate.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../15_enumerate.rs" 41 15 41 32] Produces0.produces b bc c}
    requires {[#"../15_enumerate.rs" 43 22 43 23] Invariant0.invariant' a}
    requires {[#"../15_enumerate.rs" 43 52 43 53] Invariant0.invariant' b}
    requires {[#"../15_enumerate.rs" 43 82 43 83] Invariant0.invariant' c}
    ensures { [#"../15_enumerate.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../15_enumerate.rs" 39 4 39 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 23 20 23 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C15Enumerate_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Invariant0.invariant' self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C15Enumerate_Impl0_Next_Interface
  type i
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use seq.Seq
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C15Enumerate_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Impl0_Completed_Stub as Completed0 with
    type i = i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  val next [#"../15_enumerate.rs" 49 4 49 44] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) : Core_Option_Option_Type.t_option (usize, Item0.item)
    requires {[#"../15_enumerate.rs" 49 17 49 21] Invariant0.invariant' self}
    ensures { [#"../15_enumerate.rs" 45 14 48 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C15Enumerate_Impl0_Next
  type i
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.IntSize
  use seq.Seq
  clone Core_Usize_Max as Max0
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant3 with
    type t = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant2 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Completed0.completed = Completed1.completed
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Core_Option_Option_Type.t_option Item0.item
  clone C15Enumerate_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant3.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  clone C15Enumerate_Impl0_Completed as Completed0 with
    type i = i,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant0 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i,
    predicate Invariant0.invariant' = Invariant2.invariant'
  let rec cfg next [#"../15_enumerate.rs" 49 4 49 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i)) : Core_Option_Option_Type.t_option (usize, Item0.item)
    requires {[#"../15_enumerate.rs" 49 17 49 21] Invariant0.invariant' self}
    ensures { [#"../15_enumerate.rs" 45 14 48 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (usize, Item0.item);
  var self_1 : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i);
  var _3 : Core_Option_Option_Type.t_option Item0.item;
  var _4 : borrowed i;
  var _5 : isize;
  var x_6 : Item0.item;
  var n_7 : usize;
  var _8 : (usize, Item0.item);
  var _9 : usize;
  var _10 : Item0.item;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut (C15Enumerate_Enumerate_Type.enumerate_iter ( * self_1));
    self_1 <- { self_1 with current = (let C15Enumerate_Enumerate_Type.C_Enumerate a b =  * self_1 in C15Enumerate_Enumerate_Type.C_Enumerate ( ^ _4) b) };
    assume { Invariant1.invariant' ( ^ _4) };
    _3 <- ([#"../15_enumerate.rs" 50 14 50 30] Next0.next _4);
    goto BB1
  }
  BB1 {
    switch (_3)
      | Core_Option_Option_Type.C_None -> goto BB2
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      end
  }
  BB2 {
    goto BB5
  }
  BB3 {
    x_6 <- Core_Option_Option_Type.some_0 _3;
    _3 <- (let Core_Option_Option_Type.C_Some a = _3 in Core_Option_Option_Type.C_Some (any Item0.item));
    assume { Resolve0.resolve _3 };
    n_7 <- C15Enumerate_Enumerate_Type.enumerate_count ( * self_1);
    self_1 <- { self_1 with current = (let C15Enumerate_Enumerate_Type.C_Enumerate a b =  * self_1 in C15Enumerate_Enumerate_Type.C_Enumerate a ([#"../15_enumerate.rs" 54 16 54 31] C15Enumerate_Enumerate_Type.enumerate_count ( * self_1) + ([#"../15_enumerate.rs" 54 30 54 31] (1 : usize)))) };
    assert { Invariant0.invariant' self_1 };
    assume { Resolve1.resolve self_1 };
    _9 <- n_7;
    _10 <- x_6;
    x_6 <- any Item0.item;
    _8 <- (_9, _10);
    goto BB6
  }
  BB4 {
    assume { Resolve0.resolve _3 };
    assert { Invariant0.invariant' self_1 };
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB5 {
    assume { Resolve0.resolve _3 };
    assert { Invariant0.invariant' self_1 };
    assume { Resolve1.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB9
  }
  BB6 {
    _0 <- Core_Option_Option_Type.C_Some _8;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module C15Enumerate_Enumerate_Interface
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant_Stub as Invariant2 with
    type i = i
  clone Core_Usize_Max_Stub as Max0
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant1 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = i
  val enumerate [#"../15_enumerate.rs" 77 0 77 54] (iter : i) : C15Enumerate_Enumerate_Type.t_enumerate i
    requires {[#"../15_enumerate.rs" 75 0 75 75] forall i : borrowed i . Invariant0.invariant' i -> Completed0.completed i -> Produces0.produces ( * i) (Seq.empty ) ( ^ i)}
    requires {[#"../15_enumerate.rs" 76 0 76 93] forall i : i . Invariant1.invariant' i -> (forall s : Seq.seq Item0.item . Produces0.produces iter s i -> Seq.length s < UIntSize.to_int Max0.mAX')}
    requires {[#"../15_enumerate.rs" 77 30 77 34] Invariant1.invariant' iter}
    ensures { [#"../15_enumerate.rs" 77 42 77 54] Invariant2.invariant' result }
    
end
module C15Enumerate_Enumerate
  type i
  use prelude.Borrow
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces0 with
    type self = i,
    type Item0.item = Item0.item
  clone C15Enumerate_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces0.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item,
    axiom .
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed0 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant0 with
    type t = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone Core_Usize_Max as Max0
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Impl1_Invariant as Invariant2 with
    type i = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant1.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed
  let rec cfg enumerate [#"../15_enumerate.rs" 77 0 77 54] [@cfg:stackify] [@cfg:subregion_analysis] (iter : i) : C15Enumerate_Enumerate_Type.t_enumerate i
    requires {[#"../15_enumerate.rs" 75 0 75 75] forall i : borrowed i . Invariant0.invariant' i -> Completed0.completed i -> Produces0.produces ( * i) (Seq.empty ) ( ^ i)}
    requires {[#"../15_enumerate.rs" 76 0 76 93] forall i : i . Invariant1.invariant' i -> (forall s : Seq.seq Item0.item . Produces0.produces iter s i -> Seq.length s < UIntSize.to_int Max0.mAX')}
    requires {[#"../15_enumerate.rs" 77 30 77 34] Invariant1.invariant' iter}
    ensures { [#"../15_enumerate.rs" 77 42 77 54] Invariant2.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C15Enumerate_Enumerate_Type.t_enumerate i;
  var iter_1 : i;
  var _4 : i;
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- iter_1;
    iter_1 <- any i;
    _0 <- C15Enumerate_Enumerate_Type.C_Enumerate _4 ([#"../15_enumerate.rs" 78 29 78 30] (0 : usize));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C15Enumerate_Impl0
  type i
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  clone C15Enumerate_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant3 with
    type t = i,
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone Core_Usize_Max as Max0
  clone C15Enumerate_Common_Iterator_Item_Type as Item0 with
    type self = i
  clone C15Enumerate_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = Item0.item
  use C15Enumerate_Enumerate_Type as C15Enumerate_Enumerate_Type
  clone C15Enumerate_Common_Iterator_Item_Type as Item1 with
    type self = C15Enumerate_Enumerate_Type.t_enumerate i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C15Enumerate_Impl0_Completed as Completed0 with
    type i = i,
    predicate Completed0.completed = Completed1.completed
  clone C15Enumerate_Impl1_Invariant as Invariant0 with
    type i = i,
    predicate Invariant0.invariant' = Invariant2.invariant',
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    val Max0.mAX' = Max0.mAX',
    predicate Invariant1.invariant' = Invariant3.invariant',
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = C15Enumerate_Enumerate_Type.t_enumerate i,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone C15Enumerate_Impl0_Produces as Produces0 with
    type i = i,
    type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces
  goal produces_trans_refn : [#"../15_enumerate.rs" 43 4 43 90] forall a : C15Enumerate_Enumerate_Type.t_enumerate i . forall ab : Seq.seq (usize, Item0.item) . forall b : C15Enumerate_Enumerate_Type.t_enumerate i . forall bc : Seq.seq (usize, Item0.item) . forall c : C15Enumerate_Enumerate_Type.t_enumerate i . Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../15_enumerate.rs" 37 4 37 29] forall a : C15Enumerate_Enumerate_Type.t_enumerate i . Invariant0.invariant' a -> Invariant0.invariant' a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal next_refn : [#"../15_enumerate.rs" 49 4 49 44] forall self : borrowed (C15Enumerate_Enumerate_Type.t_enumerate i) . Invariant1.invariant' self -> Invariant1.invariant' self /\ (forall result : Core_Option_Option_Type.t_option (usize, Item0.item) . match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
end
module C15Enumerate_Impl1
  type i
end
