<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg">
<path name=".."/><path name="06_map_precond.mlcfg"/>
<theory name="C06MapPrecond_Impl1_PreservationInv_Impl" proved="true">
 <goal name="preservation_inv&#39;vc" expl="VC for preservation_inv" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="preservation_inv&#39;vc.0" expl="VC for preservation_inv" proved="true">
  <proof prover="0"><result status="timeout" time="2.00"/></proof>
  <proof prover="2"><result status="timeout" time="1.00" steps="702048"/></proof>
  <proof prover="4"><result status="valid" time="0.20" steps="19499"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_refl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_refl&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="timeout" time="1.00"/></proof>
    <proof prover="2"><result status="valid" time="0.70" steps="467423"/></proof>
    <proof prover="4" obsolete="true"><result status="valid" time="0.11" steps="26101"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="unfold" proved="true" arg1="produces">
  <goal name="produces_trans&#39;vc.0" expl="VC for produces_trans" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="VC for produces_trans" proved="true">
   <proof prover="0"><result status="valid" time="0.01" steps="49"/></proof>
   </goal>
   <goal name="produces_trans&#39;vc.0.1" expl="VC for produces_trans" proved="true">
   <transf name="exists" proved="true" arg1="(s1 ++ s)">
    <goal name="produces_trans&#39;vc.0.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_trans&#39;vc.0.1.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.01" steps="44"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.1" proved="true">
     <proof prover="0"><result status="valid" time="0.01" steps="37"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.2" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="produces_trans&#39;vc.0.1.0.2.0" proved="true">
      <proof prover="0"><result status="valid" time="0.01" steps="42"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.3" proved="true">
     <transf name="exists" proved="true" arg1="(fs1++fs)">
      <goal name="produces_trans&#39;vc.0.1.0.3.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_trans&#39;vc.0.1.0.3.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="44"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="591"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="73"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.3" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="252"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.4" proved="true">
       <proof prover="0"><result status="valid" time="0.02" steps="212"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.5" proved="true">
       <proof prover="0"><result status="valid" time="0.15" steps="570"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.6" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H10" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.3.0.6.0.0.0" proved="true">
          <proof prover="0"><result status="valid" time="1.66" steps="5989"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.3.0.7" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H10" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.3.0.7.0.0.0" proved="true">
          <proof prover="0"><result status="valid" time="1.67" steps="5992"/></proof>
          <proof prover="2"><result status="failure" time="0.00"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOne_Impl">
 <goal name="produces_one&#39;vc" expl="VC for produces_one">
 <transf name="split_vc" >
  <goal name="produces_one&#39;vc.0" expl="postcondition">
  <transf name="split_vc" >
   <goal name="produces_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="produces">
    <goal name="produces_one&#39;vc.0.0.0" expl="VC for produces_one" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_one&#39;vc.0.0.0.0" expl="VC for produces_one" proved="true">
     <proof prover="0"><result status="valid" time="0.01" steps="16"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.1" expl="VC for produces_one" proved="true">
     <transf name="exists" proved="true" arg1="(singleton e)">
      <goal name="produces_one&#39;vc.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_one&#39;vc.0.0.0.1.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="20"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.01" steps="12"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.2" proved="true">
       <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
        <goal name="produces_one&#39;vc.0.0.0.1.0.2.0" proved="true">
        <proof prover="0"><result status="valid" time="0.01" steps="15"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.3" proved="true">
       <transf name="exists" proved="true" arg1="(singleton f)">
        <goal name="produces_one&#39;vc.0.0.0.1.0.3.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.0" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="22"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.1" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="21"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.2" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="18"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.3" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="19"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.4" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="22"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.5" proved="true">
         <proof prover="0"><result status="valid" time="0.01" steps="76"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.6" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.6.0" proved="true">
          <proof prover="0"><result status="valid" time="0.03" steps="420"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.7" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.3.0.7.0" proved="true">
          <proof prover="0"><result status="valid" time="0.03" steps="425"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="produces_one&#39;vc.0.1" expl="postcondition">
   <transf name="use_th" arg1="seq.FreeMonoid">
    <goal name="produces_one&#39;vc.0.1.0" expl="postcondition">
    <proof prover="2" obsolete="true"><result status="valid" time="0.23" steps="295235"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOneInvariant_Impl">
 <goal name="produces_one_invariant&#39;vc" expl="VC for produces_one_invariant">
 <transf name="rewrite" arg1="inv_t_map">
  <goal name="produces_one_invariant&#39;vc.0" expl="VC for produces_one_invariant">
  <transf name="rewrite" arg1="inv_t_map">
   <goal name="produces_one_invariant&#39;vc.0.0" expl="VC for produces_one_invariant">
   <transf name="unfold" arg1="invariant&#39;">
    <goal name="produces_one_invariant&#39;vc.0.0.0" expl="VC for produces_one_invariant">
    <transf name="unfold" arg1="next_precondition">
     <goal name="produces_one_invariant&#39;vc.0.0.0.0" expl="VC for produces_one_invariant">
     <transf name="unfold" arg1="preservation_inv">
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.0" expl="VC for produces_one_invariant">
      <transf name="unfold" arg1="produces_one">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0" expl="VC for produces_one_invariant">
       <transf name="split_vc" >
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.0" expl="VC for produces_one_invariant">
        <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="20"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1" expl="VC for produces_one_invariant">
        <transf name="use_th" arg1="seq.FreeMonoid">
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0" expl="VC for produces_one_invariant">
         <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
         <proof prover="2" obsolete="true"><result status="valid" time="0.94" steps="972646"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2" expl="VC for produces_one_invariant">
        <transf name="use_th" arg1="seq.FreeMonoid">
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2.0" expl="VC for produces_one_invariant">
         <proof prover="0" obsolete="true"><result status="valid" time="0.47" steps="4021"/></proof>
         <proof prover="3" obsolete="true"><result status="valid" time="0.56" steps="56077"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.3" expl="VC for produces_one_invariant">
        <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="18"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.4" expl="VC for produces_one_invariant">
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_Next">
 <goal name="next&#39;vc" expl="VC for next">
 <transf name="split_vc" >
  <goal name="next&#39;vc.0" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.05" steps="137"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="assertion">
  </goal>
  <goal name="next&#39;vc.2" expl="assertion">
  <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="447"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="66"/></proof>
  </goal>
  <goal name="next&#39;vc.4" expl="assertion">
  <transf name="split_vc" >
   <goal name="next&#39;vc.4.0" expl="assertion">
   <proof prover="0" obsolete="true"><result status="valid" time="0.16" steps="376"/></proof>
   </goal>
   <goal name="next&#39;vc.6.0" expl="postcondition">
   <proof prover="0"><result status="valid" time="0.02" steps="149"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.5" expl="unreachable point">
  <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="next&#39;vc.6" expl="postcondition">
  <transf name="split_vc" >
   <goal name="next&#39;vc.6.0" expl="postcondition">
   <transf name="split_vc" >
    <goal name="next&#39;vc.6.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="112"/></proof>
    </goal>
    <goal name="next&#39;vc.6.0.1" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="186"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="next&#39;vc.6.1" expl="postcondition">
   <transf name="split_vc" >
    <goal name="next&#39;vc.6.1.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="69"/></proof>
    </goal>
    <goal name="next&#39;vc.6.1.1" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="0.93" steps="2993"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.8" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="8"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.09" steps="7236"/></proof>
  </goal>
  <goal name="next&#39;vc.0" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Map">
 <goal name="map&#39;vc" expl="VC for map">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.02"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.00" steps="1016689"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="1.00" steps="163267"/></proof>
 <proof prover="4" obsolete="true"><result status="timeout" time="1.00" steps="119915"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Identity">
 <goal name="identity&#39;vc" expl="VC for identity">
 <proof prover="0" obsolete="true"><result status="valid" time="0.02" steps="293"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment_Closure2" proved="true">
 <goal name="c06MapPrecond_Increment_Closure2&#39;vc" expl="VC for c06MapPrecond_Increment_Closure2" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment">
 <goal name="increment&#39;vc" expl="VC for increment">
 <transf name="split_vc" >
  <goal name="increment&#39;vc.0" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="54"/></proof>
  </goal>
  <goal name="increment&#39;vc.1" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.04" steps="503"/></proof>
  </goal>
  <goal name="increment&#39;vc.2" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="127"/></proof>
  </goal>
  <goal name="increment&#39;vc.3" expl="precondition">
  </goal>
  <goal name="increment&#39;vc.4" expl="precondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="increment&#39;vc.5" expl="assertion">
  </goal>
  <goal name="increment&#39;vc.6" expl="assertion">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.00"/></proof>
  <proof prover="2" obsolete="true"><result status="valid" time="0.10" steps="187514"/></proof>
  <proof prover="3" obsolete="true"><result status="valid" time="0.30" steps="52754"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter_Closure2" proved="true">
 <goal name="c06MapPrecond_Counter_Closure2&#39;vc" expl="VC for c06MapPrecond_Counter_Closure2" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="124"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter">
 <goal name="counter&#39;vc" expl="VC for counter">
 <proof prover="0" obsolete="true"><result status="valid" time="0.20" steps="992"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0">
 <goal name="next_refn">
 <proof prover="0" obsolete="true"><result status="valid" time="0.50" steps="2117"/></proof>
 </goal>
 <goal name="produces_refl_refn">
 <proof prover="0" obsolete="true"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
 <goal name="produces_trans_refn">
 <proof prover="0" obsolete="true"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
</file>
</why3session>
