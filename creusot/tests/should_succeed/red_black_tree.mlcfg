
module RedBlackTree_Color_Type
  type t_color  =
    | C_Red
    | C_Black
    
end
module RedBlackTree_Impl16_Clone_Interface
  use prelude.Borrow
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  val clone' [#"../red_black_tree.rs" 8 9 8 14] (self : RedBlackTree_Color_Type.t_color) : RedBlackTree_Color_Type.t_color
    ensures { [#"../red_black_tree.rs" 8 9 8 14] result = self }
    
end
module RedBlackTree_Impl16_Clone
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  let rec cfg clone' [#"../red_black_tree.rs" 8 9 8 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : RedBlackTree_Color_Type.t_color) : RedBlackTree_Color_Type.t_color
    ensures { [#"../red_black_tree.rs" 8 9 8 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Color_Type.t_color;
  var self_1 : RedBlackTree_Color_Type.t_color;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | RedBlackTree_Color_Type.C_Red -> goto BB1
      | RedBlackTree_Color_Type.C_Black -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _0 <- RedBlackTree_Color_Type.C_Black;
    goto BB5
  }
  BB3 {
    absurd
  }
  BB4 {
    _0 <- RedBlackTree_Color_Type.C_Red;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  type t_node 'k 'v =
    | C_Node (t_tree 'k 'v) (RedBlackTree_Color_Type.t_color) 'k 'v (t_tree 'k 'v)
    with t_tree 'k 'v =
    | C_Tree (Core_Option_Option_Type.t_option (t_node 'k 'v))
    
  let function node_left (self : t_node 'k 'v) : t_tree 'k 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node a _ _ _ _ -> a
      end
  let function node_key (self : t_node 'k 'v) : 'k = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ a _ _ -> a
      end
  let function node_right (self : t_node 'k 'v) : t_tree 'k 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ _ _ a -> a
      end
  let function node_val (self : t_node 'k 'v) : 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ _ a _ -> a
      end
  let function node_color (self : t_node 'k 'v) : RedBlackTree_Color_Type.t_color = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ a _ _ _ -> a
      end
  let function tree_node (self : t_tree 'k 'v) : Core_Option_Option_Type.t_option (t_node 'k 'v)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Tree a -> a
      end
end
module RedBlackTree_Tree_Type
  use export RedBlackTree_Node_Type
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module RedBlackTree_Impl0_HasMapping_Stub
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate has_mapping [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
end
module RedBlackTree_Impl0_HasMapping_Interface
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate has_mapping [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
end
module RedBlackTree_Impl0_HasMapping
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate has_mapping [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping left k v \/ has_mapping right k v \/ k = DeepModel0.deep_model key /\ v = val'
      end
  val has_mapping [#"../red_black_tree.rs" 31 4 31 57] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v) : bool
    ensures { result = has_mapping self k v }
    
end
module RedBlackTree_Impl0_SameMappings_Stub
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate same_mappings [#"../red_black_tree.rs" 42 4 42 43] (self : RedBlackTree_Tree_Type.t_tree k v) (o : RedBlackTree_Tree_Type.t_tree k v)
    
end
module RedBlackTree_Impl0_SameMappings_Interface
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate same_mappings [#"../red_black_tree.rs" 42 4 42 43] (self : RedBlackTree_Tree_Type.t_tree k v) (o : RedBlackTree_Tree_Type.t_tree k v)
    
end
module RedBlackTree_Impl0_SameMappings
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  predicate same_mappings [#"../red_black_tree.rs" 42 4 42 43] (self : RedBlackTree_Tree_Type.t_tree k v) (o : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 43 8 45 9] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
  val same_mappings [#"../red_black_tree.rs" 42 4 42 43] (self : RedBlackTree_Tree_Type.t_tree k v) (o : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = same_mappings self o }
    
end
module RedBlackTree_Impl0_ModelAcc_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function model_acc [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl0_ModelAcc_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function model_acc [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl0_ModelAcc
  type k
  type v
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function model_acc [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 54 12 61 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') in model_acc right accu2
      end
  val model_acc [#"../red_black_tree.rs" 49 4 52 47] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc self accu }
    
end
module RedBlackTree_Impl0_ModelAccHasMapping_Stub
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
end
module RedBlackTree_Impl0_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
  axiom model_acc_has_mapping_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . [#"../red_black_tree.rs" 66 4 67 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : v . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v /\ HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping
  type k
  type v
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
   =
    [#"../red_black_tree.rs" 74 12 82 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping right accu2 k
      end
  val model_acc_has_mapping [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    ensures { result = model_acc_has_mapping self accu k }
    
  axiom model_acc_has_mapping_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . [#"../red_black_tree.rs" 66 4 67 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : v . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v /\ HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  let rec ghost function model_acc_has_mapping [#"../red_black_tree.rs" 68 4 72 5] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    ensures { [#"../red_black_tree.rs" 66 4 67 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : v . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v /\ HasMapping0.has_mapping self k v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 74 12 82 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = DeepModel0.deep_model key in Map.set accu1 b' (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping right accu2 k
      end
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 19 20 19 53] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module RedBlackTree_Impl4_BstInvariantHere_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant_here [#"../red_black_tree.rs" 182 4 182 39] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant_here [#"../red_black_tree.rs" 182 4 182 39] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant_here [#"../red_black_tree.rs" 182 4 182 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 184 12 185 104] (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping (RedBlackTree_Node_Type.node_left self) k v -> LtLog0.lt_log k (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping (RedBlackTree_Node_Type.node_right self) k v -> LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here [#"../red_black_tree.rs" 182 4 182 39] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here self }
    
end
module RedBlackTree_Impl5_BstInvariant_Stub
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate bst_invariant [#"../red_black_tree.rs" 202 4 202 34] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl5_BstInvariant_Interface
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate bst_invariant [#"../red_black_tree.rs" 202 4 202 34] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl5_BstInvariant
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl4_BstInvariantHere_Stub as BstInvariantHere0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate bst_invariant [#"../red_black_tree.rs" 202 4 202 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 204 12 210 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in BstInvariantHere0.bst_invariant_here node /\ bst_invariant left /\ bst_invariant right
      end
  val bst_invariant [#"../red_black_tree.rs" 202 4 202 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = bst_invariant self }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 10 20 10 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 14 14 14 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 14 14 14 64] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 23 14 23 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 23 14 23 61] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate ge_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 28 20 28 53] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 32 14 32 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 32 14 32 61] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate gt_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 37 20 37 56] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 41 14 41 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 41 14 41 64] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 45] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 15 49 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 15 50 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 51 14 51 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 49 15 49 32] CmpLog0.cmp_log x y = o}
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 50 15 50 32] CmpLog0.cmp_log y z = o}
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../../../../creusot-contracts/src/logic/ord.rs" 49 15 49 32] CmpLog0.cmp_log x y = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 50 15 50 32] CmpLog0.cmp_log y z = o) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 51 14 51 31] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 15 55 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 14 56 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 55 15 55 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 55 15 55 45] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 56 14 56 47] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 15 60 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 14 61 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"../../../../creusot-contracts/src/logic/ord.rs" 60 15 60 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"../../../../creusot-contracts/src/logic/ord.rs" 60 15 60 48] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../../../../creusot-contracts/src/logic/ord.rs" 61 14 61 44] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . [#"../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 59] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Stub
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model_acc [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model_acc [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
  axiom has_mapping_model_acc_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 87 15 87 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc
  type k
  type v
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_ModelAccHasMapping_Stub as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model_acc [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
   =
    [#"../red_black_tree.rs" 94 12 103 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  val has_mapping_model_acc [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] BstInvariant0.bst_invariant self}
    ensures { result = has_mapping_model_acc self accu k }
    
  axiom has_mapping_model_acc_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 87 15 87 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 88 4 88 94] forall v : v . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  let rec ghost function has_mapping_model_acc [#"../red_black_tree.rs" 89 4 91 33] (self : RedBlackTree_Tree_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 87 15 87 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 88 4 88 94] forall v : v . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 94 12 103 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = DeepModel0.deep_model key in Map.set accu1 b' (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl3_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function shallow_model [#"../red_black_tree.rs" 170 4 170 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl3_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function shallow_model [#"../red_black_tree.rs" 170 4 170 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl3_ShallowModel
  type k
  type v
  use map.Map
  use map.Const
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function shallow_model [#"../red_black_tree.rs" 170 4 170 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 171 20 171 54] ModelAcc0.model_acc self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model [#"../red_black_tree.rs" 170 4 170 50] (self : RedBlackTree_Tree_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module RedBlackTree_Impl0_HasMappingModel_Stub
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModel_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    
  axiom has_mapping_model_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 108 15 108 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . HasMapping0.has_mapping self k v = (Map.get (ShallowModel0.shallow_model self) k = Core_Option_Option_Type.C_Some v))
end
module RedBlackTree_Impl0_HasMappingModel
  type k
  type v
  use map.Map
  use map.Const
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl0_HasMappingModelAcc_Stub as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone RedBlackTree_Impl0_ModelAccHasMapping_Stub as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function has_mapping_model [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    
   =
    [#"../red_black_tree.rs" 115 12 115 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Core_Option_Option_Type.C_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] BstInvariant0.bst_invariant self}
    ensures { result = has_mapping_model self k }
    
  axiom has_mapping_model_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 108 15 108 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 109 4 109 80] forall v : v . HasMapping0.has_mapping self k v = (Map.get (ShallowModel0.shallow_model self) k = Core_Option_Option_Type.C_Some v))
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function has_mapping_model [#"../red_black_tree.rs" 110 4 112 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 108 15 108 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 109 4 109 80] forall v : v . HasMapping0.has_mapping self k v = (Map.get (ShallowModel0.shallow_model self) k = Core_Option_Option_Type.C_Some v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 115 12 115 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Core_Option_Option_Type.C_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Core_Option_Option_Type.C_None)) k
end
module RedBlackTree_Impl0_HasMappingInj_Stub
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_inj [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    
end
module RedBlackTree_Impl0_HasMappingInj_Interface
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_inj [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    
  axiom has_mapping_inj_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : DeepModelTy0.deepModelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 121 15 121 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 122 15 122 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 123 15 123 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 124 14 124 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl0_HasMappingModel_Stub as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  function has_mapping_inj [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 130 12 130 37] let _ = HasMappingModel0.has_mapping_model self k in match (Map.get (ShallowModel0.shallow_model self) k) with
      | Core_Option_Option_Type.C_None -> ()
      | Core_Option_Option_Type.C_Some _v -> ()
      end
  val has_mapping_inj [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 121 15 121 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 122 15 122 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 123 15 123 38] HasMapping0.has_mapping self k v2}
    ensures { result = has_mapping_inj self k v1 v2 }
    
  axiom has_mapping_inj_spec : forall self : RedBlackTree_Tree_Type.t_tree k v, k : DeepModelTy0.deepModelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 121 15 121 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 122 15 122 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 123 15 123 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 124 14 124 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  let rec ghost function has_mapping_inj [#"../red_black_tree.rs" 125 4 127 33] (self : RedBlackTree_Tree_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 121 15 121 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 122 15 122 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 123 15 123 38] HasMapping0.has_mapping self k v2}
    ensures { [#"../red_black_tree.rs" 124 14 124 22] v1 = v2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 130 12 130 37] let _ = HasMappingModel0.has_mapping_model self k in match (let a' = ShallowModel0.shallow_model self in Map.get a' k) with
      | Core_Option_Option_Type.C_None -> ()
      | Core_Option_Option_Type.C_Some _v -> ()
      end
end
module RedBlackTree_Impl1_HasMapping_Stub
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate has_mapping [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
end
module RedBlackTree_Impl1_HasMapping_Interface
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate has_mapping [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
  axiom has_mapping_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : DeepModelTy0.deepModelTy, v : v . [#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> has_mapping self k v = HasMapping0.has_mapping (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v
end
module RedBlackTree_Impl1_HasMapping
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate has_mapping [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 141 8 144 9] HasMapping0.has_mapping (RedBlackTree_Node_Type.node_left self) k v \/ HasMapping0.has_mapping (RedBlackTree_Node_Type.node_right self) k v \/ k = DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v) : bool
    ensures { result = has_mapping self k v }
    
  axiom has_mapping_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : DeepModelTy0.deepModelTy, v : v . [#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> has_mapping self k v = HasMapping0.has_mapping (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v
end
module RedBlackTree_Impl1_HasMapping_Impl
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  let rec ghost predicate has_mapping [#"../red_black_tree.rs" 140 4 140 57] (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
    ensures { [#"../red_black_tree.rs" 138 4 139 86] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> result = HasMapping0.has_mapping (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 141 8 144 9] HasMapping0.has_mapping (RedBlackTree_Node_Type.node_left self) k v || HasMapping0.has_mapping (RedBlackTree_Node_Type.node_right self) k v || (let b = DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self) in pure {k = b}) && pure {v = RedBlackTree_Node_Type.node_val self}
end
module RedBlackTree_Impl1_SameMappings_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate same_mappings [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
end
module RedBlackTree_Impl1_SameMappings_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate same_mappings [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
end
module RedBlackTree_Impl1_SameMappings
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  predicate same_mappings [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 149 8 151 9] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
  val same_mappings [#"../red_black_tree.rs" 148 4 148 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings self o }
    
end
module RedBlackTree_Impl2_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function shallow_model [#"../red_black_tree.rs" 159 4 159 50] (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl2_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function shallow_model [#"../red_black_tree.rs" 159 4 159 50] (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl2_ShallowModel
  type k
  type v
  use map.Map
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function shallow_model [#"../red_black_tree.rs" 159 4 159 50] (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 160 8 162 9] ModelAcc0.model_acc (RedBlackTree_Node_Type.node_right self) (Map.set (ShallowModel0.shallow_model (RedBlackTree_Node_Type.node_left self)) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self)) (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.node_val self)))
  val shallow_model [#"../red_black_tree.rs" 159 4 159 50] (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module RedBlackTree_Impl4_BstInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant [#"../red_black_tree.rs" 190 4 190 34] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant [#"../red_black_tree.rs" 190 4 190 34] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariant
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl4_BstInvariantHere_Stub as BstInvariantHere0 with
    type k = k,
    type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 190 4 190 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 191 8 193 9] BstInvariantHere0.bst_invariant_here self /\ BstInvariant0.bst_invariant (RedBlackTree_Node_Type.node_left self) /\ BstInvariant0.bst_invariant (RedBlackTree_Node_Type.node_right self)
  val bst_invariant [#"../red_black_tree.rs" 190 4 190 34] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant self }
    
end
module RedBlackTree_Cp_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  type t_cp  =
    | C_CPL (RedBlackTree_Color_Type.t_color)
    | C_CPN (RedBlackTree_Color_Type.t_color) (t_cp) (t_cp)
    
end
module RedBlackTree_Cpn_Stub
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function cpn [#"../red_black_tree.rs" 224 0 224 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
end
module RedBlackTree_Cpn_Interface
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function cpn [#"../red_black_tree.rs" 224 0 224 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
end
module RedBlackTree_Cpn
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function cpn [#"../red_black_tree.rs" 224 0 224 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    
   =
    [#"../red_black_tree.rs" 225 16 225 48] RedBlackTree_Cp_Type.C_CPN c l r
  val cpn [#"../red_black_tree.rs" 224 0 224 36] (c : RedBlackTree_Color_Type.t_color) (l : RedBlackTree_Cp_Type.t_cp) (r : RedBlackTree_Cp_Type.t_cp) : RedBlackTree_Cp_Type.t_cp
    ensures { result = cpn c l r }
    
end
module RedBlackTree_Impl7_Color_Stub
  type k
  type v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function color [#"../red_black_tree.rs" 254 4 254 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
end
module RedBlackTree_Impl7_Color_Interface
  type k
  type v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function color [#"../red_black_tree.rs" 254 4 254 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
end
module RedBlackTree_Impl7_Color
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function color [#"../red_black_tree.rs" 254 4 254 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 256 12 259 13] match (RedBlackTree_Tree_Type.tree_node self) with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color [#"../red_black_tree.rs" 254 4 254 27] (self : RedBlackTree_Tree_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color self }
    
end
module RedBlackTree_Impl8_ColorInvariantHere_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant_here [#"../red_black_tree.rs" 279 4 279 41] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl8_ColorInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant_here [#"../red_black_tree.rs" 279 4 279 41] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl8_ColorInvariantHere
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color0 with
    type k = k,
    type v = v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant_here [#"../red_black_tree.rs" 279 4 279 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 280 20 280 102] Color0.color (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ Color0.color (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here [#"../red_black_tree.rs" 279 4 279 41] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here self }
    
end
module RedBlackTree_Impl7_ColorInvariant_Stub
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate color_invariant [#"../red_black_tree.rs" 264 4 264 36] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl7_ColorInvariant_Interface
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate color_invariant [#"../red_black_tree.rs" 264 4 264 36] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl7_ColorInvariant
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl8_ColorInvariantHere_Stub as ColorInvariantHere0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate color_invariant [#"../red_black_tree.rs" 264 4 264 36] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 266 12 272 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in ColorInvariantHere0.color_invariant_here node /\ color_invariant left /\ color_invariant right
      end
  val color_invariant [#"../red_black_tree.rs" 264 4 264 36] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = color_invariant self }
    
end
module RedBlackTree_Impl6_MatchT_Stub
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t [#"../red_black_tree.rs" 230 4 230 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
end
module RedBlackTree_Impl6_MatchT_Interface
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t [#"../red_black_tree.rs" 230 4 230 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
end
module RedBlackTree_Impl6_MatchT
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_Color_Stub as Color0 with
    type k = k,
    type v = v
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_t [#"../red_black_tree.rs" 230 4 230 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 232 12 237 13] match (self) with
      | RedBlackTree_Cp_Type.C_CPL color -> Color0.color tree = color /\ ColorInvariant0.color_invariant tree
      | RedBlackTree_Cp_Type.C_CPN color l r -> exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ RedBlackTree_Node_Type.node_color node = color /\ match_t l (RedBlackTree_Node_Type.node_left node) /\ match_t r (RedBlackTree_Node_Type.node_right node)
      end
  val match_t [#"../red_black_tree.rs" 230 4 230 52] (self : RedBlackTree_Cp_Type.t_cp) (tree : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = match_t self tree }
    
end
module RedBlackTree_Impl8_ColorInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant [#"../red_black_tree.rs" 284 4 284 36] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl8_ColorInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant [#"../red_black_tree.rs" 284 4 284 36] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl8_ColorInvariant
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl8_ColorInvariantHere_Stub as ColorInvariantHere0 with
    type k = k,
    type v = v
  predicate color_invariant [#"../red_black_tree.rs" 284 4 284 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 285 8 285 112] ColorInvariantHere0.color_invariant_here self /\ ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left self) /\ ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_right self)
  val color_invariant [#"../red_black_tree.rs" 284 4 284 36] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant self }
    
end
module RedBlackTree_Impl6_MatchN_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_n [#"../red_black_tree.rs" 242 4 242 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
end
module RedBlackTree_Impl6_MatchN_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  predicate match_n [#"../red_black_tree.rs" 242 4 242 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
end
module RedBlackTree_Impl6_MatchN
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  predicate match_n [#"../red_black_tree.rs" 242 4 242 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 244 12 247 13] match (self) with
      | RedBlackTree_Cp_Type.C_CPL color -> RedBlackTree_Node_Type.node_color node = color /\ ColorInvariant0.color_invariant node
      | RedBlackTree_Cp_Type.C_CPN color l r -> RedBlackTree_Node_Type.node_color node = color /\ MatchT0.match_t l (RedBlackTree_Node_Type.node_left node) /\ MatchT0.match_t r (RedBlackTree_Node_Type.node_right node)
      end
  val match_n [#"../red_black_tree.rs" 242 4 242 52] (self : RedBlackTree_Cp_Type.t_cp) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n self node }
    
end
module RedBlackTree_Impl9_Height_Stub
  type k
  type v
  use prelude.Int
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function height [#"../red_black_tree.rs" 294 4 294 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
end
module RedBlackTree_Impl9_Height_Interface
  type k
  type v
  use prelude.Int
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function height [#"../red_black_tree.rs" 294 4 294 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
  axiom height_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . [#"../red_black_tree.rs" 293 14 293 25] height self >= 0
end
module RedBlackTree_Impl9_Height
  type k
  type v
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  function height [#"../red_black_tree.rs" 294 4 294 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 296 12 304 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match (color) with
        | RedBlackTree_Color_Type.C_Red -> height left
        | RedBlackTree_Color_Type.C_Black -> height left + 1
        end
      end
  val height [#"../red_black_tree.rs" 294 4 294 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    ensures { result = height self }
    
  axiom height_spec : forall self : RedBlackTree_Tree_Type.t_tree k v . [#"../red_black_tree.rs" 293 14 293 25] height self >= 0
end
module RedBlackTree_Impl9_Height_Impl
  type k
  type v
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  let rec ghost function height [#"../red_black_tree.rs" 294 4 294 26] (self : RedBlackTree_Tree_Type.t_tree k v) : int
    ensures { [#"../red_black_tree.rs" 293 14 293 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 296 12 304 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match (color) with
        | RedBlackTree_Color_Type.C_Red -> height left
        | RedBlackTree_Color_Type.C_Black -> height left + 1
        end
      end
end
module RedBlackTree_Impl10_HeightInvariantHere_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant_here [#"../red_black_tree.rs" 336 4 336 42] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl10_HeightInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant_here [#"../red_black_tree.rs" 336 4 336 42] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl10_HeightInvariantHere
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant_here [#"../red_black_tree.rs" 336 4 336 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 337 20 337 61] Height0.height (RedBlackTree_Node_Type.node_left self) = Height0.height (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here [#"../red_black_tree.rs" 336 4 336 42] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here self }
    
end
module RedBlackTree_Impl9_HeightInvariant_Stub
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate height_invariant [#"../red_black_tree.rs" 309 4 309 37] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl9_HeightInvariant_Interface
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate height_invariant [#"../red_black_tree.rs" 309 4 309 37] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl9_HeightInvariant
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_HeightInvariantHere_Stub as HeightInvariantHere0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate height_invariant [#"../red_black_tree.rs" 309 4 309 37] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 311 12 317 13] match (self) with
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in HeightInvariantHere0.height_invariant_here node /\ height_invariant left /\ height_invariant right
      end
  val height_invariant [#"../red_black_tree.rs" 309 4 309 37] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = height_invariant self }
    
end
module RedBlackTree_Impl10_Height_Stub
  type k
  type v
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  function height [#"../red_black_tree.rs" 326 4 326 26] (self : RedBlackTree_Node_Type.t_node k v) : int
end
module RedBlackTree_Impl10_Height_Interface
  type k
  type v
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  function height [#"../red_black_tree.rs" 326 4 326 26] (self : RedBlackTree_Node_Type.t_node k v) : int
  axiom height_spec : forall self : RedBlackTree_Node_Type.t_node k v . [#"../red_black_tree.rs" 324 4 325 77] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> height self = Height0.height (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node))
end
module RedBlackTree_Impl10_Height
  type k
  type v
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  function height [#"../red_black_tree.rs" 326 4 326 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 328 12 331 13] match (RedBlackTree_Node_Type.node_color self) with
      | RedBlackTree_Color_Type.C_Red -> Height0.height (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> Height0.height (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height [#"../red_black_tree.rs" 326 4 326 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    ensures { result = height self }
    
  axiom height_spec : forall self : RedBlackTree_Node_Type.t_node k v . [#"../red_black_tree.rs" 324 4 325 77] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> height self = Height0.height (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node))
end
module RedBlackTree_Impl10_Height_Impl
  type k
  type v
  use prelude.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  let rec ghost function height [#"../red_black_tree.rs" 326 4 326 26] (self : RedBlackTree_Node_Type.t_node k v) : int
    ensures { [#"../red_black_tree.rs" 324 4 325 77] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> result = Height0.height (RedBlackTree_Tree_Type.C_Tree (Core_Option_Option_Type.C_Some node)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 328 12 331 13] match (RedBlackTree_Node_Type.node_color self) with
      | RedBlackTree_Color_Type.C_Red -> Height0.height (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> Height0.height (RedBlackTree_Node_Type.node_left self) + 1
      end
end
module RedBlackTree_Impl10_HeightInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant [#"../red_black_tree.rs" 341 4 341 37] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl10_HeightInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant [#"../red_black_tree.rs" 341 4 341 37] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl10_HeightInvariant
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_HeightInvariant_Stub as HeightInvariant0 with
    type k = k,
    type v = v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_HeightInvariantHere_Stub as HeightInvariantHere0 with
    type k = k,
    type v = v
  predicate height_invariant [#"../red_black_tree.rs" 341 4 341 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 342 8 342 115] HeightInvariantHere0.height_invariant_here self /\ HeightInvariant0.height_invariant (RedBlackTree_Node_Type.node_left self) /\ HeightInvariant0.height_invariant (RedBlackTree_Node_Type.node_right self)
  val height_invariant [#"../red_black_tree.rs" 341 4 341 37] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant self }
    
end
module RedBlackTree_Impl11_InternalInvariant_Stub
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate internal_invariant [#"../red_black_tree.rs" 353 4 353 43] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl11_InternalInvariant_Interface
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate internal_invariant [#"../red_black_tree.rs" 353 4 353 43] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl11_InternalInvariant
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_HeightInvariant_Stub as HeightInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 353 4 353 43] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 355 12 355 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
  val internal_invariant [#"../red_black_tree.rs" 353 4 353 43] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = internal_invariant self }
    
end
module RedBlackTree_Impl11_Invariant_Stub
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant' [#"../red_black_tree.rs" 360 4 360 34] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl11_Invariant_Interface
  type k
  type v
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  predicate invariant' [#"../red_black_tree.rs" 360 4 360 34] (self : RedBlackTree_Tree_Type.t_tree k v)
end
module RedBlackTree_Impl11_Invariant
  type k
  type v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl7_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl11_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  predicate invariant' [#"../red_black_tree.rs" 360 4 360 34] (self : RedBlackTree_Tree_Type.t_tree k v) =
    [#"../red_black_tree.rs" 362 12 362 88] InternalInvariant0.internal_invariant self /\ ColorInvariant0.color_invariant self /\ Color0.color self = RedBlackTree_Color_Type.C_Black
  val invariant' [#"../red_black_tree.rs" 360 4 360 34] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { result = invariant' self }
    
end
module RedBlackTree_Impl12_InternalInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate internal_invariant [#"../red_black_tree.rs" 372 4 372 43] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl12_InternalInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate internal_invariant [#"../red_black_tree.rs" 372 4 372 43] (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl12_InternalInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_HeightInvariant_Stub as HeightInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl4_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 372 4 372 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 374 12 374 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
  val internal_invariant [#"../red_black_tree.rs" 372 4 372 43] (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module RedBlackTree_Impl13_IsRed_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color0 with
    type k = k,
    type v = v
  val is_red [#"../red_black_tree.rs" 383 4 383 28] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 382 14 382 45] result = (Color0.color self = RedBlackTree_Color_Type.C_Red) }
    
end
module RedBlackTree_Impl13_IsRed
  type k
  type v
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = RedBlackTree_Tree_Type.t_tree k v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color as Color0 with
    type k = k,
    type v = v
  let rec cfg is_red [#"../red_black_tree.rs" 383 4 383 28] [@cfg:stackify] [@cfg:subregion_analysis] (self : RedBlackTree_Tree_Type.t_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 382 14 382 45] result = (Color0.color self = RedBlackTree_Color_Type.C_Red) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : RedBlackTree_Tree_Type.t_tree k v;
  var _3 : isize;
  var _4 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (RedBlackTree_Tree_Type.tree_node self_1)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB6
      end
  }
  BB1 {
    _0 <- ([#"../red_black_tree.rs" 386 17 386 22] false);
    goto BB5
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (RedBlackTree_Node_Type.node_color (Core_Option_Option_Type.some_0 (RedBlackTree_Tree_Type.tree_node self_1)))
      | RedBlackTree_Color_Type.C_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _0 <- ([#"../red_black_tree.rs" 385 49 385 53] true);
    goto BB5
  }
  BB5 {
    return _0
  }
  BB6 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 23 20 23 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = t
  val take (dest : borrowed t) : t
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 15 22 15 37] result =  * dest }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 16 22 16 42] IsDefault0.is_default ( ^ dest) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val unwrap (self : Core_Option_Option_Type.t_option t) : t
    requires {[#"../../../../creusot-contracts/src/std/option.rs" 16 0 113 1] self <> Core_Option_Option_Type.C_None}
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 16 0 113 1] Core_Option_Option_Type.C_Some result = self }
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Borrow
  val swap (x : borrowed t) (y : borrowed t) : ()
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
end
module CreusotContracts_Std1_Option_Impl1_IsDefault_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate is_default (self : Core_Option_Option_Type.t_option t)
end
module CreusotContracts_Std1_Option_Impl1_IsDefault_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate is_default (self : Core_Option_Option_Type.t_option t)
end
module CreusotContracts_Std1_Option_Impl1_IsDefault
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate is_default (self : Core_Option_Option_Type.t_option t) =
    [#"../../../../creusot-contracts/src/std/option.rs" 118 20 118 32] self = Core_Option_Option_Type.C_None
  val is_default (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = is_default self }
    
end
module RedBlackTree_Impl14_RotateRight_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val rotate_right [#"../red_black_tree.rs" 407 4 407 30] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 395 15 395 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 396 15 396 42] Color0.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 397 14 397 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 398 14 398 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 399 14 399 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 400 14 400 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 401 14 401 42] Color0.color (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 402 14 402 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 403 4 406 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
end
module RedBlackTree_Impl14_RotateRight
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Std1_Option_Impl1_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  use prelude.Ghost
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Color_Type.t_color
  clone Core_Mem_Swap_Interface as Swap2 with
    type t = RedBlackTree_Color_Type.t_color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Mem_Swap_Interface as Swap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  let rec cfg rotate_right [#"../red_black_tree.rs" 407 4 407 30] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 395 15 395 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 396 15 396 42] Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 397 14 397 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 398 14 398 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 399 14 399 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 400 14 400 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 401 14 401 42] Color1.color (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 402 14 402 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 403 4 406 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var old_self_11 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _13 : ();
  var x_14 : RedBlackTree_Node_Type.t_node k v;
  var _15 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _18 : ();
  var _19 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _20 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _21 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _22 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _23 : ();
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : ();
  var _28 : borrowed (RedBlackTree_Color_Type.t_color);
  var _29 : borrowed (RedBlackTree_Color_Type.t_color);
  var _30 : borrowed (RedBlackTree_Color_Type.t_color);
  var _31 : borrowed (RedBlackTree_Color_Type.t_color);
  var _32 : ();
  var _34 : RedBlackTree_Tree_Type.t_tree k v;
  var _35 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _36 : RedBlackTree_Node_Type.t_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _13 <- ();
    old_self_11 <- ([#"../red_black_tree.rs" 408 23 408 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_11 };
    _17 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _17)) b c d e) };
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 416 20 416 55] Take0.take _16);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _17 };
    x_14 <- ([#"../red_black_tree.rs" 416 20 416 64] Unwrap0.unwrap _15);
    goto BB3
  }
  BB3 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node ( ^ _20) b c d e) };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _22 <- borrow_mut (RedBlackTree_Node_Type.node_right x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _22));
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _18 <- ([#"../red_black_tree.rs" 423 8 423 52] Swap0.swap _19 _21);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _22 };
    assume { Resolve2.resolve _20 };
    _24 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _24) };
    _26 <- borrow_mut x_14;
    x_14 <-  ^ _26;
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _23 <- ([#"../red_black_tree.rs" 429 8 429 36] Swap1.swap _24 _25);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _26 };
    _29 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a ( ^ _29) c d e) };
    _28 <- borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    _31 <- borrow_mut (RedBlackTree_Node_Type.node_color x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node a ( ^ _31) c d e);
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    _27 <- ([#"../red_black_tree.rs" 430 8 430 53] Swap2.swap _28 _30);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _31 };
    assume { Resolve4.resolve _29 };
    assert { [#"../red_black_tree.rs" 436 8 436 90] HasMapping0.has_mapping (RedBlackTree_Node_Type.node_left ( * Ghost.inner old_self_11)) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self_1))) (RedBlackTree_Node_Type.node_val ( * self_1)) };
    _32 <- ();
    _36 <- x_14;
    x_14 <- any RedBlackTree_Node_Type.t_node k v;
    _35 <- Core_Option_Option_Type.C_Some _36;
    goto BB7
  }
  BB7 {
    _34 <- RedBlackTree_Tree_Type.C_Tree _35;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d _34) };
    _34 <- any RedBlackTree_Tree_Type.t_tree k v;
    assume { Resolve5.resolve (RedBlackTree_Node_Type.node_right ( * self_1)) };
    assume { Resolve6.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl14_RotateLeft_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val rotate_left [#"../red_black_tree.rs" 457 4 457 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 445 15 445 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 446 15 446 43] Color0.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 447 14 447 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 448 14 448 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 449 14 449 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 450 14 450 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 451 14 451 41] Color0.color (RedBlackTree_Node_Type.node_left ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 452 14 452 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 453 4 456 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( ^ self)) = (RedBlackTree_Node_Type.node_left ( * self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key ( * self) }
    
end
module RedBlackTree_Impl14_RotateLeft
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Std1_Option_Impl1_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  use prelude.Ghost
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Color_Type.t_color
  clone Core_Mem_Swap_Interface as Swap2 with
    type t = RedBlackTree_Color_Type.t_color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Mem_Swap_Interface as Swap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  let rec cfg rotate_left [#"../red_black_tree.rs" 457 4 457 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 445 15 445 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 446 15 446 43] Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 447 14 447 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 448 14 448 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 449 14 449 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 450 14 450 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 451 14 451 41] Color1.color (RedBlackTree_Node_Type.node_left ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 452 14 452 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 453 4 456 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( ^ self)) = (RedBlackTree_Node_Type.node_left ( * self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var old_self_11 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _13 : ();
  var x_14 : RedBlackTree_Node_Type.t_node k v;
  var _15 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _18 : ();
  var _19 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _20 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _21 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _22 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _23 : ();
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : ();
  var _28 : borrowed (RedBlackTree_Color_Type.t_color);
  var _29 : borrowed (RedBlackTree_Color_Type.t_color);
  var _30 : borrowed (RedBlackTree_Color_Type.t_color);
  var _31 : borrowed (RedBlackTree_Color_Type.t_color);
  var _32 : ();
  var _34 : RedBlackTree_Tree_Type.t_tree k v;
  var _35 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _36 : RedBlackTree_Node_Type.t_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _13 <- ();
    old_self_11 <- ([#"../red_black_tree.rs" 458 23 458 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_11 };
    _17 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _17))) };
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 459 20 459 56] Take0.take _16);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _17 };
    x_14 <- ([#"../red_black_tree.rs" 459 20 459 65] Unwrap0.unwrap _15);
    goto BB3
  }
  BB3 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _20)) };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _22 <- borrow_mut (RedBlackTree_Node_Type.node_left x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node ( ^ _22) b c d e);
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _18 <- ([#"../red_black_tree.rs" 460 8 460 52] Swap0.swap _19 _21);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _22 };
    assume { Resolve2.resolve _20 };
    _24 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _24) };
    _26 <- borrow_mut x_14;
    x_14 <-  ^ _26;
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _23 <- ([#"../red_black_tree.rs" 461 8 461 36] Swap1.swap _24 _25);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _26 };
    _29 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a ( ^ _29) c d e) };
    _28 <- borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    _31 <- borrow_mut (RedBlackTree_Node_Type.node_color x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node a ( ^ _31) c d e);
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    _27 <- ([#"../red_black_tree.rs" 462 8 462 53] Swap2.swap _28 _30);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _31 };
    assume { Resolve4.resolve _29 };
    assert { [#"../red_black_tree.rs" 463 8 463 91] HasMapping0.has_mapping (RedBlackTree_Node_Type.node_right ( * Ghost.inner old_self_11)) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self_1))) (RedBlackTree_Node_Type.node_val ( * self_1)) };
    _32 <- ();
    _36 <- x_14;
    x_14 <- any RedBlackTree_Node_Type.t_node k v;
    _35 <- Core_Option_Option_Type.C_Some _36;
    goto BB7
  }
  BB7 {
    _34 <- RedBlackTree_Tree_Type.C_Tree _35;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node _34 b c d e) };
    _34 <- any RedBlackTree_Tree_Type.t_tree k v;
    assume { Resolve5.resolve (RedBlackTree_Node_Type.node_left ( * self_1)) };
    assume { Resolve6.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val as_mut (self : borrowed (Core_Option_Option_Type.t_option t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 38 16 38 77]  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 39 16 42 18]  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed t . result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    
end
module RedBlackTree_Impl14_FlipColors_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl7_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val flip_colors [#"../red_black_tree.rs" 481 4 481 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 467 15 467 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 468 15 468 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 469 15 469 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 470 15 470 60] Color0.color (RedBlackTree_Node_Type.node_left ( * self)) = Color0.color (RedBlackTree_Node_Type.node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 471 14 471 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 472 14 472 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 473 14 473 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 474 14 474 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 475 4 477 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 478 4 480 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
end
module RedBlackTree_Impl14_FlipColors
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Color_Type.t_color
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = RedBlackTree_Color_Type.t_color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  let rec cfg flip_colors [#"../red_black_tree.rs" 481 4 481 29] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 467 15 467 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 468 15 468 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 469 15 469 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 470 15 470 60] Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = Color1.color (RedBlackTree_Node_Type.node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 471 14 471 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 472 14 472 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 473 14 473 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 474 14 474 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 475 4 477 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 478 4 480 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : RedBlackTree_Color_Type.t_color;
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : borrowed (RedBlackTree_Color_Type.t_color);
  var _18 : borrowed (RedBlackTree_Color_Type.t_color);
  var _19 : borrowed (RedBlackTree_Color_Type.t_color);
  var _20 : borrowed (RedBlackTree_Color_Type.t_color);
  var _21 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _22 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _23 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _12 <- RedBlackTree_Node_Type.node_color ( * self_1);
    _15 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _15)) b c d e) };
    _14 <- ([#"../red_black_tree.rs" 482 8 482 31] AsMut0.as_mut _15);
    goto BB1
  }
  BB1 {
    _13 <- ([#"../red_black_tree.rs" 482 8 482 40] Unwrap0.unwrap _14);
    goto BB2
  }
  BB2 {
    _13 <- { _13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _13 in RedBlackTree_Node_Type.C_Node a _12 c d e) };
    _12 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve0.resolve _13 };
    _18 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a ( ^ _18) c d e) };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _23 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _23))) };
    _22 <- ([#"../red_black_tree.rs" 483 45 483 69] AsMut0.as_mut _23);
    goto BB3
  }
  BB3 {
    _21 <- ([#"../red_black_tree.rs" 483 45 483 78] Unwrap0.unwrap _22);
    goto BB4
  }
  BB4 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * _21));
    _21 <- { _21 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _21 in RedBlackTree_Node_Type.C_Node a ( ^ _20) c d e) };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _16 <- ([#"../red_black_tree.rs" 483 8 483 85] Swap0.swap _17 _19);
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _21 };
    assume { Resolve1.resolve _20 };
    assume { Resolve1.resolve _18 };
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val as_ref (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 45 16 45 60] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 46 16 48 18] self = Core_Option_Option_Type.C_None \/ (exists r : t . result = Core_Option_Option_Type.C_Some r /\ self = Core_Option_Option_Type.C_Some r) }
    
end
module RedBlackTree_Impl14_Balance_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Cpn_Stub as Cpn0
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val balance [#"../red_black_tree.rs" 505 4 505 25] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 486 15 486 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 487 4 488 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 489 4 490 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 491 4 491 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    ensures { [#"../red_black_tree.rs" 492 14 492 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 4 496 34] ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self)) /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 497 4 498 39] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> MatchN0.match_n (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 499 4 500 63] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 501 4 502 61] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 503 4 504 39] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN0.match_n (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
end
module RedBlackTree_Impl14_Balance
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl14_FlipColors_Interface as FlipColors0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    function Height0.height = Height0.height,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height1.height = Height1.height
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_RotateLeft_Interface as RotateLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    predicate MatchT0.match_t = MatchT0.match_t
  clone RedBlackTree_Cpn as Cpn0
  let rec cfg balance [#"../red_black_tree.rs" 505 4 505 25] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 486 15 486 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 487 4 488 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 489 4 490 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 491 4 491 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    ensures { [#"../red_black_tree.rs" 492 14 492 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 4 496 34] ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self)) /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 497 4 498 39] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> MatchN0.match_n (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 499 4 500 63] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 501 4 502 61] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 503 4 504 39] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN0.match_n (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : ();
  var _15 : bool;
  var _16 : bool;
  var _17 : RedBlackTree_Tree_Type.t_tree k v;
  var _18 : bool;
  var _19 : bool;
  var _20 : RedBlackTree_Tree_Type.t_tree k v;
  var _21 : ();
  var _22 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _23 : ();
  var _24 : bool;
  var _25 : bool;
  var _26 : RedBlackTree_Tree_Type.t_tree k v;
  var _27 : bool;
  var _28 : RedBlackTree_Tree_Type.t_tree k v;
  var _29 : RedBlackTree_Node_Type.t_node k v;
  var _30 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _31 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _32 : ();
  var _33 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _34 : bool;
  var _35 : bool;
  var _36 : RedBlackTree_Tree_Type.t_tree k v;
  var _37 : bool;
  var _38 : RedBlackTree_Tree_Type.t_tree k v;
  var _39 : ();
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _17 <- RedBlackTree_Node_Type.node_right ( * self_1);
    _16 <- ([#"../red_black_tree.rs" 506 11 506 30] IsRed0.is_red _17);
    goto BB4
  }
  BB1 {
    _15 <- ([#"../red_black_tree.rs" 506 11 506 53] false);
    goto BB3
  }
  BB2 {
    _20 <- RedBlackTree_Node_Type.node_left ( * self_1);
    _19 <- ([#"../red_black_tree.rs" 506 35 506 53] IsRed0.is_red _20);
    goto BB5
  }
  BB3 {
    switch (_15)
      | False -> goto BB8
      | True -> goto BB6
      end
  }
  BB4 {
    switch (_16)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    _18 <- not _19;
    _15 <- _18;
    _18 <- any bool;
    goto BB3
  }
  BB6 {
    _22 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _22) };
    _21 <- ([#"../red_black_tree.rs" 507 12 507 30] RotateLeft0.rotate_left _22);
    goto BB7
  }
  BB7 {
    _14 <- ();
    goto BB9
  }
  BB8 {
    _14 <- ();
    goto BB9
  }
  BB9 {
    _26 <- RedBlackTree_Node_Type.node_left ( * self_1);
    _25 <- ([#"../red_black_tree.rs" 510 11 510 29] IsRed0.is_red _26);
    goto BB13
  }
  BB10 {
    _24 <- ([#"../red_black_tree.rs" 510 11 510 79] false);
    goto BB12
  }
  BB11 {
    _31 <- RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1));
    _30 <- ([#"../red_black_tree.rs" 510 33 510 56] AsRef0.as_ref _31);
    goto BB14
  }
  BB12 {
    switch (_24)
      | False -> goto BB19
      | True -> goto BB17
      end
  }
  BB13 {
    switch (_25)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB14 {
    _29 <- ([#"../red_black_tree.rs" 510 33 510 65] Unwrap0.unwrap _30);
    goto BB15
  }
  BB15 {
    _28 <- RedBlackTree_Node_Type.node_left _29;
    assume { Resolve0.resolve _29 };
    _27 <- ([#"../red_black_tree.rs" 510 33 510 79] IsRed0.is_red _28);
    goto BB16
  }
  BB16 {
    _24 <- _27;
    _27 <- any bool;
    goto BB12
  }
  BB17 {
    _33 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 511 12 511 31] RotateRight0.rotate_right _33);
    goto BB18
  }
  BB18 {
    _23 <- ();
    goto BB20
  }
  BB19 {
    _23 <- ();
    goto BB20
  }
  BB20 {
    _36 <- RedBlackTree_Node_Type.node_left ( * self_1);
    _35 <- ([#"../red_black_tree.rs" 514 11 514 29] IsRed0.is_red _36);
    goto BB24
  }
  BB21 {
    _34 <- ([#"../red_black_tree.rs" 514 11 514 52] false);
    goto BB23
  }
  BB22 {
    _38 <- RedBlackTree_Node_Type.node_right ( * self_1);
    _37 <- ([#"../red_black_tree.rs" 514 33 514 52] IsRed0.is_red _38);
    goto BB25
  }
  BB23 {
    switch (_34)
      | False -> goto BB28
      | True -> goto BB26
      end
  }
  BB24 {
    switch (_35)
      | False -> goto BB21
      | True -> goto BB22
      end
  }
  BB25 {
    _34 <- _37;
    _37 <- any bool;
    goto BB23
  }
  BB26 {
    _40 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _40) };
    _39 <- ([#"../red_black_tree.rs" 515 12 515 30] FlipColors0.flip_colors _40);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl14_MoveRedLeft_Interface
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl9_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  clone RedBlackTree_Cpn_Stub as Cpn0
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val move_red_left [#"../red_black_tree.rs" 537 4 537 44] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 519 15 519 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 520 15 520 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 521 15 521 86] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 522 14 522 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 523 4 525 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 526 4 526 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 527 14 527 42] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 528 4 528 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 529 4 530 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 531 4 532 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 533 14 534 61] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * result) \/ MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 535 4 536 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_right ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl14_MoveRedLeft
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl14_RotateLeft_Interface as RotateLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_FlipColors_Interface as FlipColors0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    function Height0.height = Height0.height,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height1.height = Height1.height
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate MatchT0.match_t = MatchT0.match_t
  clone RedBlackTree_Cpn as Cpn0
  let rec cfg move_red_left [#"../red_black_tree.rs" 537 4 537 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 519 15 519 41] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 520 15 520 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 521 15 521 86] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 522 14 522 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 523 4 525 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 526 4 526 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 527 14 527 42] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 528 4 528 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 529 4 530 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 531 4 532 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 533 14 534 61] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * result) \/ MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 535 4 536 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_right ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _2 : ();
  var _15 : ();
  var _16 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _17 : ();
  var _18 : bool;
  var _19 : RedBlackTree_Tree_Type.t_tree k v;
  var _20 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _21 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _23 : ();
  var _24 : ();
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _28 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _29 : ();
  var _30 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _31 : ();
  var _32 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _33 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _34 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _35 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 538 8 538 26] FlipColors0.flip_colors _16);
    goto BB1
  }
  BB1 {
    _22 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _22))) };
    _21 <- ([#"../red_black_tree.rs" 539 11 539 35] AsMut0.as_mut _22);
    goto BB2
  }
  BB2 {
    _20 <- ([#"../red_black_tree.rs" 539 11 539 44] Unwrap0.unwrap _21);
    goto BB3
  }
  BB3 {
    _19 <- RedBlackTree_Node_Type.node_left ( * _20);
    _18 <- ([#"../red_black_tree.rs" 539 11 539 58] IsRed0.is_red _19);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _20 };
    switch (_18)
      | False -> goto BB13
      | True -> goto BB5
      end
  }
  BB5 {
    _28 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _28))) };
    _27 <- ([#"../red_black_tree.rs" 540 12 540 36] AsMut0.as_mut _28);
    goto BB6
  }
  BB6 {
    _26 <- ([#"../red_black_tree.rs" 540 12 540 45] Unwrap0.unwrap _27);
    goto BB7
  }
  BB7 {
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 540 12 540 60] RotateRight0.rotate_right _25);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve _26 };
    _30 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _30) };
    _29 <- ([#"../red_black_tree.rs" 541 12 541 30] RotateLeft0.rotate_left _30);
    goto BB9
  }
  BB9 {
    _32 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _32) };
    _31 <- ([#"../red_black_tree.rs" 542 12 542 30] FlipColors0.flip_colors _32);
    goto BB10
  }
  BB10 {
    _35 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _35)) b c d e) };
    _34 <- ([#"../red_black_tree.rs" 543 19 543 42] AsMut0.as_mut _35);
    goto BB11
  }
  BB11 {
    _33 <- ([#"../red_black_tree.rs" 543 19 543 51] Unwrap0.unwrap _34);
    goto BB12
  }
  BB12 {
    _0 <- borrow_mut ( * _33);
    _33 <- { _33 with current = ( ^ _0) };
    assume { Resolve0.resolve _33 };
    goto BB14
  }
  BB13 {
    _17 <- ();
    _0 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB14
  }
  BB14 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module RedBlackTree_Impl14_MoveRedRight_Interface
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl9_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  clone RedBlackTree_Cpn_Stub as Cpn0
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val move_red_right [#"../red_black_tree.rs" 566 4 566 45] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 548 15 548 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 549 15 549 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 550 15 550 86] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 551 14 551 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 552 4 554 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 555 4 555 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 556 14 556 42] RedBlackTree_Node_Type.node_key ( * result) = RedBlackTree_Node_Type.node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 557 4 557 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 558 4 559 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 560 4 561 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 562 14 563 61] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) \/ MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 564 4 565 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_left ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl14_MoveRedRight
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_FlipColors_Interface as FlipColors0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    function Height0.height = Height0.height,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height1.height = Height1.height
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate MatchT0.match_t = MatchT0.match_t
  clone RedBlackTree_Cpn as Cpn0
  let rec cfg move_red_right [#"../red_black_tree.rs" 566 4 566 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 548 15 548 40] RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 549 15 549 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 550 15 550 86] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 551 14 551 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 552 4 554 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 555 4 555 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 556 14 556 42] RedBlackTree_Node_Type.node_key ( * result) = RedBlackTree_Node_Type.node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 557 4 557 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 558 4 559 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 560 4 561 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 562 14 563 61] MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) \/ MatchN0.match_n (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 564 4 565 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_left ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _2 : ();
  var _15 : ();
  var _16 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _17 : ();
  var _18 : bool;
  var _19 : RedBlackTree_Tree_Type.t_tree k v;
  var _20 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _21 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _23 : ();
  var _24 : ();
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : ();
  var _27 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _28 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _29 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _30 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 567 8 567 26] FlipColors0.flip_colors _16);
    goto BB1
  }
  BB1 {
    _22 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _22)) b c d e) };
    _21 <- ([#"../red_black_tree.rs" 568 11 568 34] AsMut0.as_mut _22);
    goto BB2
  }
  BB2 {
    _20 <- ([#"../red_black_tree.rs" 568 11 568 43] Unwrap0.unwrap _21);
    goto BB3
  }
  BB3 {
    _19 <- RedBlackTree_Node_Type.node_left ( * _20);
    _18 <- ([#"../red_black_tree.rs" 568 11 568 57] IsRed0.is_red _19);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _20 };
    switch (_18)
      | False -> goto BB10
      | True -> goto BB5
      end
  }
  BB5 {
    _25 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 569 12 569 31] RotateRight0.rotate_right _25);
    goto BB6
  }
  BB6 {
    _27 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _27) };
    _26 <- ([#"../red_black_tree.rs" 570 12 570 30] FlipColors0.flip_colors _27);
    goto BB7
  }
  BB7 {
    _30 <- borrow_mut (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Tree_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Tree_Type.C_Tree ( ^ _30))) };
    _29 <- ([#"../red_black_tree.rs" 571 19 571 43] AsMut0.as_mut _30);
    goto BB8
  }
  BB8 {
    _28 <- ([#"../red_black_tree.rs" 571 19 571 52] Unwrap0.unwrap _29);
    goto BB9
  }
  BB9 {
    _0 <- borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _0) };
    assume { Resolve0.resolve _28 };
    goto BB11
  }
  BB10 {
    _17 <- ();
    _0 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module RedBlackTree_Impl15_New_Interface
  type k
  type v
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl11_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val new [#"../red_black_tree.rs" 583 4 583 30] (_1' : ()) : RedBlackTree_Tree_Type.t_tree k v
    ensures { [#"../red_black_tree.rs" 581 14 581 43] ShallowModel0.shallow_model result = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 582 14 582 32] Invariant0.invariant' result }
    
end
module RedBlackTree_Impl15_New
  type k
  type v
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl11_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec cfg new [#"../red_black_tree.rs" 583 4 583 30] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : RedBlackTree_Tree_Type.t_tree k v
    ensures { [#"../red_black_tree.rs" 581 14 581 43] ShallowModel0.shallow_model result = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 582 14 582 32] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Tree_Type.t_tree k v;
  var _3 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  {
    goto BB0
  }
  BB0 {
    _3 <- Core_Option_Option_Type.C_None;
    _0 <- RedBlackTree_Tree_Type.C_Tree _3;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val cmp (self : self) (other : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"../../../../creusot-contracts/src/std/cmp.rs" 44 26 44 85] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module RedBlackTree_Impl15_InsertRec_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color1 with
    type k = k,
    type v = v
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v
  clone RedBlackTree_Cpn_Stub as Cpn0
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl11_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val insert_rec [#"../red_black_tree.rs" 595 4 595 44] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 587 15 587 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 588 15 588 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 589 14 589 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 590 14 590 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 591 14 592 39] MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) /\ Color1.color ( * self) = RedBlackTree_Color_Type.C_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 593 14 593 56] HasMapping0.has_mapping ( ^ self) (DeepModel0.deep_model key) val' }
    ensures { [#"../red_black_tree.rs" 594 4 594 127] forall v : v . forall k : DeepModelTy0.deepModelTy . k = DeepModel0.deep_model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
end
module RedBlackTree_Impl15_InsertRec
  type k
  type v
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use prelude.Int8
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    predicate MatchT0.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Cpn as Cpn0
  clone RedBlackTree_Impl14_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height1.height = Height0.height
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  let rec cfg insert_rec [#"../red_black_tree.rs" 595 4 595 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 587 15 587 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 588 15 588 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 589 14 589 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 590 14 590 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 591 14 592 39] MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) /\ Color1.color ( * self) = RedBlackTree_Color_Type.C_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 593 14 593 56] HasMapping0.has_mapping ( ^ self) (DeepModel0.deep_model key) val' }
    ensures { [#"../red_black_tree.rs" 594 4 594 127] forall v : v . forall k : DeepModelTy0.deepModelTy . k = DeepModel0.deep_model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _11 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _12 : isize;
  var node_13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : ();
  var _15 : Core_Cmp_Ordering_Type.t_ordering;
  var _16 : k;
  var _17 : k;
  var _18 : k;
  var _19 : int8;
  var _20 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _21 : k;
  var _22 : v;
  var _23 : ();
  var _24 : v;
  var _25 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _26 : k;
  var _27 : v;
  var _28 : ();
  var _29 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _30 : ();
  var _31 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _32 : RedBlackTree_Node_Type.t_node k v;
  var _33 : RedBlackTree_Node_Type.t_node k v;
  var _34 : RedBlackTree_Tree_Type.t_tree k v;
  var _35 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _36 : RedBlackTree_Color_Type.t_color;
  var _37 : k;
  var _38 : v;
  var _39 : RedBlackTree_Tree_Type.t_tree k v;
  var _40 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _11 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _11)) };
    switch ( * _11)
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      | _ -> goto BB19
      end
  }
  BB3 {
    goto BB4
  }
  BB4 {
    node_13 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _11));
    _11 <- { _11 with current = (let Core_Option_Option_Type.C_Some a =  * _11 in Core_Option_Option_Type.C_Some ( ^ node_13)) };
    _16 <- key_2;
    _18 <- RedBlackTree_Node_Type.node_key ( * node_13);
    _17 <- _18;
    assume { Resolve3.resolve _18 };
    _15 <- ([#"../red_black_tree.rs" 597 18 597 36] Cmp0.cmp _16 _17);
    goto BB5
  }
  BB5 {
    switch (_15)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB6
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB7
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB8
      end
  }
  BB6 {
    goto BB10
  }
  BB7 {
    goto BB12
  }
  BB8 {
    _25 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _25)) };
    _26 <- key_2;
    key_2 <- any k;
    _27 <- val'_3;
    val'_3 <- any v;
    _14 <- ([#"../red_black_tree.rs" 603 27 603 58] insert_rec _25 _26 _27);
    goto BB16
  }
  BB9 {
    assume { Resolve4.resolve node_13 };
    assume { Resolve5.resolve val'_3 };
    assume { Resolve6.resolve key_2 };
    assume { Resolve0.resolve _11 };
    assume { Resolve2.resolve self_1 };
    absurd
  }
  BB10 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node ( ^ _20) b c d e) };
    _21 <- key_2;
    key_2 <- any k;
    _22 <- val'_3;
    val'_3 <- any v;
    _14 <- ([#"../red_black_tree.rs" 598 24 598 54] insert_rec _20 _21 _22);
    goto BB11
  }
  BB11 {
    goto BB17
  }
  BB12 {
    assume { Resolve6.resolve key_2 };
    _24 <- val'_3;
    val'_3 <- any v;
    goto BB13
  }
  BB13 {
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c _24 e) };
    _24 <- any v;
    assume { Resolve5.resolve (RedBlackTree_Node_Type.node_val ( * node_13)) };
    assume { Resolve4.resolve node_13 };
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve _11 };
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB32
  }
  BB16 {
    goto BB17
  }
  BB17 {
    _29 <- borrow_mut ( * node_13);
    node_13 <- { node_13 with current = ( ^ _29) };
    _28 <- ([#"../red_black_tree.rs" 605 12 605 26] Balance0.balance _29);
    goto BB18
  }
  BB18 {
    assume { Resolve4.resolve node_13 };
    assume { Resolve0.resolve _11 };
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB31
  }
  BB19 {
    assume { Resolve0.resolve _11 };
    _35 <- Core_Option_Option_Type.C_None;
    _34 <- RedBlackTree_Tree_Type.C_Tree _35;
    goto BB20
  }
  BB20 {
    _36 <- RedBlackTree_Color_Type.C_Red;
    _37 <- key_2;
    key_2 <- any k;
    _38 <- val'_3;
    val'_3 <- any v;
    _40 <- Core_Option_Option_Type.C_None;
    _39 <- RedBlackTree_Tree_Type.C_Tree _40;
    goto BB21
  }
  BB21 {
    _33 <- RedBlackTree_Node_Type.C_Node _34 _36 _37 _38 _39;
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    _32 <- _33;
    goto BB26
  }
  BB26 {
    _31 <- Core_Option_Option_Type.C_Some _32;
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree _31) };
    _31 <- any Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
    assume { Resolve1.resolve (RedBlackTree_Tree_Type.tree_node ( * self_1)) };
    assume { Resolve2.resolve self_1 };
    goto BB30
  }
  BB30 {
    _0 <- ();
    goto BB32
  }
  BB31 {
    goto BB34
  }
  BB32 {
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    return _0
  }
  
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 54 8 54 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module RedBlackTree_Impl15_Insert_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl11_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val insert [#"../red_black_tree.rs" 621 4 621 44] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 618 15 618 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 619 14 619 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 620 14 620 64] ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') }
    
end
module RedBlackTree_Impl15_Insert
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Cpn as Cpn0
  use map.Map
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Ghost.ghost_ty ()
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_InsertRec_Interface as InsertRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Height0.height = Height0.height,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchT0.match_t = MatchT0.match_t,
    function Color1.color = Color1.color,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone RedBlackTree_Impl11_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color1.color
  let rec cfg insert [#"../red_black_tree.rs" 621 4 621 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 618 15 618 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 619 14 619 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 620 14 620 64] ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _7 : ();
  var _8 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _9 : k;
  var _10 : v;
  var _11 : RedBlackTree_Color_Type.t_color;
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _14 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _15 : Ghost.ghost_ty ();
  var _18 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    _9 <- key_2;
    key_2 <- any k;
    _10 <- val'_3;
    val'_3 <- any v;
    _7 <- ([#"../red_black_tree.rs" 622 8 622 33] InsertRec0.insert_rec _8 _9 _10);
    goto BB2
  }
  BB2 {
    _11 <- RedBlackTree_Color_Type.C_Black;
    _14 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _14)) };
    _13 <- ([#"../red_black_tree.rs" 623 8 623 26] AsMut0.as_mut _14);
    goto BB3
  }
  BB3 {
    _12 <- ([#"../red_black_tree.rs" 623 8 623 35] Unwrap0.unwrap _13);
    goto BB4
  }
  BB4 {
    _12 <- { _12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _12 in RedBlackTree_Node_Type.C_Node a _11 c d e) };
    _11 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve0.resolve _12 };
    assume { Resolve1.resolve self_1 };
    _18 <- ();
    _15 <- ([#"../red_black_tree.rs" 624 8 624 42] Ghost.new ());
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _15 };
    _0 <- ();
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Alloc_Boxed_Impl55_AsMut_Interface
  type t
  type a
  use prelude.Borrow
  val as_mut (self : borrowed t) : borrowed t
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 31 26 31 43]  * self =  * result }
    ensures { [#"../../../../creusot-contracts/src/std/boxed.rs" 32 26 32 43]  ^ self =  ^ result }
    
end
module RedBlackTree_Impl15_DeleteMaxRec_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Cpn_Stub as Cpn0
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl11_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val delete_max_rec [#"../red_black_tree.rs" 638 4 638 42] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 627 15 627 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 628 15 629 62] MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 630 14 630 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 631 14 631 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 632 14 632 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 633 4 633 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (DeepModel0.deep_model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 634 4 635 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 636 14 636 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 637 4 637 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
end
module RedBlackTree_Impl15_DeleteMaxRec
  type k
  type v
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Option_Impl1_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    predicate MatchT0.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone RedBlackTree_Cpn as Cpn0
  clone RedBlackTree_Impl14_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height1.height = Height0.height
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_MoveRedRight_Interface as MoveRedRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height0.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Alloc_Boxed_Impl55_AsMut_Interface as AsMut1 with
    type t = RedBlackTree_Node_Type.t_node k v,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  let rec cfg delete_max_rec [#"../red_black_tree.rs" 638 4 638 42] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 627 15 627 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 628 15 629 62] MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 630 14 630 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 631 14 631 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 632 14 632 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 633 4 633 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (DeepModel0.deep_model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 634 4 635 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 636 14 636 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 637 4 637 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var node_11 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : bool;
  var _18 : RedBlackTree_Tree_Type.t_tree k v;
  var _19 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _20 : ();
  var _21 : isize;
  var _22 : ();
  var node_23 : RedBlackTree_Node_Type.t_node k v;
  var _24 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _26 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _27 : k;
  var _28 : v;
  var _29 : ();
  var _30 : bool;
  var _31 : bool;
  var _32 : bool;
  var _33 : RedBlackTree_Tree_Type.t_tree k v;
  var _34 : bool;
  var _35 : bool;
  var _36 : RedBlackTree_Tree_Type.t_tree k v;
  var _37 : RedBlackTree_Node_Type.t_node k v;
  var _38 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _39 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _41 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _42 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var r_43 : (k, v);
  var _44 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _45 : ();
  var _46 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _47 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _15 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _15)) };
    _14 <- ([#"../red_black_tree.rs" 639 23 639 41] AsMut0.as_mut _15);
    goto BB1
  }
  BB1 {
    _13 <- ([#"../red_black_tree.rs" 639 23 639 50] Unwrap0.unwrap _14);
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    node_11 <- ([#"../red_black_tree.rs" 639 23 639 59] AsMut1.as_mut _12);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _13 };
    _18 <- RedBlackTree_Node_Type.node_left ( * node_11);
    _17 <- ([#"../red_black_tree.rs" 640 11 640 29] IsRed0.is_red _18);
    goto BB4
  }
  BB4 {
    switch (_17)
      | False -> goto BB7
      | True -> goto BB5
      end
  }
  BB5 {
    _19 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _19) };
    _16 <- ([#"../red_black_tree.rs" 641 12 641 31] RotateRight0.rotate_right _19);
    goto BB6
  }
  BB6 {
    goto BB8
  }
  BB7 {
    _16 <- ();
    goto BB8
  }
  BB8 {
    switch (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_11)))
      | Core_Option_Option_Type.C_None -> goto BB9
      | _ -> goto BB15
      end
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve node_11 };
    _26 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _26)) };
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 644 23 644 53] Take0.take _25);
    goto BB11
  }
  BB11 {
    assume { Resolve4.resolve _26 };
    assume { Resolve3.resolve self_1 };
    node_23 <- ([#"../red_black_tree.rs" 644 23 644 62] Unwrap2.unwrap _24);
    goto BB12
  }
  BB12 {
    _27 <- RedBlackTree_Node_Type.node_key node_23;
    node_23 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_23 in RedBlackTree_Node_Type.C_Node a b (any k) d e);
    _28 <- RedBlackTree_Node_Type.node_val node_23;
    node_23 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_23 in RedBlackTree_Node_Type.C_Node a b c (any v) e);
    assume { Resolve5.resolve node_23 };
    _0 <- (_27, _28);
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB30
  }
  BB15 {
    _20 <- ();
    _33 <- RedBlackTree_Node_Type.node_right ( * node_11);
    _32 <- ([#"../red_black_tree.rs" 647 12 647 31] IsRed0.is_red _33);
    goto BB19
  }
  BB16 {
    _30 <- ([#"../red_black_tree.rs" 647 11 647 83] false);
    goto BB18
  }
  BB17 {
    _39 <- RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_11));
    _38 <- ([#"../red_black_tree.rs" 647 36 647 60] AsRef0.as_ref _39);
    goto BB20
  }
  BB18 {
    switch (_30)
      | False -> goto BB25
      | True -> goto BB23
      end
  }
  BB19 {
    _31 <- not _32;
    switch (_31)
      | False -> goto BB16
      | True -> goto BB17
      end
  }
  BB20 {
    _37 <- ([#"../red_black_tree.rs" 647 36 647 69] Unwrap1.unwrap _38);
    goto BB21
  }
  BB21 {
    _36 <- RedBlackTree_Node_Type.node_left _37;
    assume { Resolve1.resolve _37 };
    _35 <- ([#"../red_black_tree.rs" 647 36 647 83] IsRed0.is_red _36);
    goto BB22
  }
  BB22 {
    _34 <- not _35;
    _30 <- _34;
    _34 <- any bool;
    goto BB18
  }
  BB23 {
    _42 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _42) };
    _41 <- ([#"../red_black_tree.rs" 648 19 648 40] MoveRedRight0.move_red_right _42);
    goto BB24
  }
  BB24 {
    _40 <- borrow_mut ( * _41);
    _41 <- { _41 with current = ( ^ _40) };
    _47 <- _40;
    _40 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assume { Resolve2.resolve node_11 };
    node_11 <- _47;
    assume { Resolve2.resolve _41 };
    _29 <- ();
    goto BB26
  }
  BB25 {
    _29 <- ();
    goto BB26
  }
  BB26 {
    _44 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_11));
    node_11 <- { node_11 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_11 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _44)) };
    r_43 <- ([#"../red_black_tree.rs" 650 16 650 43] delete_max_rec _44);
    goto BB27
  }
  BB27 {
    _46 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _46) };
    _45 <- ([#"../red_black_tree.rs" 651 8 651 22] Balance0.balance _46);
    goto BB28
  }
  BB28 {
    assume { Resolve2.resolve node_11 };
    assume { Resolve3.resolve self_1 };
    _0 <- r_43;
    r_43 <- any (k, v);
    goto BB29
  }
  BB29 {
    goto BB31
  }
  BB30 {
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMax_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone RedBlackTree_Impl11_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val delete_max [#"../red_black_tree.rs" 662 4 662 50] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 655 15 655 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 656 14 656 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 657 14 661 65] match (result) with
      | Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log k2 (DeepModel0.deep_model k)) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None)
      | Core_Option_Option_Type.C_None -> ShallowModel1.shallow_model ( ^ self) = ShallowModel0.shallow_model self /\ ShallowModel0.shallow_model self = Const.const (Core_Option_Option_Type.C_None)
      end }
    
end
module RedBlackTree_Impl15_DeleteMax
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.IntSize
  use map.Map
  use map.Const
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Cpn as Cpn0
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use map.Map
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = Ghost.ghost_ty ()
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_DeleteMaxRec_Interface as DeleteMaxRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    function Cpn0.cpn = Cpn0.cpn,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color1.color
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl11_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color1.color
  let rec cfg delete_max [#"../red_black_tree.rs" 662 4 662 50] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 655 15 655 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 656 14 656 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 657 14 661 65] match (result) with
      | Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log k2 (DeepModel0.deep_model k)) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None)
      | Core_Option_Option_Type.C_None -> ShallowModel1.shallow_model ( ^ self) = ShallowModel0.shallow_model self /\ ShallowModel0.shallow_model self = Const.const (Core_Option_Option_Type.C_None)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var old_self_5 : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v));
  var _7 : ();
  var _8 : ();
  var _9 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _10 : isize;
  var node_11 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : bool;
  var _13 : bool;
  var _14 : RedBlackTree_Tree_Type.t_tree k v;
  var _15 : RedBlackTree_Color_Type.t_color;
  var _16 : ();
  var _17 : ();
  var r_19 : (k, v);
  var _20 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _21 : ();
  var _22 : bool;
  var _23 : RedBlackTree_Tree_Type.t_tree k v;
  var _24 : RedBlackTree_Color_Type.t_color;
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _27 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _28 : Ghost.ghost_ty ();
  var _31 : ();
  var _32 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_self_5 <- ([#"../red_black_tree.rs" 663 23 663 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_5 };
    _9 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _9)) };
    switch ( * _9)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB8
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    node_11 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _9));
    _9 <- { _9 with current = (let Core_Option_Option_Type.C_Some a =  * _9 in Core_Option_Option_Type.C_Some ( ^ node_11)) };
    _14 <- RedBlackTree_Node_Type.node_left ( * node_11);
    _13 <- ([#"../red_black_tree.rs" 665 16 665 34] IsRed0.is_red _14);
    goto BB4
  }
  BB4 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    _15 <- RedBlackTree_Color_Type.C_Red;
    node_11 <- { node_11 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_11 in RedBlackTree_Node_Type.C_Node a _15 c d e) };
    _15 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve3.resolve node_11 };
    assume { Resolve1.resolve _9 };
    _8 <- ();
    goto BB7
  }
  BB6 {
    assume { Resolve3.resolve node_11 };
    _8 <- ();
    assume { Resolve1.resolve _9 };
    goto BB7
  }
  BB7 {
    assert { [#"../red_black_tree.rs" 671 24 671 53] SameMappings0.same_mappings ( * Ghost.inner old_self_5) ( * self_1) };
    _17 <- ();
    _20 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _20) };
    r_19 <- ([#"../red_black_tree.rs" 672 16 672 37] DeleteMaxRec0.delete_max_rec _20);
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve _9 };
    _0 <- Core_Option_Option_Type.C_None;
    assume { Resolve2.resolve self_1 };
    goto BB19
  }
  BB9 {
    _23 <-  * self_1;
    _22 <- ([#"../red_black_tree.rs" 673 11 673 24] IsRed0.is_red _23);
    goto BB10
  }
  BB10 {
    switch (_22)
      | False -> goto BB14
      | True -> goto BB11
      end
  }
  BB11 {
    _24 <- RedBlackTree_Color_Type.C_Black;
    _27 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _27)) };
    _26 <- ([#"../red_black_tree.rs" 674 12 674 30] AsMut0.as_mut _27);
    goto BB12
  }
  BB12 {
    _25 <- ([#"../red_black_tree.rs" 674 12 674 39] Unwrap0.unwrap _26);
    goto BB13
  }
  BB13 {
    _25 <- { _25 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _25 in RedBlackTree_Node_Type.C_Node a _24 c d e) };
    _24 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve3.resolve _25 };
    assume { Resolve2.resolve self_1 };
    _21 <- ();
    goto BB15
  }
  BB14 {
    assume { Resolve2.resolve self_1 };
    _21 <- ();
    goto BB15
  }
  BB15 {
    _31 <- ();
    _28 <- ([#"../red_black_tree.rs" 676 8 676 42] Ghost.new ());
    goto BB16
  }
  BB16 {
    assume { Resolve4.resolve _28 };
    _32 <- r_19;
    r_19 <- any (k, v);
    _0 <- Core_Option_Option_Type.C_Some _32;
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMinRec_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Cpn_Stub as Cpn0
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl11_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val delete_min_rec [#"../red_black_tree.rs" 691 4 691 42] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 680 15 680 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 681 15 682 62] MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 683 14 683 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 684 14 684 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 685 14 685 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 686 4 686 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (DeepModel0.deep_model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 687 4 688 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 689 14 689 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 690 4 690 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
end
module RedBlackTree_Impl15_DeleteMinRec
  type k
  type v
  use prelude.Borrow
  use prelude.Int
  use prelude.IntSize
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Option_Impl1_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    predicate MatchT0.match_t = MatchT0.match_t
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone RedBlackTree_Cpn as Cpn0
  clone RedBlackTree_Impl14_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height1.height = Height0.height
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_MoveRedLeft_Interface as MoveRedLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Alloc_Boxed_Impl55_AsMut_Interface as AsMut1 with
    type t = RedBlackTree_Node_Type.t_node k v,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  let rec cfg delete_min_rec [#"../red_black_tree.rs" 691 4 691 42] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 680 15 680 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 681 15 682 62] MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 683 14 683 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 684 14 684 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 685 14 685 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 686 4 686 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (DeepModel0.deep_model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 687 4 688 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 689 14 689 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 690 4 690 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var node_11 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : isize;
  var _18 : ();
  var node_19 : RedBlackTree_Node_Type.t_node k v;
  var _20 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _21 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _23 : k;
  var _24 : v;
  var _25 : ();
  var _26 : bool;
  var _27 : bool;
  var _28 : bool;
  var _29 : RedBlackTree_Tree_Type.t_tree k v;
  var _30 : bool;
  var _31 : bool;
  var _32 : RedBlackTree_Tree_Type.t_tree k v;
  var _33 : RedBlackTree_Node_Type.t_node k v;
  var _34 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _35 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _36 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _37 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _38 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var r_39 : (k, v);
  var _40 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _41 : ();
  var _42 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _43 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _15 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _15)) };
    _14 <- ([#"../red_black_tree.rs" 692 23 692 41] AsMut0.as_mut _15);
    goto BB1
  }
  BB1 {
    _13 <- ([#"../red_black_tree.rs" 692 23 692 50] Unwrap0.unwrap _14);
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    node_11 <- ([#"../red_black_tree.rs" 692 23 692 59] AsMut1.as_mut _12);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _13 };
    switch (RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_11)))
      | Core_Option_Option_Type.C_None -> goto BB4
      | _ -> goto BB10
      end
  }
  BB4 {
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve node_11 };
    _22 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _22)) };
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 694 23 694 53] Take0.take _21);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _22 };
    assume { Resolve3.resolve self_1 };
    node_19 <- ([#"../red_black_tree.rs" 694 23 694 62] Unwrap2.unwrap _20);
    goto BB7
  }
  BB7 {
    _23 <- RedBlackTree_Node_Type.node_key node_19;
    node_19 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_19 in RedBlackTree_Node_Type.C_Node a b (any k) d e);
    _24 <- RedBlackTree_Node_Type.node_val node_19;
    node_19 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_19 in RedBlackTree_Node_Type.C_Node a b c (any v) e);
    assume { Resolve5.resolve node_19 };
    _0 <- (_23, _24);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB25
  }
  BB10 {
    _16 <- ();
    _29 <- RedBlackTree_Node_Type.node_left ( * node_11);
    _28 <- ([#"../red_black_tree.rs" 697 12 697 30] IsRed0.is_red _29);
    goto BB14
  }
  BB11 {
    _26 <- ([#"../red_black_tree.rs" 697 11 697 81] false);
    goto BB13
  }
  BB12 {
    _35 <- RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_11));
    _34 <- ([#"../red_black_tree.rs" 697 35 697 58] AsRef0.as_ref _35);
    goto BB15
  }
  BB13 {
    switch (_26)
      | False -> goto BB20
      | True -> goto BB18
      end
  }
  BB14 {
    _27 <- not _28;
    switch (_27)
      | False -> goto BB11
      | True -> goto BB12
      end
  }
  BB15 {
    _33 <- ([#"../red_black_tree.rs" 697 35 697 67] Unwrap1.unwrap _34);
    goto BB16
  }
  BB16 {
    _32 <- RedBlackTree_Node_Type.node_left _33;
    assume { Resolve1.resolve _33 };
    _31 <- ([#"../red_black_tree.rs" 697 35 697 81] IsRed0.is_red _32);
    goto BB17
  }
  BB17 {
    _30 <- not _31;
    _26 <- _30;
    _30 <- any bool;
    goto BB13
  }
  BB18 {
    _38 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _38) };
    _37 <- ([#"../red_black_tree.rs" 698 19 698 39] MoveRedLeft0.move_red_left _38);
    goto BB19
  }
  BB19 {
    _36 <- borrow_mut ( * _37);
    _37 <- { _37 with current = ( ^ _36) };
    _43 <- _36;
    _36 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assume { Resolve2.resolve node_11 };
    node_11 <- _43;
    assume { Resolve2.resolve _37 };
    _25 <- ();
    goto BB21
  }
  BB20 {
    _25 <- ();
    goto BB21
  }
  BB21 {
    _40 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_11));
    node_11 <- { node_11 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_11 in RedBlackTree_Node_Type.C_Node ( ^ _40) b c d e) };
    r_39 <- ([#"../red_black_tree.rs" 700 16 700 42] delete_min_rec _40);
    goto BB22
  }
  BB22 {
    _42 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _42) };
    _41 <- ([#"../red_black_tree.rs" 701 8 701 22] Balance0.balance _42);
    goto BB23
  }
  BB23 {
    assume { Resolve2.resolve node_11 };
    assume { Resolve3.resolve self_1 };
    _0 <- r_39;
    r_39 <- any (k, v);
    goto BB24
  }
  BB24 {
    goto BB26
  }
  BB25 {
    goto BB26
  }
  BB26 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMin_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone RedBlackTree_Impl11_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val delete_min [#"../red_black_tree.rs" 714 4 714 50] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 705 15 705 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 706 14 706 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 707 14 713 5] match (result) with
      | Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log (DeepModel0.deep_model k) k2) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None)
      | Core_Option_Option_Type.C_None -> ShallowModel1.shallow_model ( ^ self) = ShallowModel0.shallow_model self /\ ShallowModel0.shallow_model self = Const.const (Core_Option_Option_Type.C_None)
      end }
    
end
module RedBlackTree_Impl15_DeleteMin
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.IntSize
  use map.Map
  use map.Const
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Cpn as Cpn0
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use map.Map
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_DeleteMinRec_Interface as DeleteMinRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    function Cpn0.cpn = Cpn0.cpn,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty ()
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl11_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color1.color
  let rec cfg delete_min [#"../red_black_tree.rs" 714 4 714 50] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 705 15 705 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 706 14 706 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 707 14 713 5] match (result) with
      | Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel0.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log (DeepModel0.deep_model k) k2) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None)
      | Core_Option_Option_Type.C_None -> ShallowModel1.shallow_model ( ^ self) = ShallowModel0.shallow_model self /\ ShallowModel0.shallow_model self = Const.const (Core_Option_Option_Type.C_None)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _5 : Ghost.ghost_ty ();
  var _8 : ();
  var _9 : ();
  var _10 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _11 : isize;
  var node_12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : bool;
  var _14 : bool;
  var _15 : RedBlackTree_Tree_Type.t_tree k v;
  var _16 : RedBlackTree_Color_Type.t_color;
  var _17 : ();
  var r_18 : (k, v);
  var _19 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _20 : ();
  var _21 : bool;
  var _22 : RedBlackTree_Tree_Type.t_tree k v;
  var _23 : RedBlackTree_Color_Type.t_color;
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _26 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _27 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _8 <- ();
    _5 <- ([#"../red_black_tree.rs" 715 8 715 42] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _5 };
    _10 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _10)) };
    switch ( * _10)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB8
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    node_12 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _10));
    _10 <- { _10 with current = (let Core_Option_Option_Type.C_Some a =  * _10 in Core_Option_Option_Type.C_Some ( ^ node_12)) };
    _15 <- RedBlackTree_Node_Type.node_left ( * node_12);
    _14 <- ([#"../red_black_tree.rs" 718 16 718 34] IsRed0.is_red _15);
    goto BB4
  }
  BB4 {
    _13 <- not _14;
    switch (_13)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    _16 <- RedBlackTree_Color_Type.C_Red;
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a _16 c d e) };
    _16 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve3.resolve node_12 };
    assume { Resolve1.resolve _10 };
    _9 <- ();
    goto BB7
  }
  BB6 {
    assume { Resolve3.resolve node_12 };
    _9 <- ();
    assume { Resolve1.resolve _10 };
    goto BB7
  }
  BB7 {
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    r_18 <- ([#"../red_black_tree.rs" 724 16 724 37] DeleteMinRec0.delete_min_rec _19);
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve _10 };
    _0 <- Core_Option_Option_Type.C_None;
    assume { Resolve2.resolve self_1 };
    goto BB18
  }
  BB9 {
    _22 <-  * self_1;
    _21 <- ([#"../red_black_tree.rs" 725 11 725 24] IsRed0.is_red _22);
    goto BB10
  }
  BB10 {
    switch (_21)
      | False -> goto BB14
      | True -> goto BB11
      end
  }
  BB11 {
    _23 <- RedBlackTree_Color_Type.C_Black;
    _26 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _26)) };
    _25 <- ([#"../red_black_tree.rs" 726 12 726 30] AsMut0.as_mut _26);
    goto BB12
  }
  BB12 {
    _24 <- ([#"../red_black_tree.rs" 726 12 726 39] Unwrap0.unwrap _25);
    goto BB13
  }
  BB13 {
    _24 <- { _24 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _24 in RedBlackTree_Node_Type.C_Node a _23 c d e) };
    _23 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve3.resolve _24 };
    assume { Resolve2.resolve self_1 };
    _20 <- ();
    goto BB15
  }
  BB14 {
    assume { Resolve2.resolve self_1 };
    _20 <- ();
    goto BB15
  }
  BB15 {
    _27 <- r_18;
    r_18 <- any (k, v);
    _0 <- Core_Option_Option_Type.C_Some _27;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 30 8 30 28] DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val is_none (self : Core_Option_Option_Type.t_option t) : bool
    ensures { [#"../../../../creusot-contracts/src/std/option.rs" 23 26 23 51] result = (self = Core_Option_Option_Type.C_None) }
    
end
module RedBlackTree_Impl15_DeleteRec_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl7_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Cpn_Stub as Cpn0
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl11_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val delete_rec [#"../red_black_tree.rs" 743 4 743 55] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 731 15 731 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 732 15 733 62] MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 734 14 734 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 735 14 735 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 736 14 739 5] match (result) with
      | Core_Option_Option_Type.C_None -> forall v : v . not HasMapping0.has_mapping ( * self) (DeepModel0.deep_model key) v
      | Core_Option_Option_Type.C_Some (k, v) -> DeepModel0.deep_model key = DeepModel1.deep_model k /\ HasMapping0.has_mapping ( * self) (DeepModel1.deep_model k) v
      end }
    ensures { [#"../red_black_tree.rs" 740 4 740 129] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 741 14 741 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 742 4 742 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
end
module RedBlackTree_Impl15_DeleteRec
  type k
  type v
  use prelude.Borrow
  use prelude.Int
  use prelude.Int8
  use prelude.Ghost
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use prelude.Ghost
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    predicate MatchT0.match_t = MatchT0.match_t
  clone CreusotContracts_Std1_Option_Impl1_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Cpn as Cpn0
  clone RedBlackTree_Impl14_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height1.height = Height0.height
  clone RedBlackTree_Impl14_MoveRedLeft_Interface as MoveRedLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve9 with
    type t = v
  clone Core_Mem_Swap_Interface as Swap1 with
    type t = v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve8 with
    type t = k
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve7 with
    type self = Ghost.ghost_ty ()
  clone RedBlackTree_Impl0_HasMappingInj as HasMappingInj0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HasMappingModel0.has_mapping_model = HasMappingModel0.has_mapping_model,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    axiom .
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl15_DeleteMinRec_Interface as DeleteMinRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    function Cpn0.cpn = Cpn0.cpn,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color1.color
  clone RedBlackTree_Impl14_MoveRedRight_Interface as MoveRedRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Cpn0.cpn = Cpn0.cpn,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve6 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height0.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Alloc_Boxed_Impl55_AsMut_Interface as AsMut1 with
    type t = RedBlackTree_Node_Type.t_node k v,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  let rec cfg delete_rec [#"../red_black_tree.rs" 743 4 743 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 731 15 731 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 732 15 733 62] MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT0.match_t (Cpn0.cpn (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 734 14 734 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 735 14 735 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 736 14 739 5] match (result) with
      | Core_Option_Option_Type.C_None -> forall v : v . not HasMapping0.has_mapping ( * self) (DeepModel0.deep_model key) v
      | Core_Option_Option_Type.C_Some (k, v) -> DeepModel0.deep_model key = DeepModel1.deep_model k /\ HasMapping0.has_mapping ( * self) (DeepModel1.deep_model k) v
      end }
    ensures { [#"../red_black_tree.rs" 740 4 740 129] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 741 14 741 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 742 4 742 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var key_2 : k;
  var r_11 : Core_Option_Option_Type.t_option (k, v);
  var node_12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _15 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : ();
  var _18 : Core_Cmp_Ordering_Type.t_ordering;
  var _19 : k;
  var _20 : k;
  var _21 : k;
  var _22 : int8;
  var _23 : ();
  var _24 : bool;
  var _25 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _26 : ();
  var _27 : ();
  var _28 : bool;
  var _29 : bool;
  var _30 : bool;
  var _31 : RedBlackTree_Tree_Type.t_tree k v;
  var _32 : bool;
  var _33 : bool;
  var _34 : RedBlackTree_Tree_Type.t_tree k v;
  var _35 : RedBlackTree_Node_Type.t_node k v;
  var _36 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _37 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _38 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _39 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _41 : Core_Option_Option_Type.t_option (k, v);
  var _42 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _43 : k;
  var ord_44 : Core_Cmp_Ordering_Type.t_ordering;
  var _45 : bool;
  var _46 : RedBlackTree_Tree_Type.t_tree k v;
  var _47 : ();
  var _48 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _49 : Core_Option_Option_Type.t_option (k, v);
  var _50 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _51 : k;
  var _52 : ();
  var _53 : bool;
  var _54 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _55 : ();
  var _56 : ();
  var _57 : int8;
  var _58 : ();
  var node_59 : RedBlackTree_Node_Type.t_node k v;
  var _60 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _61 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _62 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _63 : (k, v);
  var _64 : k;
  var _65 : v;
  var _66 : ();
  var _67 : bool;
  var _68 : bool;
  var _69 : RedBlackTree_Tree_Type.t_tree k v;
  var _70 : RedBlackTree_Node_Type.t_node k v;
  var _71 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _72 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _73 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _74 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _75 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _76 : int8;
  var kv_77 : (k, v);
  var _78 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _79 : Ghost.ghost_ty ();
  var _82 : ();
  var _83 : ();
  var _84 : borrowed k;
  var _85 : borrowed k;
  var _86 : borrowed k;
  var _87 : borrowed k;
  var _88 : ();
  var _89 : borrowed v;
  var _90 : borrowed v;
  var _91 : borrowed v;
  var _92 : borrowed v;
  var _93 : Core_Option_Option_Type.t_option (k, v);
  var _94 : (k, v);
  var _95 : Core_Option_Option_Type.t_option (k, v);
  var _96 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _97 : k;
  var _98 : ();
  var _99 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _101 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _102 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _16 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _16)) };
    _15 <- ([#"../red_black_tree.rs" 745 23 745 41] AsMut0.as_mut _16);
    goto BB1
  }
  BB1 {
    _14 <- ([#"../red_black_tree.rs" 745 23 745 50] Unwrap0.unwrap _15);
    goto BB2
  }
  BB2 {
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    node_12 <- ([#"../red_black_tree.rs" 745 23 745 59] AsMut1.as_mut _13);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _14 };
    _19 <- key_2;
    _21 <- RedBlackTree_Node_Type.node_key ( * node_12);
    _20 <- _21;
    assume { Resolve1.resolve _21 };
    _18 <- ([#"../red_black_tree.rs" 746 14 746 32] Cmp0.cmp _19 _20);
    goto BB4
  }
  BB4 {
    switch (_18)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB5
      | _ -> goto BB6
      end
  }
  BB5 {
    goto BB7
  }
  BB6 {
    ord_44 <- _18;
    _46 <- RedBlackTree_Node_Type.node_left ( * node_12);
    _45 <- ([#"../red_black_tree.rs" 757 19 757 37] IsRed0.is_red _46);
    goto BB26
  }
  BB7 {
    _25 <- RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_12));
    _24 <- ([#"../red_black_tree.rs" 748 19 748 43] IsNone0.is_none _25);
    goto BB8
  }
  BB8 {
    switch (_24)
      | False -> goto BB10
      | True -> goto BB9
      end
  }
  BB9 {
    assume { Resolve2.resolve node_12 };
    assume { Resolve1.resolve key_2 };
    _0 <- Core_Option_Option_Type.C_None;
    assume { Resolve4.resolve self_1 };
    goto BB74
  }
  BB10 {
    _23 <- ();
    _31 <- RedBlackTree_Node_Type.node_left ( * node_12);
    _30 <- ([#"../red_black_tree.rs" 751 20 751 38] IsRed0.is_red _31);
    goto BB14
  }
  BB11 {
    _28 <- ([#"../red_black_tree.rs" 751 19 751 89] false);
    goto BB13
  }
  BB12 {
    _37 <- RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_12));
    _36 <- ([#"../red_black_tree.rs" 751 43 751 66] AsRef0.as_ref _37);
    goto BB15
  }
  BB13 {
    switch (_28)
      | False -> goto BB20
      | True -> goto BB18
      end
  }
  BB14 {
    _29 <- not _30;
    switch (_29)
      | False -> goto BB11
      | True -> goto BB12
      end
  }
  BB15 {
    _35 <- ([#"../red_black_tree.rs" 751 43 751 75] Unwrap2.unwrap _36);
    goto BB16
  }
  BB16 {
    _34 <- RedBlackTree_Node_Type.node_left _35;
    assume { Resolve6.resolve _35 };
    _33 <- ([#"../red_black_tree.rs" 751 43 751 89] IsRed0.is_red _34);
    goto BB17
  }
  BB17 {
    _32 <- not _33;
    _28 <- _32;
    _32 <- any bool;
    goto BB13
  }
  BB18 {
    _40 <- borrow_mut ( * node_12);
    node_12 <- { node_12 with current = ( ^ _40) };
    _39 <- ([#"../red_black_tree.rs" 752 27 752 47] MoveRedLeft0.move_red_left _40);
    goto BB19
  }
  BB19 {
    _38 <- borrow_mut ( * _39);
    _39 <- { _39 with current = ( ^ _38) };
    _102 <- _38;
    _38 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assume { Resolve2.resolve node_12 };
    node_12 <- _102;
    assume { Resolve2.resolve _39 };
    _27 <- ();
    goto BB21
  }
  BB20 {
    _27 <- ();
    goto BB21
  }
  BB21 {
    _42 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_12));
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node ( ^ _42) b c d e) };
    _43 <- key_2;
    assume { Resolve1.resolve key_2 };
    _41 <- ([#"../red_black_tree.rs" 754 20 754 45] delete_rec _42 _43);
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    r_11 <- _41;
    _41 <- any Core_Option_Option_Type.t_option (k, v);
    _17 <- ();
    goto BB25
  }
  BB25 {
    goto BB69
  }
  BB26 {
    switch (_45)
      | False -> goto BB33
      | True -> goto BB27
      end
  }
  BB27 {
    _48 <- borrow_mut ( * node_12);
    node_12 <- { node_12 with current = ( ^ _48) };
    _47 <- ([#"../red_black_tree.rs" 758 20 758 39] RotateRight0.rotate_right _48);
    goto BB28
  }
  BB28 {
    _50 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_12));
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _50)) };
    _51 <- key_2;
    assume { Resolve1.resolve key_2 };
    _49 <- ([#"../red_black_tree.rs" 759 24 759 50] delete_rec _50 _51);
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    r_11 <- _49;
    _49 <- any Core_Option_Option_Type.t_option (k, v);
    _17 <- ();
    goto BB32
  }
  BB32 {
    goto BB68
  }
  BB33 {
    _54 <- RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_12));
    _53 <- ([#"../red_black_tree.rs" 761 23 761 48] IsNone0.is_none _54);
    goto BB34
  }
  BB34 {
    switch (_53)
      | False -> goto BB44
      | True -> goto BB35
      end
  }
  BB35 {
    assume { Resolve2.resolve node_12 };
    assume { Resolve1.resolve key_2 };
    switch (ord_44)
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB36
      | _ -> goto BB38
      end
  }
  BB36 {
    goto BB37
  }
  BB37 {
    assume { Resolve4.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB73
  }
  BB38 {
    _56 <- ();
    _62 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _62)) };
    _61 <- borrow_mut ( * _62);
    _62 <- { _62 with current = ( ^ _61) };
    _60 <- ([#"../red_black_tree.rs" 765 35 765 65] Take0.take _61);
    goto BB39
  }
  BB39 {
    assume { Resolve3.resolve _62 };
    assume { Resolve4.resolve self_1 };
    node_59 <- ([#"../red_black_tree.rs" 765 35 765 74] Unwrap1.unwrap _60);
    goto BB40
  }
  BB40 {
    _64 <- RedBlackTree_Node_Type.node_key node_59;
    node_59 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_59 in RedBlackTree_Node_Type.C_Node a b (any k) d e);
    _65 <- RedBlackTree_Node_Type.node_val node_59;
    node_59 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_59 in RedBlackTree_Node_Type.C_Node a b c (any v) e);
    assume { Resolve5.resolve node_59 };
    _63 <- (_64, _65);
    goto BB41
  }
  BB41 {
    goto BB42
  }
  BB42 {
    _0 <- Core_Option_Option_Type.C_Some _63;
    goto BB43
  }
  BB43 {
    goto BB72
  }
  BB44 {
    _52 <- ();
    _72 <- RedBlackTree_Tree_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_12));
    _71 <- ([#"../red_black_tree.rs" 768 24 768 48] AsRef0.as_ref _72);
    goto BB45
  }
  BB45 {
    _70 <- ([#"../red_black_tree.rs" 768 24 768 57] Unwrap2.unwrap _71);
    goto BB46
  }
  BB46 {
    _69 <- RedBlackTree_Node_Type.node_left _70;
    assume { Resolve6.resolve _70 };
    _68 <- ([#"../red_black_tree.rs" 768 24 768 71] IsRed0.is_red _69);
    goto BB47
  }
  BB47 {
    _67 <- not _68;
    switch (_67)
      | False -> goto BB50
      | True -> goto BB48
      end
  }
  BB48 {
    _75 <- borrow_mut ( * node_12);
    node_12 <- { node_12 with current = ( ^ _75) };
    _74 <- ([#"../red_black_tree.rs" 769 31 769 52] MoveRedRight0.move_red_right _75);
    goto BB49
  }
  BB49 {
    _73 <- borrow_mut ( * _74);
    _74 <- { _74 with current = ( ^ _73) };
    _101 <- _73;
    _73 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    assume { Resolve2.resolve node_12 };
    node_12 <- _101;
    assume { Resolve2.resolve _74 };
    _66 <- ();
    goto BB51
  }
  BB50 {
    _66 <- ();
    goto BB51
  }
  BB51 {
    switch (ord_44)
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB52
      | _ -> goto BB63
      end
  }
  BB52 {
    goto BB53
  }
  BB53 {
    assume { Resolve1.resolve key_2 };
    _78 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_12));
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _78)) };
    kv_77 <- ([#"../red_black_tree.rs" 772 37 772 64] DeleteMinRec0.delete_min_rec _78);
    goto BB54
  }
  BB54 {
    _82 <- ();
    _79 <- ([#"../red_black_tree.rs" 773 24 773 56] Ghost.new ());
    goto BB55
  }
  BB55 {
    assume { Resolve7.resolve _79 };
    _85 <- borrow_mut (RedBlackTree_Node_Type.node_key ( * node_12));
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a b ( ^ _85) d e) };
    _84 <- borrow_mut ( * _85);
    _85 <- { _85 with current = ( ^ _84) };
    _87 <- borrow_mut (let (a, _) = kv_77 in a);
    kv_77 <- (let (a, b) = kv_77 in ( ^ _87, b));
    _86 <- borrow_mut ( * _87);
    _87 <- { _87 with current = ( ^ _86) };
    _83 <- ([#"../red_black_tree.rs" 774 24 774 64] Swap0.swap _84 _86);
    goto BB56
  }
  BB56 {
    assume { Resolve8.resolve _87 };
    assume { Resolve8.resolve _85 };
    _90 <- borrow_mut (RedBlackTree_Node_Type.node_val ( * node_12));
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a b c ( ^ _90) e) };
    _89 <- borrow_mut ( * _90);
    _90 <- { _90 with current = ( ^ _89) };
    _92 <- borrow_mut (let (_, a) = kv_77 in a);
    kv_77 <- (let (a, b) = kv_77 in (a,  ^ _92));
    _91 <- borrow_mut ( * _92);
    _92 <- { _92 with current = ( ^ _91) };
    _88 <- ([#"../red_black_tree.rs" 775 24 775 64] Swap1.swap _89 _91);
    goto BB57
  }
  BB57 {
    assume { Resolve9.resolve _92 };
    assume { Resolve9.resolve _90 };
    _94 <- kv_77;
    kv_77 <- any (k, v);
    _93 <- Core_Option_Option_Type.C_Some _94;
    goto BB58
  }
  BB58 {
    goto BB59
  }
  BB59 {
    r_11 <- _93;
    _93 <- any Core_Option_Option_Type.t_option (k, v);
    _17 <- ();
    goto BB61
  }
  BB61 {
    goto BB62
  }
  BB62 {
    goto BB68
  }
  BB63 {
    _96 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_12));
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _96)) };
    _97 <- key_2;
    assume { Resolve1.resolve key_2 };
    _95 <- ([#"../red_black_tree.rs" 778 28 778 54] delete_rec _96 _97);
    goto BB64
  }
  BB64 {
    goto BB65
  }
  BB65 {
    r_11 <- _95;
    _95 <- any Core_Option_Option_Type.t_option (k, v);
    _17 <- ();
    goto BB67
  }
  BB67 {
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    _99 <- borrow_mut ( * node_12);
    node_12 <- { node_12 with current = ( ^ _99) };
    _98 <- ([#"../red_black_tree.rs" 783 8 783 22] Balance0.balance _99);
    goto BB70
  }
  BB70 {
    assume { Resolve2.resolve node_12 };
    assume { Resolve4.resolve self_1 };
    _0 <- r_11;
    r_11 <- any Core_Option_Option_Type.t_option (k, v);
    goto BB71
  }
  BB71 {
    goto BB76
  }
  BB72 {
    goto BB73
  }
  BB73 {
    goto BB74
  }
  BB74 {
    goto BB75
  }
  BB75 {
    goto BB76
  }
  BB76 {
    return _0
  }
  
end
module RedBlackTree_Impl15_Delete_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel1 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl11_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val delete [#"../red_black_tree.rs" 795 4 795 55] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 787 15 787 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 788 14 788 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 789 14 793 5] match (result) with
      | Core_Option_Option_Type.C_Some (k, v) -> DeepModel0.deep_model k = DeepModel1.deep_model key /\ Map.get (ShallowModel0.shallow_model self) (DeepModel1.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel1.deep_model key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../red_black_tree.rs" 794 14 794 59] ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel1.deep_model key) (Core_Option_Option_Type.C_None) }
    
end
module RedBlackTree_Impl15_Delete
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.IntSize
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Cpn as Cpn0
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  use map.Map
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel1 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl15_DeleteRec_Interface as DeleteRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    function Cpn0.cpn = Cpn0.cpn,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel1.deep_model = DeepModel0.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty ()
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl11_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color1.color
  let rec cfg delete [#"../red_black_tree.rs" 795 4 795 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 787 15 787 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 788 14 788 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 789 14 793 5] match (result) with
      | Core_Option_Option_Type.C_Some (k, v) -> DeepModel0.deep_model k = DeepModel1.deep_model key /\ Map.get (ShallowModel0.shallow_model self) (DeepModel1.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel1.deep_model key) = Core_Option_Option_Type.C_None
      end }
    ensures { [#"../red_black_tree.rs" 794 14 794 59] ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel1.deep_model key) (Core_Option_Option_Type.C_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var key_2 : k;
  var _7 : Ghost.ghost_ty ();
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _13 : isize;
  var node_14 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _15 : bool;
  var _16 : bool;
  var _17 : RedBlackTree_Tree_Type.t_tree k v;
  var _18 : RedBlackTree_Color_Type.t_color;
  var _19 : ();
  var r_20 : Core_Option_Option_Type.t_option (k, v);
  var _21 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _22 : k;
  var _23 : ();
  var _24 : bool;
  var _25 : RedBlackTree_Tree_Type.t_tree k v;
  var _26 : RedBlackTree_Color_Type.t_color;
  var _27 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _28 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _29 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _10 <- ();
    _7 <- ([#"../red_black_tree.rs" 796 8 796 42] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _7 };
    _12 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _12)) };
    switch ( * _12)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB8
      end
  }
  BB2 {
    goto BB3
  }
  BB3 {
    node_14 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _12));
    _12 <- { _12 with current = (let Core_Option_Option_Type.C_Some a =  * _12 in Core_Option_Option_Type.C_Some ( ^ node_14)) };
    _17 <- RedBlackTree_Node_Type.node_left ( * node_14);
    _16 <- ([#"../red_black_tree.rs" 799 16 799 34] IsRed0.is_red _17);
    goto BB4
  }
  BB4 {
    _15 <- not _16;
    switch (_15)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    _18 <- RedBlackTree_Color_Type.C_Red;
    node_14 <- { node_14 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_14 in RedBlackTree_Node_Type.C_Node a _18 c d e) };
    _18 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve4.resolve node_14 };
    assume { Resolve1.resolve _12 };
    _11 <- ();
    goto BB7
  }
  BB6 {
    assume { Resolve4.resolve node_14 };
    _11 <- ();
    assume { Resolve1.resolve _12 };
    goto BB7
  }
  BB7 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _22 <- key_2;
    assume { Resolve2.resolve key_2 };
    r_20 <- ([#"../red_black_tree.rs" 805 16 805 36] DeleteRec0.delete_rec _21 _22);
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve _12 };
    assume { Resolve2.resolve key_2 };
    _0 <- Core_Option_Option_Type.C_None;
    assume { Resolve3.resolve self_1 };
    goto BB17
  }
  BB9 {
    _25 <-  * self_1;
    _24 <- ([#"../red_black_tree.rs" 806 11 806 24] IsRed0.is_red _25);
    goto BB10
  }
  BB10 {
    switch (_24)
      | False -> goto BB14
      | True -> goto BB11
      end
  }
  BB11 {
    _26 <- RedBlackTree_Color_Type.C_Black;
    _29 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * self_1 in RedBlackTree_Tree_Type.C_Tree ( ^ _29)) };
    _28 <- ([#"../red_black_tree.rs" 807 12 807 30] AsMut0.as_mut _29);
    goto BB12
  }
  BB12 {
    _27 <- ([#"../red_black_tree.rs" 807 12 807 39] Unwrap0.unwrap _28);
    goto BB13
  }
  BB13 {
    _27 <- { _27 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _27 in RedBlackTree_Node_Type.C_Node a _26 c d e) };
    _26 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve4.resolve _27 };
    assume { Resolve3.resolve self_1 };
    _23 <- ();
    goto BB15
  }
  BB14 {
    assume { Resolve3.resolve self_1 };
    _23 <- ();
    goto BB15
  }
  BB15 {
    _0 <- r_20;
    r_20 <- any Core_Option_Option_Type.t_option (k, v);
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 38 8 38 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module RedBlackTree_Impl15_Get_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone RedBlackTree_Impl11_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val get [#"../red_black_tree.rs" 817 4 817 44] (self : RedBlackTree_Tree_Type.t_tree k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../red_black_tree.rs" 812 15 812 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 813 14 816 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None
      end }
    
end
module RedBlackTree_Impl15_Get
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.IntSize
  use prelude.Int8
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl7_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  use map.Map
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve5 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve4 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve2 with
    type self = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty ()
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl11_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  let rec cfg get [#"../red_black_tree.rs" 817 4 817 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : RedBlackTree_Tree_Type.t_tree k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../red_black_tree.rs" 812 15 812 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 813 14 816 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option v;
  var self_1 : RedBlackTree_Tree_Type.t_tree k v;
  var key_2 : k;
  var _3 : ();
  var _6 : Ghost.ghost_ty ();
  var _9 : ();
  var tree_10 : RedBlackTree_Tree_Type.t_tree k v;
  var _11 : ();
  var _14 : ();
  var _15 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _16 : isize;
  var node_17 : RedBlackTree_Node_Type.t_node k v;
  var _18 : Core_Cmp_Ordering_Type.t_ordering;
  var _19 : k;
  var _20 : k;
  var _21 : k;
  var _22 : int8;
  var _23 : RedBlackTree_Tree_Type.t_tree k v;
  var _24 : RedBlackTree_Tree_Type.t_tree k v;
  var _25 : ();
  var _26 : v;
  var _27 : v;
  var _28 : RedBlackTree_Tree_Type.t_tree k v;
  var _29 : RedBlackTree_Tree_Type.t_tree k v;
  var _30 : ();
  var _31 : ();
  var _32 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _9 <- ();
    _6 <- ([#"../red_black_tree.rs" 818 8 818 42] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _6 };
    tree_10 <- self_1;
    assume { Resolve1.resolve self_1 };
    goto BB2
  }
  BB2 {
    invariant { [#"../red_black_tree.rs" 821 20 821 43] BstInvariant0.bst_invariant tree_10 };
    invariant { [#"../red_black_tree.rs" 821 8 821 45] forall v : v . HasMapping0.has_mapping self_1 (DeepModel0.deep_model key_2) v = HasMapping0.has_mapping tree_10 (DeepModel0.deep_model key_2) v };
    goto BB3
  }
  BB3 {
    _15 <- RedBlackTree_Tree_Type.tree_node tree_10;
    assume { Resolve1.resolve tree_10 };
    switch (_15)
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      | _ -> goto BB14
      end
  }
  BB4 {
    goto BB5
  }
  BB5 {
    node_17 <- Core_Option_Option_Type.some_0 _15;
    assume { Resolve2.resolve _15 };
    _19 <- key_2;
    _21 <- RedBlackTree_Node_Type.node_key node_17;
    _20 <- _21;
    assume { Resolve3.resolve _21 };
    _18 <- ([#"../red_black_tree.rs" 824 18 824 36] Cmp0.cmp _19 _20);
    goto BB6
  }
  BB6 {
    switch (_18)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB7
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB8
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB9
      end
  }
  BB7 {
    goto BB11
  }
  BB8 {
    goto BB12
  }
  BB9 {
    _29 <- RedBlackTree_Node_Type.node_right node_17;
    assume { Resolve4.resolve node_17 };
    _28 <- _29;
    assume { Resolve1.resolve _29 };
    tree_10 <- _28;
    _28 <- any RedBlackTree_Tree_Type.t_tree k v;
    _14 <- ();
    goto BB13
  }
  BB10 {
    assume { Resolve4.resolve node_17 };
    assume { Resolve3.resolve key_2 };
    absurd
  }
  BB11 {
    _24 <- RedBlackTree_Node_Type.node_left node_17;
    assume { Resolve4.resolve node_17 };
    _23 <- _24;
    assume { Resolve1.resolve _24 };
    tree_10 <- _23;
    _23 <- any RedBlackTree_Tree_Type.t_tree k v;
    _14 <- ();
    goto BB13
  }
  BB12 {
    assume { Resolve3.resolve key_2 };
    _27 <- RedBlackTree_Node_Type.node_val node_17;
    assume { Resolve4.resolve node_17 };
    _26 <- _27;
    assume { Resolve5.resolve _27 };
    _0 <- Core_Option_Option_Type.C_Some _26;
    goto BB15
  }
  BB13 {
    goto BB2
  }
  BB14 {
    assume { Resolve2.resolve _15 };
    assume { Resolve3.resolve key_2 };
    _11 <- ();
    _0 <- Core_Option_Option_Type.C_None;
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl15_GetMut_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  use map.Map
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
  clone RedBlackTree_Impl11_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val get_mut [#"../red_black_tree.rs" 839 4 839 56] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (borrowed v)
    requires {[#"../red_black_tree.rs" 833 15 833 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 834 14 834 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 835 14 838 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some ( * v) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some ( ^ v))
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None /\ ShallowModel1.shallow_model ( ^ self) = ShallowModel0.shallow_model self
      end }
    
end
module RedBlackTree_Impl15_GetMut
  type k
  type v
  use prelude.Borrow
  use prelude.Ghost
  use prelude.Int
  use prelude.IntSize
  use prelude.Int8
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Tree_Type as RedBlackTree_Tree_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl7_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl9_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl10_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  use map.Map
  clone RedBlackTree_Impl9_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl11_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = RedBlackTree_Tree_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  use RedBlackTree_Cp_Type as RedBlackTree_Cp_Type
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v))
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = Ghost.ghost_ty ()
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Tree_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl11_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  let rec cfg get_mut [#"../red_black_tree.rs" 839 4 839 56] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (RedBlackTree_Tree_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (borrowed v)
    requires {[#"../red_black_tree.rs" 833 15 833 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 834 14 834 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 835 14 838 5] match (result) with
      | Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some ( * v) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some ( ^ v))
      | Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None /\ ShallowModel1.shallow_model ( ^ self) = ShallowModel0.shallow_model self
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed v);
  var self_1 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var key_2 : k;
  var _3 : ();
  var _7 : Ghost.ghost_ty ();
  var _10 : ();
  var old_self_11 : Ghost.ghost_ty (borrowed (RedBlackTree_Tree_Type.t_tree k v));
  var _13 : ();
  var tree_14 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _15 : ();
  var _25 : ();
  var _26 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _27 : isize;
  var node_28 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _29 : Core_Cmp_Ordering_Type.t_ordering;
  var _30 : k;
  var _31 : k;
  var _32 : k;
  var _33 : int8;
  var _34 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _35 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _36 : ();
  var _37 : borrowed v;
  var _38 : borrowed v;
  var _39 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _40 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _45 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  var _46 : borrowed (RedBlackTree_Tree_Type.t_tree k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _10 <- ();
    _7 <- ([#"../red_black_tree.rs" 840 8 840 42] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _7 };
    _13 <- ();
    old_self_11 <- ([#"../red_black_tree.rs" 842 23 842 38] Ghost.new self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve old_self_11 };
    tree_14 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    goto BB3
  }
  BB3 {
    invariant { [#"../red_black_tree.rs" 845 20 845 43] BstInvariant0.bst_invariant ( * tree_14) };
    invariant { [#"../red_black_tree.rs" 846 20 846 46] HeightInvariant0.height_invariant ( * tree_14) };
    invariant { [#"../red_black_tree.rs" 847 20 847 45] ColorInvariant0.color_invariant ( * tree_14) };
    invariant { [#"../red_black_tree.rs" 845 8 845 45] forall v : v . HasMapping0.has_mapping ( ^ tree_14) (DeepModel0.deep_model key_2) v = HasMapping0.has_mapping ( ^ Ghost.inner old_self_11) (DeepModel0.deep_model key_2) v };
    invariant { [#"../red_black_tree.rs" 845 8 845 45] forall v : v . HasMapping0.has_mapping ( * tree_14) (DeepModel0.deep_model key_2) v = HasMapping0.has_mapping ( * Ghost.inner old_self_11) (DeepModel0.deep_model key_2) v };
    invariant { [#"../red_black_tree.rs" 845 8 845 45] (forall v : v . forall k : DeepModelTy0.deepModelTy . k = DeepModel0.deep_model key_2 \/ HasMapping0.has_mapping ( * tree_14) k v = HasMapping0.has_mapping ( ^ tree_14) k v) -> BstInvariant0.bst_invariant ( ^ tree_14) -> BstInvariant0.bst_invariant ( ^ Ghost.inner old_self_11) };
    invariant { [#"../red_black_tree.rs" 845 8 845 45] Height0.height ( * tree_14) = Height0.height ( ^ tree_14) /\ HeightInvariant0.height_invariant ( ^ tree_14) -> HeightInvariant0.height_invariant ( ^ Ghost.inner old_self_11) };
    invariant { [#"../red_black_tree.rs" 845 8 845 45] MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (Color0.color ( * tree_14))) ( ^ tree_14) -> MatchT0.match_t (RedBlackTree_Cp_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) ( ^ Ghost.inner old_self_11) };
    invariant { [#"../red_black_tree.rs" 845 8 845 45] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * tree_14) k v = HasMapping0.has_mapping ( ^ tree_14) k v -> HasMapping0.has_mapping ( * Ghost.inner old_self_11) k v = HasMapping0.has_mapping ( ^ Ghost.inner old_self_11) k v };
    goto BB4
  }
  BB4 {
    _26 <- borrow_mut (RedBlackTree_Tree_Type.tree_node ( * tree_14));
    tree_14 <- { tree_14 with current = (let RedBlackTree_Tree_Type.C_Tree a =  * tree_14 in RedBlackTree_Tree_Type.C_Tree ( ^ _26)) };
    switch ( * _26)
      | Core_Option_Option_Type.C_Some _ -> goto BB5
      | _ -> goto BB15
      end
  }
  BB5 {
    goto BB6
  }
  BB6 {
    node_28 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _26));
    _26 <- { _26 with current = (let Core_Option_Option_Type.C_Some a =  * _26 in Core_Option_Option_Type.C_Some ( ^ node_28)) };
    _30 <- key_2;
    _32 <- RedBlackTree_Node_Type.node_key ( * node_28);
    _31 <- _32;
    assume { Resolve3.resolve _32 };
    _29 <- ([#"../red_black_tree.rs" 858 18 858 36] Cmp0.cmp _30 _31);
    goto BB7
  }
  BB7 {
    switch (_29)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB8
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB9
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB10
      end
  }
  BB8 {
    goto BB12
  }
  BB9 {
    goto BB13
  }
  BB10 {
    _40 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_28));
    node_28 <- { node_28 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_28 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _40)) };
    _39 <- borrow_mut ( * _40);
    _40 <- { _40 with current = ( ^ _39) };
    _45 <- _39;
    _39 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    assume { Resolve5.resolve tree_14 };
    tree_14 <- _45;
    _25 <- ();
    assume { Resolve5.resolve _40 };
    goto BB14
  }
  BB11 {
    assume { Resolve4.resolve node_28 };
    assume { Resolve3.resolve key_2 };
    assume { Resolve2.resolve _26 };
    assume { Resolve5.resolve tree_14 };
    absurd
  }
  BB12 {
    _35 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_28));
    node_28 <- { node_28 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_28 in RedBlackTree_Node_Type.C_Node ( ^ _35) b c d e) };
    _34 <- borrow_mut ( * _35);
    _35 <- { _35 with current = ( ^ _34) };
    _46 <- _34;
    _34 <- any borrowed (RedBlackTree_Tree_Type.t_tree k v);
    assume { Resolve5.resolve tree_14 };
    tree_14 <- _46;
    _25 <- ();
    assume { Resolve5.resolve _35 };
    goto BB14
  }
  BB13 {
    assume { Resolve3.resolve key_2 };
    _38 <- borrow_mut (RedBlackTree_Node_Type.node_val ( * node_28));
    node_28 <- { node_28 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_28 in RedBlackTree_Node_Type.C_Node a b c ( ^ _38) e) };
    _37 <- borrow_mut ( * _38);
    _38 <- { _38 with current = ( ^ _37) };
    _0 <- Core_Option_Option_Type.C_Some _37;
    assume { Resolve6.resolve _38 };
    assume { Resolve4.resolve node_28 };
    assume { Resolve2.resolve _26 };
    goto BB16
  }
  BB14 {
    assume { Resolve4.resolve node_28 };
    assume { Resolve2.resolve _26 };
    goto BB3
  }
  BB15 {
    assume { Resolve2.resolve _26 };
    assume { Resolve3.resolve key_2 };
    _15 <- ();
    _0 <- Core_Option_Option_Type.C_None;
    goto BB16
  }
  BB16 {
    assume { Resolve5.resolve tree_14 };
    return _0
  }
  
end
module RedBlackTree_Impl16
  use prelude.Borrow
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  goal clone'_refn : [#"../red_black_tree.rs" 8 9 8 14] forall self : RedBlackTree_Color_Type.t_color . forall result : RedBlackTree_Color_Type.t_color . result = self -> result = self
end
module RedBlackTree_Impl17
  
end
module RedBlackTree_Impl2
  type k
  type v
end
module RedBlackTree_Impl3
  type k
  type v
end
