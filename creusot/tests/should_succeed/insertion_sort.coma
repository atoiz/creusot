
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
  function any_l (_ : 'b) : 'a
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  function any_l (_ : 'b) : 'a
  let rec t_range < 'idx > (input:t_range 'idx) (ret  (start:'idx) (end':'idx))= any
    [ good (start:'idx) (end':'idx)-> {C_Range start end' = input} (! ret {start} {end'})
    | bad (start:'idx) (end':'idx)-> {C_Range start end' <> input} {false} any ]
    
  function range_end (self : t_range 'idx) : 'idx =
    match self with
      | C_Range _ a -> a
      end
  function range_start (self : t_range 'idx) : 'idx =
    match self with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  function any_l (_ : 'b) : 'a
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module InsertionSort_InsertionSort
  let%span sinsertion_sort0 = "../insertion_sort.rs" 22 19 22 35
  let%span sinsertion_sort1 = "../insertion_sort.rs" 28 13 28 14
  let%span sinsertion_sort2 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort3 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort4 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort5 = "../insertion_sort.rs" 24 16 24 59
  let%span sinsertion_sort6 = "../insertion_sort.rs" 25 16 25 34
  let%span sinsertion_sort7 = "../insertion_sort.rs" 27 16 27 36
  let%span sinsertion_sort8 = "../insertion_sort.rs" 24 4 24 61
  let%span sinsertion_sort9 = "../insertion_sort.rs" 30 20 30 26
  let%span sinsertion_sort10 = "../insertion_sort.rs" 31 20 31 38
  let%span sinsertion_sort11 = "../insertion_sort.rs" 30 8 30 28
  let%span sinsertion_sort12 = "../insertion_sort.rs" 35 20 35 40
  let%span sinsertion_sort13 = "../insertion_sort.rs" 36 18 36 19
  let%span sinsertion_sort14 = "../insertion_sort.rs" 37 25 37 26
  let%span sinsertion_sort15 = "../insertion_sort.rs" 37 15 37 27
  let%span sinsertion_sort16 = "../insertion_sort.rs" 37 30 37 38
  let%span sinsertion_sort17 = "../insertion_sort.rs" 38 31 38 32
  let%span sinsertion_sort18 = "../insertion_sort.rs" 42 17 42 18
  let%span sinsertion_sort19 = "../insertion_sort.rs" 36 20 43 9
  let%span sinsertion_sort20 = "../insertion_sort.rs" 40 16 40 21
  let%span sinsertion_sort21 = "../insertion_sort.rs" 36 8 43 9
  let%span sinsertion_sort22 = "../insertion_sort.rs" 46 18 46 55
  let%span sinsertion_sort23 = "../insertion_sort.rs" 21 41 47 1
  let%span sinsertion_sort24 = "../insertion_sort.rs" 19 0 19 44
  let%span sinsertion_sort25 = "../insertion_sort.rs" 20 10 20 27
  let%span span26 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  let%span span27 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  let%span span28 = "../../../../creusot-contracts/src/std/iter/range.rs" 21 8 27 9
  let%span span29 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  let%span span30 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span span31 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 22 40 23
  let%span span32 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 31 40 33
  let%span span33 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 52 40 53
  let%span span34 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 61 40 63
  let%span span35 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 82 40 83
  let%span span36 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  let%span span37 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 21 33 25
  let%span span38 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  let%span span39 = "../insertion_sort.rs" 7 4 9 5
  let%span span40 = "../insertion_sort.rs" 15 8 15 35
  let%span span41 = "" 0 0 0 0
  let%span span42 = "../../../../creusot-contracts/src/std/slice.rs" 19 21 19 25
  let%span span43 = "../../../../creusot-contracts/src/std/slice.rs" 17 14 17 41
  let%span span44 = "../../../../creusot-contracts/src/std/slice.rs" 18 14 18 42
  let%span span45 = "../../../../creusot-contracts/src/std/slice.rs" 19 4 19 50
  let%span span46 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  let%span span47 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  let%span span48 = "../../../../creusot-contracts/src/std/slice.rs" 250 19 250 35
  let%span span49 = "../../../../creusot-contracts/src/std/slice.rs" 251 19 251 35
  let%span span50 = "" 0 0 0 0
  let%span span51 = "../../../../creusot-contracts/src/std/slice.rs" 252 8 252 52
  let%span span52 = "../../../../creusot-contracts/src/logic/ops.rs" 54 8 54 32
  let%span span53 = "../../../../creusot-contracts/src/logic/ops.rs" 43 8 43 31
  let%span span54 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  let%span span55 = "" 0 0 0 0
  let%span span56 = "../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  let%span span57 = "" 0 0 0 0
  let%span span58 = "../../../../creusot-contracts/src/logic/seq.rs" 107 8 107 37
  let%span span59 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  let%span span60 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  let%span span61 = "../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  let%span span62 = "../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  let%span span63 = "../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  let%span span64 = "" 0 0 0 0
  let%span span65 = "" 0 0 0 0
  let%span span66 = "" 0 0 0 0
  let%span span67 = "../../../../creusot-contracts/src/std/slice.rs" 238 0 347 1
  use prelude.UIntSize
  use seq.Seq
  predicate invariant'7 (self : Seq.seq usize) =
    [%#span26] true
  let rec invariant'7 (self:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'7 self} (! return' {result}) ]
    
  predicate inv'7 (_x : Seq.seq usize)
  let rec inv'7 (_x:Seq.seq usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'7 _x} (! return' {result}) ]
    
  axiom inv'7 : forall x : Seq.seq usize . inv'7 x = true
  use prelude.Int32
  predicate invariant'6 (self : Seq.seq int32) =
    [%#span26] true
  let rec invariant'6 (self:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'6 self} (! return' {result}) ]
    
  predicate inv'6 (_x : Seq.seq int32)
  let rec inv'6 (_x:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'6 _x} (! return' {result}) ]
    
  axiom inv'6 : forall x : Seq.seq int32 . inv'6 x = true
  use prelude.Slice
  predicate invariant'5 (self : slice int32) =
    [%#span26] true
  let rec invariant'5 (self:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'5 self} (! return' {result}) ]
    
  predicate inv'5 (_x : slice int32)
  let rec inv'5 (_x:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'5 _x} (! return' {result}) ]
    
  axiom inv'5 : forall x : slice int32 . inv'5 x = true
  use prelude.Borrow
  predicate invariant'4 (self : borrowed (slice int32)) =
    [%#span26] true
  let rec invariant'4 (self:borrowed (slice int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'4 self} (! return' {result}) ]
    
  predicate inv'4 (_x : borrowed (slice int32))
  let rec inv'4 (_x:borrowed (slice int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'4 _x} (! return' {result}) ]
    
  axiom inv'4 : forall x : borrowed (slice int32) . inv'4 x = true
  use Core_Option_Option_Type as Option'0
  predicate invariant'3 (self : Option'0.t_option usize) =
    [%#span26] true
  let rec invariant'3 (self:Option'0.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'3 self} (! return' {result}) ]
    
  predicate inv'3 (_x : Option'0.t_option usize)
  let rec inv'3 (_x:Option'0.t_option usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'3 _x} (! return' {result}) ]
    
  axiom inv'3 : forall x : Option'0.t_option usize . inv'3 x = true
  use Core_Ops_Range_Range_Type as Range'0
  predicate invariant'2 (self : borrowed (Range'0.t_range usize)) =
    [%#span26] true
  let rec invariant'2 (self:borrowed (Range'0.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'2 self} (! return' {result}) ]
    
  predicate inv'2 (_x : borrowed (Range'0.t_range usize))
  let rec inv'2 (_x:borrowed (Range'0.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'2 _x} (! return' {result}) ]
    
  axiom inv'2 : forall x : borrowed (Range'0.t_range usize) . inv'2 x = true
  predicate invariant'1 (self : slice int32) =
    [%#span26] true
  let rec invariant'1 (self:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'1 self} (! return' {result}) ]
    
  predicate inv'1 (_x : slice int32)
  let rec inv'1 (_x:slice int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'1 _x} (! return' {result}) ]
    
  axiom inv'1 : forall x : slice int32 . inv'1 x = true
  use seq.Seq
  predicate inv'0 (_x : Range'0.t_range usize)
  let rec inv'0 (_x:Range'0.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = inv'0 _x} (! return' {result}) ]
    
  use prelude.Int
  use seq.Seq
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  function deep_model'0 (self : usize) : int =
    [%#span27] UIntSize.to_int self
  let rec deep_model'0 (self:usize) (return'  (ret:int))= any
    [ return' (result:int)-> {result = deep_model'0 self} (! return' {result}) ]
    
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces'0 (self : Range'0.t_range usize) (visited : Seq.seq usize) (o : Range'0.t_range usize) =
    [%#span28] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    <= deep_model'0 (Core_Ops_Range_Range_Type.range_start o)
    /\ (Seq.length visited > 0
     -> deep_model'0 (Core_Ops_Range_Range_Type.range_start o) <= deep_model'0 (Core_Ops_Range_Range_Type.range_end o))
    /\ Seq.length visited
    = deep_model'0 (Core_Ops_Range_Range_Type.range_start o) - deep_model'0 (Core_Ops_Range_Range_Type.range_start self)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (Core_Ops_Range_Range_Type.range_start self) + i)
  let rec produces'0 (self:Range'0.t_range usize) (visited:Seq.seq usize) (o:Range'0.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = produces'0 self visited o} (! return' {result}) ]
    
  function produces_trans'0 (a : Range'0.t_range usize) (ab : Seq.seq usize) (b : Range'0.t_range usize) (bc : Seq.seq usize) (c : Range'0.t_range usize) : ()
    
  let rec produces_trans'0 (a:Range'0.t_range usize) (ab:Seq.seq usize) (b:Range'0.t_range usize) (bc:Seq.seq usize) (c:Range'0.t_range usize) (return'  (ret:()))= {[@expl:precondition] [%#span35] inv'0 c}
    {[@expl:precondition] [%#span34] inv'7 bc}
    {[@expl:precondition] [%#span33] inv'0 b}
    {[@expl:precondition] [%#span32] inv'7 ab}
    {[@expl:precondition] [%#span31] inv'0 a}
    {[@expl:precondition] [%#span30] produces'0 b bc c}
    {[@expl:precondition] [%#span29] produces'0 a ab b}
    any [ return' (result:())-> {result = produces_trans'0 a ab b bc c} (! return' {result}) ] 
  axiom produces_trans'0_spec : forall a : Range'0.t_range usize, ab : Seq.seq usize, b : Range'0.t_range usize, bc : Seq.seq usize, c : Range'0.t_range usize . ([%#span29] produces'0 a ab b)
   -> ([%#span30] produces'0 b bc c)
   -> ([%#span31] inv'0 a)
   -> ([%#span32] inv'7 ab)
   -> ([%#span33] inv'0 b)
   -> ([%#span34] inv'7 bc)  -> ([%#span35] inv'0 c)  -> ([%#span36] produces'0 a (Seq.(++) ab bc) c)
  use seq.Seq
  function produces_refl'0 (self : Range'0.t_range usize) : ()
  let rec produces_refl'0 (self:Range'0.t_range usize) (return'  (ret:()))= {[@expl:precondition] [%#span37] inv'0 self}
    any [ return' (result:())-> {result = produces_refl'0 self} (! return' {result}) ] 
  axiom produces_refl'0_spec : forall self : Range'0.t_range usize . ([%#span37] inv'0 self)
   -> ([%#span38] produces'0 self (Seq.empty  : Seq.seq usize) self)
  predicate invariant'0 (self : Range'0.t_range usize) =
    [%#span26] true
  let rec invariant'0 (self:Range'0.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = invariant'0 self} (! return' {result}) ]
    
  axiom inv'0 : forall x : Range'0.t_range usize . inv'0 x = true
  use int.Int
  use seq.Seq
  predicate sorted_range'0 [#"../insertion_sort.rs" 6 0 6 63] (s : Seq.seq int32) (l : int) (u : int) =
    [%#span39] forall j : int . forall i : int . l <= i /\ i < j /\ j < u  -> Seq.get s i <= Seq.get s j
  let rec sorted_range'0 (s:Seq.seq int32) (l:int) (u:int) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = sorted_range'0 s l u} (! return' {result}) ]
    
  use seq.Seq
  predicate sorted'0 [#"../insertion_sort.rs" 13 0 13 41] (s : Seq.seq int32) =
    [%#span40] sorted_range'0 s 0 (Seq.length s)
  let rec sorted'0 (s:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = sorted'0 s} (! return' {result}) ]
    
  use prelude.Slice
  constant max'0 : usize = [%#span41] (18446744073709551615 : usize)
  function shallow_model'2 (self : slice int32) : Seq.seq int32
  let rec shallow_model'2 (self:slice int32) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [%#span42] inv'5 self}
    any [ return' (result:Seq.seq int32)-> {result = shallow_model'2 self} (! return' {result}) ] 
  axiom shallow_model'2_spec : forall self : slice int32 . ([%#span42] inv'5 self)
   -> ([%#span45] inv'6 (shallow_model'2 self))
  && ([%#span44] shallow_model'2 self = Slice.id self)
  && ([%#span43] Seq.length (shallow_model'2 self) <= UIntSize.to_int (max'0 : usize))
  use prelude.Snapshot
  use prelude.Intrinsic
  predicate resolve'1 (self : borrowed (slice int32)) =
    [%#span46]  ^ self =  * self
  let rec resolve'1 (self:borrowed (slice int32)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'1 self} (! return' {result}) ]
    
  use seq.Permut
  function shallow_model'0 (self : borrowed (slice int32)) : Seq.seq int32 =
    [%#span47] shallow_model'2 ( * self)
  let rec shallow_model'0 (self:borrowed (slice int32)) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'0 self} (! return' {result}) ]
    
  let rec swap'0 (self:borrowed (slice int32)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] [%#span50] inv'4 self}
    {[@expl:precondition] [%#span49] UIntSize.to_int b < Seq.length (shallow_model'0 self)}
    {[@expl:precondition] [%#span48] UIntSize.to_int a < Seq.length (shallow_model'0 self)}
    any
    [ return' (result:())-> {[%#span51] Permut.exchange (shallow_model'2 ( ^ self)) (shallow_model'0 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  function index_logic'1 [@inline:trivial] (self : slice int32) (ix : usize) : int32 =
    [%#span52] Seq.get (shallow_model'2 self) (UIntSize.to_int ix)
  let rec index_logic'1 (self:slice int32) (ix:usize) (return'  (ret:int32))= any
    [ return' (result:int32)-> {result = index_logic'1 self ix} (! return' {result}) ]
    
  function index_logic'0 [@inline:trivial] (self : slice int32) (ix : int) : int32 =
    [%#span53] Seq.get (shallow_model'2 self) ix
  let rec index_logic'0 (self:slice int32) (ix:int) (return'  (ret:int32))= any
    [ return' (result:int32)-> {result = index_logic'0 self ix} (! return' {result}) ]
    
  use seq.Seq
  predicate resolve'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span46]  ^ self =  * self
  let rec resolve'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = resolve'0 self} (! return' {result}) ]
    
  predicate completed'0 (self : borrowed (Range'0.t_range usize)) =
    [%#span54] resolve'0 self
    /\ deep_model'0 (Core_Ops_Range_Range_Type.range_start ( * self))
    >= deep_model'0 (Core_Ops_Range_Range_Type.range_end ( * self))
  let rec completed'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = completed'0 self} (! return' {result}) ]
    
  let rec next'0 (self:borrowed (Range'0.t_range usize)) (return'  (ret:Option'0.t_option usize))= {[@expl:precondition] [%#span55] inv'2 self}
    any
    [ return' (result:Option'0.t_option usize)-> {[%#span57] inv'3 result}
      {[%#span56] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 ( * self) (Seq.singleton v) ( ^ self)
        end}
      (! return' {result}) ]
    
  use prelude.Snapshot
  use seq.Permut
  predicate permutation_of'0 (self : Seq.seq int32) (o : Seq.seq int32) =
    [%#span58] Permut.permut self o 0 (Seq.length self)
  let rec permutation_of'0 (self:Seq.seq int32) (o:Seq.seq int32) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = permutation_of'0 self o} (! return' {result}) ]
    
  function shallow_model'4 (self : borrowed (slice int32)) : Seq.seq int32 =
    [%#span59] shallow_model'0 self
  let rec shallow_model'4 (self:borrowed (slice int32)) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'4 self} (! return' {result}) ]
    
  function shallow_model'1 (self : Snapshot.snap_ty (borrowed (slice int32))) : Seq.seq int32 =
    [%#span60] shallow_model'4 (Snapshot.inner self)
  let rec shallow_model'1 (self:Snapshot.snap_ty (borrowed (slice int32))) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'1 self} (! return' {result}) ]
    
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  use prelude.Snapshot
  predicate into_iter_post'0 (self : Range'0.t_range usize) (res : Range'0.t_range usize) =
    [%#span61] self = res
  let rec into_iter_post'0 (self:Range'0.t_range usize) (res:Range'0.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_post'0 self res} (! return' {result}) ]
    
  predicate into_iter_pre'0 (self : Range'0.t_range usize) =
    [%#span62] true
  let rec into_iter_pre'0 (self:Range'0.t_range usize) (return'  (ret:bool))= any
    [ return' (result:bool)-> {result = into_iter_pre'0 self} (! return' {result}) ]
    
  let rec into_iter'0 (self:Range'0.t_range usize) (return'  (ret:Range'0.t_range usize))= {[@expl:precondition] [%#span64] inv'0 self}
    {[@expl:precondition] [%#span63] into_iter_pre'0 self}
    any
    [ return' (result:Range'0.t_range usize)-> {[%#span65] inv'0 result}
      {[%#span63] into_iter_post'0 self result}
      (! return' {result}) ]
    
  function shallow_model'3 (self : slice int32) : Seq.seq int32 =
    [%#span59] shallow_model'2 self
  let rec shallow_model'3 (self:slice int32) (return'  (ret:Seq.seq int32))= any
    [ return' (result:Seq.seq int32)-> {result = shallow_model'3 self} (! return' {result}) ]
    
  let rec len'0 (self:slice int32) (return'  (ret:usize))= {[@expl:precondition] [%#span66] inv'1 self}
    any
    [ return' (result:usize)-> {[%#span67] Seq.length (shallow_model'3 self) = UIntSize.to_int result}
      (! return' {result}) ]
    
  use prelude.Snapshot
  let rec insertion_sort (array:borrowed (slice int32)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &original <- [%#sinsertion_sort0] Snapshot.new array ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 { * array} (fun (_ret':usize) ->  [ &n <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_10 <- Range'0.C_Range ([%#sinsertion_sort1] (1 : usize)) n : Range'0.t_range usize ] s1
      | s1 = into_iter'0 {_10} (fun (_ret':Range'0.t_range usize) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 =  [ &iter_old <- ([%#sinsertion_sort2] Snapshot.new iter) : Snapshot.snap_ty (Range'0.t_range usize) ] s1
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = 
        [ &produced <- ([%#sinsertion_sort3] Snapshot.new (Seq.empty  : Seq.seq usize)) : Snapshot.snap_ty (Seq.seq usize) ]
        
        s1
      | s1 = bb5 ]
      
    | bb5 = s0 [ s0 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] [%#sinsertion_sort7]  ^ array =  ^ Snapshot.inner original}
        {[@expl:loop invariant] [%#sinsertion_sort4] permutation_of'0 (shallow_model'1 original) (shallow_model'0 array)}
        {[@expl:loop invariant] [%#sinsertion_sort6] Seq.length (shallow_model'0 array) = UIntSize.to_int n}
        {[@expl:loop invariant] [%#sinsertion_sort5] sorted_range'0 (shallow_model'0 array) 0 (Seq.length (Snapshot.inner produced)
        + 1)}
        {[@expl:loop invariant] [%#sinsertion_sort4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#sinsertion_sort4] inv'0 iter}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <Range'0.t_range usize> {iter}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->  [ &_25 <- _ret' ]  [ &iter <-  ^ _25 ] s1)
          | s1 = Borrow.borrow_final <Range'0.t_range usize> { * _25} {Borrow.get_id _25}
              (fun (_ret':borrowed (Range'0.t_range usize)) ->
                 [ &_24 <- _ret' ] 
                 [ &_25 <- { _25 with current = ( ^ _24) ; } ] 
                s2)
          | s2 = next'0 {_24} (fun (_ret':Option'0.t_option usize) ->  [ &_23 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'0 _25}- s1
          | s1 = any
            [ br0 -> {_23 = Option'0.C_None } (! bb11) | br1 (a:usize)-> {_23 = Option'0.C_Some a} (! bb10) ]
             ]
          
        | bb10 = s0 [ s0 = bb12 ] 
        | bb12 = s0
          [ s0 = Option'0.some <usize> {_23} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_28 <- ([%#sinsertion_sort8] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem))) : Snapshot.snap_ty (Seq.seq usize) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _28 ] 
            (any [ any_ (_any:Snapshot.snap_ty (Seq.seq usize))-> (!  [ &_28 <- _any ] s1) ] )
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &j <- i ] s3
          | s3 = bb14 ]
          
        | bb14 = bb14
          [ bb14 = {[@expl:loop invariant] [%#sinsertion_sort12]  ^ array =  ^ Snapshot.inner original}
            {[@expl:loop invariant] [%#sinsertion_sort11] forall a : int . UIntSize.to_int j + 1 <= a
            /\ a <= UIntSize.to_int i  -> index_logic'1 ( * array) j < index_logic'0 ( * array) a}
            {[@expl:loop invariant] [%#sinsertion_sort11] forall b : int . forall a : int . 0 <= a
            /\ a <= b /\ b <= UIntSize.to_int i
             -> a <> UIntSize.to_int j
             -> b <> UIntSize.to_int j  -> index_logic'0 ( * array) a <= index_logic'0 ( * array) b}
            {[@expl:loop invariant] [%#sinsertion_sort11] permutation_of'0 (shallow_model'1 original) (shallow_model'0 array)}
            {[@expl:loop invariant] [%#sinsertion_sort10] Seq.length (shallow_model'0 array) = UIntSize.to_int n}
            {[@expl:loop invariant] [%#sinsertion_sort9] j <= i}
            (! s0) [ s0 = bb15 ] 
            [ bb15 = s0
              [ s0 = UIntSize.gt {j} {[%#sinsertion_sort13] (0 : usize)} (fun (_ret':bool) ->  [ &_38 <- _ret' ] s1)
              | s1 = any [ br0 -> {_38 = false} (! bb22) | br1 -> {_38} (! bb16) ]  ]
              
            | bb16 = s0
              [ s0 = UIntSize.sub {j} {[%#sinsertion_sort14] (1 : usize)} (fun (_ret':usize) ->  [ &_43 <- _ret' ] s1)
              | s1 =  [ &_45 <- Slice.length ( * array) ] s2
              | s2 = UIntSize.lt {_43} {_45} (fun (_ret':bool) ->  [ &_46 <- _ret' ] s3)
              | s3 = {[@expl:index in bounds] [%#sinsertion_sort15] _46} s4
              | s4 = bb17 ]
              
            | bb17 = s0
              [ s0 =  [ &_48 <- j ] s1
              | s1 =  [ &_49 <- Slice.length ( * array) ] s2
              | s2 = UIntSize.lt {_48} {_49} (fun (_ret':bool) ->  [ &_50 <- _ret' ] s3)
              | s3 = {[@expl:index in bounds] [%#sinsertion_sort16] _50} s4
              | s4 = bb18 ]
              
            | bb18 = s0
              [ s0 = Slice.get <int32> { * array} {_43}
                  (fun (r'0:int32) ->
                    Slice.get <int32> { * array} {_48}
                      (fun (r'1:int32) -> Int32.gt {r'0} {r'1} (fun (_ret':bool) ->  [ &_41 <- _ret' ] s1)))
              | s1 = any [ br0 -> {_41 = false} (! bb21) | br1 -> {_41} (! bb19) ]  ]
              
            | bb19 = s0
              [ s0 = Borrow.borrow_mut <slice int32> { * array}
                  (fun (_ret':borrowed (slice int32)) ->
                     [ &_52 <- _ret' ] 
                     [ &array <- { array with current = ( ^ _52) ; } ] 
                    s1)
              | s1 = UIntSize.sub {j} {[%#sinsertion_sort17] (1 : usize)} (fun (_ret':usize) ->  [ &_53 <- _ret' ] s2)
              | s2 = swap'0 {_52} {_53} {j} (fun (_ret':()) ->  [ &_51 <- _ret' ] s3)
              | s3 = bb20 ]
              
            | bb20 = s0
              [ s0 = UIntSize.sub {j} {[%#sinsertion_sort18] (1 : usize)} (fun (_ret':usize) ->  [ &j <- _ret' ] s1)
              | s1 =  [ &_22 <- [%#sinsertion_sort19] () ] s2
              | s2 = bb14 ]
               ]
             ]
          
        | bb21 = s0 [ s0 =  [ &_22 <- [%#sinsertion_sort20] () ] s1 | s1 = bb23 ] 
        | bb22 = s0 [ s0 =  [ &_22 <- [%#sinsertion_sort21] () ] s1 | s1 = bb23 ] 
        | bb23 = s0 [ s0 = bb6 ]  ]
         ]
      
    | bb9 = s0 [ s0 = -{resolve'1 array}- s1 | s1 = {[%#sinsertion_sort4] false} any ] 
    | bb11 = s0
      [ s0 = -{resolve'1 array}- s1
      | s1 = {[@expl:assertion] [%#sinsertion_sort22] sorted_range'0 (shallow_model'0 array) 0 (Seq.length (shallow_model'0 array))}
        s2
      | s2 =  [ &_0 <- [%#sinsertion_sort23] () ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () : ()
    | & array : borrowed (slice int32) = array
    | & original : Snapshot.snap_ty (borrowed (slice int32)) = any_l () : Snapshot.snap_ty (borrowed (slice int32))
    | & n : usize = any_l () : usize
    | & iter : Range'0.t_range usize = any_l () : Range'0.t_range usize
    | & _10 : Range'0.t_range usize = any_l () : Range'0.t_range usize
    | & iter_old : Snapshot.snap_ty (Range'0.t_range usize) = any_l () : Snapshot.snap_ty (Range'0.t_range usize)
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & _22 : () = any_l () : ()
    | & _23 : Option'0.t_option usize = any_l () : Option'0.t_option usize
    | & _24 : borrowed (Range'0.t_range usize) = any_l () : borrowed (Range'0.t_range usize)
    | & _25 : borrowed (Range'0.t_range usize) = any_l () : borrowed (Range'0.t_range usize)
    | & __creusot_proc_iter_elem : usize = any_l () : usize
    | & _28 : Snapshot.snap_ty (Seq.seq usize) = any_l () : Snapshot.snap_ty (Seq.seq usize)
    | & i : usize = any_l () : usize
    | & j : usize = any_l () : usize
    | & _38 : bool = any_l () : bool
    | & _41 : bool = any_l () : bool
    | & _43 : usize = any_l () : usize
    | & _45 : usize = any_l () : usize
    | & _46 : bool = any_l () : bool
    | & _48 : usize = any_l () : usize
    | & _49 : usize = any_l () : usize
    | & _50 : bool = any_l () : bool
    | & _51 : () = any_l () : ()
    | & _52 : borrowed (slice int32) = any_l () : borrowed (slice int32)
    | & _53 : usize = any_l () : usize ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sinsertion_sort25] sorted'0 (shallow_model'2 ( ^ array))}
      {[@expl:postcondition] [%#sinsertion_sort24] permutation_of'0 (shallow_model'0 array) (shallow_model'2 ( ^ array))}
      (! return' {result}) ]
    
end
