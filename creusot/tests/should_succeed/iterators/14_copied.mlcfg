
module C14Copied_Copied_Type
  type t_copied 'i =
    | C_Copied 'i
    
  let function copied_iter (self : t_copied 'i) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Copied a -> a
      end
end
module C14Copied_Common_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C14Copied_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
end
module C14Copied_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed [#"../common.rs" 11 4 11 36] (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C14Copied_Impl0_Completed_Stub
  type i
  type t
  use prelude.Borrow
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate completed [#"../14_copied.rs" 21 4 21 35] (self : borrowed (C14Copied_Copied_Type.t_copied i))
end
module C14Copied_Impl0_Completed_Interface
  type i
  type t
  use prelude.Borrow
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate completed [#"../14_copied.rs" 21 4 21 35] (self : borrowed (C14Copied_Copied_Type.t_copied i))
end
module C14Copied_Impl0_Completed
  type i
  type t
  use prelude.Borrow
  clone C14Copied_Common_Iterator_Completed_Stub as Completed0 with
    type self = i
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate completed [#"../14_copied.rs" 21 4 21 35] (self : borrowed (C14Copied_Copied_Type.t_copied i)) =
    [#"../14_copied.rs" 22 8 22 43] Completed0.completed {current = C14Copied_Copied_Type.copied_iter ( * self); final = C14Copied_Copied_Type.copied_iter ( ^ self)}
  val completed [#"../14_copied.rs" 21 4 21 35] (self : borrowed (C14Copied_Copied_Type.t_copied i)) : bool
    ensures { result = completed self }
    
end
module C14Copied_Common_Iterator_Item_Type
  type self
  type item
end
module C14Copied_Common_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C14Copied_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module C14Copied_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces [#"../common.rs" 8 4 8 66] (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module C14Copied_Impl0_Produces_Stub
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate produces [#"../14_copied.rs" 26 4 26 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i)
    
end
module C14Copied_Impl0_Produces_Interface
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate produces [#"../14_copied.rs" 26 4 26 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i)
    
end
module C14Copied_Impl0_Produces
  type i
  type t
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = i,
    type Item0.item = t
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate produces [#"../14_copied.rs" 26 4 26 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i)
    
   =
    [#"../14_copied.rs" 27 8 31 9] exists s : Seq.seq t . Produces0.produces (C14Copied_Copied_Type.copied_iter self) s (C14Copied_Copied_Type.copied_iter o) /\ Seq.length visited = Seq.length s /\ (forall i : int . 0 <= i /\ i < Seq.length s -> Seq.get visited i = Seq.get s i)
  val produces [#"../14_copied.rs" 26 4 26 64] (self : C14Copied_Copied_Type.t_copied i) (visited : Seq.seq t) (o : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module C14Copied_Impl1_Invariant_Stub
  type i
  type t
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate invariant' [#"../14_copied.rs" 59 4 59 30] (self : C14Copied_Copied_Type.t_copied i)
end
module C14Copied_Impl1_Invariant_Interface
  type i
  type t
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate invariant' [#"../14_copied.rs" 59 4 59 30] (self : C14Copied_Copied_Type.t_copied i)
end
module C14Copied_Impl1_Invariant
  type i
  type t
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  predicate invariant' [#"../14_copied.rs" 59 4 59 30] (self : C14Copied_Copied_Type.t_copied i) =
    [#"../14_copied.rs" 60 8 62 9] Invariant0.invariant' (C14Copied_Copied_Type.copied_iter self)
  val invariant' [#"../14_copied.rs" 59 4 59 30] (self : C14Copied_Copied_Type.t_copied i) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"../../../../../creusot-contracts/src/invariant.rs" 18 8 18 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../../creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"../../../../../creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module C14Copied_Common_Iterator_ProducesRefl_Stub
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
end
module C14Copied_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Invariant0.invariant' a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C14Copied_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  val produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
    requires {[#"../common.rs" 15 21 15 22] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 15 21 15 22] Invariant0.invariant' a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
end
module C14Copied_Common_Iterator_ProducesTrans_Stub
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
end
module C14Copied_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Invariant0.invariant' a) -> ([#"../common.rs" 21 52 21 53] Invariant0.invariant' b) -> ([#"../common.rs" 21 82 21 83] Invariant0.invariant' c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C14Copied_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 18 15 18 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 19 15 19 32] Produces0.produces b bc c}
    requires {[#"../common.rs" 21 22 21 23] Invariant0.invariant' a}
    requires {[#"../common.rs" 21 52 21 53] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 82 21 83] Invariant0.invariant' c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 21 22 21 23] Invariant0.invariant' a) -> ([#"../common.rs" 21 52 21 53] Invariant0.invariant' b) -> ([#"../common.rs" 21 82 21 83] Invariant0.invariant' c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C14Copied_Impl0_ProducesRefl_Stub
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone C14Copied_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type t = t
  function produces_refl [#"../14_copied.rs" 36 4 36 29] (a : C14Copied_Copied_Type.t_copied i) : ()
end
module C14Copied_Impl0_ProducesRefl_Interface
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone C14Copied_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type t = t
  function produces_refl [#"../14_copied.rs" 36 4 36 29] (a : C14Copied_Copied_Type.t_copied i) : ()
  axiom produces_refl_spec : forall a : C14Copied_Copied_Type.t_copied i . ([#"../14_copied.rs" 36 21 36 22] Invariant0.invariant' a) -> ([#"../14_copied.rs" 35 14 35 39] Produces0.produces a (Seq.empty ) a)
end
module C14Copied_Impl0_ProducesRefl
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone C14Copied_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type t = t
  function produces_refl [#"../14_copied.rs" 36 4 36 29] (a : C14Copied_Copied_Type.t_copied i) : () =
    [#"../14_copied.rs" 34 4 34 10] ()
  val produces_refl [#"../14_copied.rs" 36 4 36 29] (a : C14Copied_Copied_Type.t_copied i) : ()
    requires {[#"../14_copied.rs" 36 21 36 22] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C14Copied_Copied_Type.t_copied i . ([#"../14_copied.rs" 36 21 36 22] Invariant0.invariant' a) -> ([#"../14_copied.rs" 35 14 35 39] Produces0.produces a (Seq.empty ) a)
end
module C14Copied_Impl0_ProducesRefl_Impl
  type i
  type t
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone C14Copied_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone C14Copied_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = t,
    axiom .
  clone C14Copied_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = t,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  clone C14Copied_Impl1_Invariant as Invariant0 with
    type i = i,
    type t = t,
    predicate Invariant0.invariant' = Invariant1.invariant'
  let rec ghost function produces_refl [#"../14_copied.rs" 36 4 36 29] (a : C14Copied_Copied_Type.t_copied i) : ()
    requires {[#"../14_copied.rs" 36 21 36 22] Invariant0.invariant' a}
    ensures { [#"../14_copied.rs" 35 14 35 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../14_copied.rs" 34 4 34 10] ()
end
module C14Copied_Impl0_ProducesTrans_Stub
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type t = t
  clone C14Copied_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  function produces_trans [#"../14_copied.rs" 42 4 42 90] (a : C14Copied_Copied_Type.t_copied i) (ab : Seq.seq t) (b : C14Copied_Copied_Type.t_copied i) (bc : Seq.seq t) (c : C14Copied_Copied_Type.t_copied i) : ()
    
end
module C14Copied_Impl0_ProducesTrans_Interface
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type t = t
  clone C14Copied_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  function produces_trans [#"../14_copied.rs" 42 4 42 90] (a : C14Copied_Copied_Type.t_copied i) (ab : Seq.seq t) (b : C14Copied_Copied_Type.t_copied i) (bc : Seq.seq t) (c : C14Copied_Copied_Type.t_copied i) : ()
    
  axiom produces_trans_spec : forall a : C14Copied_Copied_Type.t_copied i, ab : Seq.seq t, b : C14Copied_Copied_Type.t_copied i, bc : Seq.seq t, c : C14Copied_Copied_Type.t_copied i . ([#"../14_copied.rs" 39 15 39 32] Produces0.produces a ab b) -> ([#"../14_copied.rs" 40 15 40 32] Produces0.produces b bc c) -> ([#"../14_copied.rs" 42 22 42 23] Invariant0.invariant' a) -> ([#"../14_copied.rs" 42 52 42 53] Invariant0.invariant' b) -> ([#"../14_copied.rs" 42 82 42 83] Invariant0.invariant' c) -> ([#"../14_copied.rs" 41 14 41 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C14Copied_Impl0_ProducesTrans
  type i
  type t
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl1_Invariant_Stub as Invariant0 with
    type i = i,
    type t = t
  clone C14Copied_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  function produces_trans [#"../14_copied.rs" 42 4 42 90] (a : C14Copied_Copied_Type.t_copied i) (ab : Seq.seq t) (b : C14Copied_Copied_Type.t_copied i) (bc : Seq.seq t) (c : C14Copied_Copied_Type.t_copied i) : ()
    
   =
    [#"../14_copied.rs" 38 4 38 10] ()
  val produces_trans [#"../14_copied.rs" 42 4 42 90] (a : C14Copied_Copied_Type.t_copied i) (ab : Seq.seq t) (b : C14Copied_Copied_Type.t_copied i) (bc : Seq.seq t) (c : C14Copied_Copied_Type.t_copied i) : ()
    requires {[#"../14_copied.rs" 39 15 39 32] Produces0.produces a ab b}
    requires {[#"../14_copied.rs" 40 15 40 32] Produces0.produces b bc c}
    requires {[#"../14_copied.rs" 42 22 42 23] Invariant0.invariant' a}
    requires {[#"../14_copied.rs" 42 52 42 53] Invariant0.invariant' b}
    requires {[#"../14_copied.rs" 42 82 42 83] Invariant0.invariant' c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C14Copied_Copied_Type.t_copied i, ab : Seq.seq t, b : C14Copied_Copied_Type.t_copied i, bc : Seq.seq t, c : C14Copied_Copied_Type.t_copied i . ([#"../14_copied.rs" 39 15 39 32] Produces0.produces a ab b) -> ([#"../14_copied.rs" 40 15 40 32] Produces0.produces b bc c) -> ([#"../14_copied.rs" 42 22 42 23] Invariant0.invariant' a) -> ([#"../14_copied.rs" 42 52 42 53] Invariant0.invariant' b) -> ([#"../14_copied.rs" 42 82 42 83] Invariant0.invariant' c) -> ([#"../14_copied.rs" 41 14 41 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C14Copied_Impl0_ProducesTrans_Impl
  type i
  type t
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C14Copied_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone C14Copied_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = t,
    axiom .
  clone C14Copied_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = t,
    axiom .
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl1_Invariant as Invariant0 with
    type i = i,
    type t = t,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone C14Copied_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  let rec ghost function produces_trans [#"../14_copied.rs" 42 4 42 90] (a : C14Copied_Copied_Type.t_copied i) (ab : Seq.seq t) (b : C14Copied_Copied_Type.t_copied i) (bc : Seq.seq t) (c : C14Copied_Copied_Type.t_copied i) : ()
    requires {[#"../14_copied.rs" 39 15 39 32] Produces0.produces a ab b}
    requires {[#"../14_copied.rs" 40 15 40 32] Produces0.produces b bc c}
    requires {[#"../14_copied.rs" 42 22 42 23] Invariant0.invariant' a}
    requires {[#"../14_copied.rs" 42 52 42 53] Invariant0.invariant' b}
    requires {[#"../14_copied.rs" 42 82 42 83] Invariant0.invariant' c}
    ensures { [#"../14_copied.rs" 41 14 41 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../14_copied.rs" 38 4 38 10] ()
end
module CreusotContracts_Invariant_Impl1_Invariant_Stub
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant_Interface
  type t
  use prelude.Borrow
  predicate invariant' (self : borrowed t)
end
module CreusotContracts_Invariant_Impl1_Invariant
  type t
  use prelude.Borrow
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = t
  predicate invariant' (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 34 20 34 62] Invariant0.invariant' ( * self) /\ Invariant0.invariant' ( ^ self)
  val invariant' (self : borrowed t) : bool
    ensures { result = invariant' self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 23 20 23 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C14Copied_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = self
  clone C14Copied_Common_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone C14Copied_Common_Iterator_Completed_Stub as Completed0 with
    type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = self
  val next [#"../common.rs" 27 4 27 45] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 27 17 27 21] Invariant0.invariant' self}
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Option_Impl2_Copied_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val copied (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option t
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 73 16 73 59] self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { [#"../../../../../creusot-contracts/src/std/option.rs" 16 0 113 1] self = Core_Option_Option_Type.C_None \/ (exists t : t . self = Core_Option_Option_Type.C_Some t /\ result = Core_Option_Option_Type.C_Some t) }
    
end
module C14Copied_Impl0_Next_Interface
  type i
  type t
  use prelude.Borrow
  use seq.Seq
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl0_Produces_Stub as Produces0 with
    type i = i,
    type t = t
  clone C14Copied_Impl0_Completed_Stub as Completed0 with
    type i = i,
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Impl1_Invariant_Stub as Invariant0 with
    type t = C14Copied_Copied_Type.t_copied i
  val next [#"../14_copied.rs" 48 4 48 35] (self : borrowed (C14Copied_Copied_Type.t_copied i)) : Core_Option_Option_Type.t_option t
    requires {[#"../14_copied.rs" 48 17 48 21] Invariant0.invariant' self}
    ensures { [#"../14_copied.rs" 44 14 47 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C14Copied_Impl0_Next
  type i
  type t
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant1 with
    type self = i
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant3 with
    type t = i,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone C14Copied_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone C14Copied_Common_Iterator_ProducesTrans_Interface as ProducesTrans0 with
    type self = i,
    predicate Produces0.produces = Produces1.produces,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = t,
    axiom .
  clone C14Copied_Common_Iterator_ProducesRefl_Interface as ProducesRefl0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces1.produces,
    type Item0.item = t,
    axiom .
  clone CreusotContracts_Invariant_Invariant_IsInhabited_Interface as IsInhabited0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  clone C14Copied_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Impl1_Invariant as Invariant2 with
    type i = i,
    type t = t,
    predicate Invariant0.invariant' = Invariant1.invariant'
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Option_Impl2_Copied_Interface as Copied1 with
    type t = t
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C14Copied_Copied_Type.t_copied i
  clone C14Copied_Common_Iterator_Next_Interface as Next0 with
    type self = i,
    predicate Invariant0.invariant' = Invariant3.invariant',
    type Item0.item = t,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone C14Copied_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  clone C14Copied_Impl0_Completed as Completed0 with
    type i = i,
    type t = t,
    predicate Completed0.completed = Completed1.completed
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant0 with
    type t = C14Copied_Copied_Type.t_copied i,
    predicate Invariant0.invariant' = Invariant2.invariant'
  let rec cfg next [#"../14_copied.rs" 48 4 48 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C14Copied_Copied_Type.t_copied i)) : Core_Option_Option_Type.t_option t
    requires {[#"../14_copied.rs" 48 17 48 21] Invariant0.invariant' self}
    ensures { [#"../14_copied.rs" 44 14 47 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self_1 : borrowed (C14Copied_Copied_Type.t_copied i);
  var _3 : Core_Option_Option_Type.t_option t;
  var _4 : borrowed i;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut (C14Copied_Copied_Type.copied_iter ( * self_1));
    self_1 <- { self_1 with current = (let C14Copied_Copied_Type.C_Copied a =  * self_1 in C14Copied_Copied_Type.C_Copied ( ^ _4)) };
    assume { Invariant1.invariant' ( ^ _4) };
    _3 <- ([#"../14_copied.rs" 49 8 49 24] Next0.next _4);
    goto BB1
  }
  BB1 {
    assert { Invariant0.invariant' self_1 };
    assume { Resolve0.resolve self_1 };
    _0 <- ([#"../14_copied.rs" 49 8 49 33] Copied1.copied _3);
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
module C14Copied_Impl0
  type i
  type t
  use seq.Seq
  use prelude.Borrow
  clone C14Copied_Common_Iterator_Completed_Interface as Completed1 with
    type self = i
  clone C14Copied_Common_Iterator_Produces_Interface as Produces1 with
    type self = i,
    type Item0.item = t
  clone CreusotContracts_Invariant_Invariant_Invariant_Interface as Invariant2 with
    type self = i
  use C14Copied_Copied_Type as C14Copied_Copied_Type
  clone C14Copied_Common_Iterator_Item_Type as Item0 with
    type self = C14Copied_Copied_Type.t_copied i
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C14Copied_Impl0_Completed as Completed0 with
    type i = i,
    type t = t,
    predicate Completed0.completed = Completed1.completed
  clone C14Copied_Impl1_Invariant as Invariant0 with
    type i = i,
    type t = t,
    predicate Invariant0.invariant' = Invariant2.invariant'
  clone CreusotContracts_Invariant_Impl1_Invariant as Invariant1 with
    type t = C14Copied_Copied_Type.t_copied i,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone C14Copied_Impl0_Produces as Produces0 with
    type i = i,
    type t = t,
    predicate Produces0.produces = Produces1.produces
  goal produces_refl_refn : [#"../14_copied.rs" 36 4 36 29] forall a : C14Copied_Copied_Type.t_copied i . Invariant0.invariant' a -> Invariant0.invariant' a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
  goal produces_trans_refn : [#"../14_copied.rs" 42 4 42 90] forall a : C14Copied_Copied_Type.t_copied i . forall ab : Seq.seq t . forall b : C14Copied_Copied_Type.t_copied i . forall bc : Seq.seq t . forall c : C14Copied_Copied_Type.t_copied i . Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal next_refn : [#"../14_copied.rs" 48 4 48 35] forall self : borrowed (C14Copied_Copied_Type.t_copied i) . Invariant1.invariant' self -> Invariant1.invariant' self /\ (forall result : Core_Option_Option_Type.t_option t . match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end -> match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end)
end
module C14Copied_Impl1
  type i
  type t
end
